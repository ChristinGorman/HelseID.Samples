/*
 * Persontjenesten API - ET
 *
 * ## Introduction  The Person API is a copy of the [National Population Register (\"Folkeregisteret\")](https://www.skatteetaten.no/en/person/national-registry/about/) serving the norwegian health sector, maintained by Norsk helsenett. More detailed information on data coming from the National Population Register is also available in Norwegian here: [Information Model](https://skatteetaten.github.io/folkeregisteret-api-dokumentasjon/informasjonsmodell/)  More detailed information about the Person API service, including how to get access, is documented here: [Persontjenesten](https://www.nhn.no/samhandlingsplattform/grunndata/persontjenesten)  ## Disclaimer  The Person API is under continuous development and will be subject to changes without notice. The changes will follow semantic versioning to prevent breaking changes. Legacy versions will be available for 6 months before they are discontinued. We encourage consumers to follow our changelog in order to keep track of any changes. Send feedback and questions to [persontjenesten@nhn.no](mailto:persontjenesten@nhn.no)  ## Changelog  See [Changelog](../static/changelog/index.html)  ## Synthetic test data  Data in our test environment is using synthetic test data coming from the [Synthetic National Register](https://skatteetaten.github.io/testnorge-tenor-dokumentasjon/kilder#syntetisk-folkeregister). To browse the data available, you can log in using ID-porten at [Testnorge](https://testdata.skatteetaten.no/web/testnorge/)  ## Authentication and authorization  This API uses [HelseID](https://www.nhn.no/samhandlingsplattform/helseid) for authentication and authorization. To use the API you will need to have a valid HelseID token with a valid scope.  There are two scopes available to consume resources from the Person API: - **ReadWithLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-with-legal-basis`    This scope provides read access to information in the authorization bundle \"public with legal basis\" (aka statutory authority).    For version 0.5 name was `nhn:hgd-persontjenesten-api/read`  - **ReadNoLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-no-legal-basis`    This scope provides read access to information in the public bundle \"public with**out** legal basis\". 
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchWithLegalBasisApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Search for a set of persons based on current information. Returns a search result with unique person ids, see HgdPerson.Out.OpenApi.PersonApi.Model.Person
        /// </summary>
        /// <remarks>
        /// Search for a set of persons based on current information. Returns a search result with unique person ids, see Person&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="fullName">The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)</param>
        /// <param name="givenName">The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="middleName">The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="familyName">The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="streetAddress">The street address of the street where the person lives.  Contains of letters, house number, and house letter, up to 200 characters. (optional)</param>
        /// <param name="postalCode">The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="municipalityNumber">The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="birthDateFrom">Will return persons with a birthday equal or higher than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)</param>
        /// <param name="birthDateTo">Will return persons with a birthday equal or lower than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)</param>
        /// <param name="gender">The person&#39;s gender (optional)</param>
        /// <param name="personStatuses">The nature of the relationship/connection  to Norway and the National Population Registry (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StringSearchResult</returns>
        StringSearchResult ApiLegalBasisSearchMatchListPost(string apiVersion = default(string), string fullName = default(string), string givenName = default(string), string middleName = default(string), string familyName = default(string), string streetAddress = default(string), string postalCode = default(string), string municipalityNumber = default(string), string birthDateFrom = default(string), string birthDateTo = default(string), Gender? gender = default(Gender?), List<PersonStatusType> personStatuses = default(List<PersonStatusType>), int operationIndex = 0);

        /// <summary>
        /// Search for a set of persons based on current information. Returns a search result with unique person ids, see HgdPerson.Out.OpenApi.PersonApi.Model.Person
        /// </summary>
        /// <remarks>
        /// Search for a set of persons based on current information. Returns a search result with unique person ids, see Person&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="fullName">The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)</param>
        /// <param name="givenName">The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="middleName">The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="familyName">The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="streetAddress">The street address of the street where the person lives.  Contains of letters, house number, and house letter, up to 200 characters. (optional)</param>
        /// <param name="postalCode">The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="municipalityNumber">The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="birthDateFrom">Will return persons with a birthday equal or higher than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)</param>
        /// <param name="birthDateTo">Will return persons with a birthday equal or lower than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)</param>
        /// <param name="gender">The person&#39;s gender (optional)</param>
        /// <param name="personStatuses">The nature of the relationship/connection  to Norway and the National Population Registry (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StringSearchResult</returns>
        ApiResponse<StringSearchResult> ApiLegalBasisSearchMatchListPostWithHttpInfo(string apiVersion = default(string), string fullName = default(string), string givenName = default(string), string middleName = default(string), string familyName = default(string), string streetAddress = default(string), string postalCode = default(string), string municipalityNumber = default(string), string birthDateFrom = default(string), string birthDateTo = default(string), Gender? gender = default(Gender?), List<PersonStatusType> personStatuses = default(List<PersonStatusType>), int operationIndex = 0);
        /// <summary>
        /// Search for a limited set of persons based on current information. Returns a search result with max 100 person documents.
        /// </summary>
        /// <remarks>
        /// Search parameters will match current information, historic information will not be searchable.  For addresses, it&#39;s possible to search for norwegian residential, present and shared residence addresses.                Search parameters have the following requirements:  &lt;br&gt;1. A value for either FirstName, MiddleName, LastName or FullName&lt;br&gt;2. Combined across all names, there must be at least three letters in total (whitespace is not counted)&lt;br&gt;3. DateOfBirth OR MunicipalityNumber with at least 4 digits OR StreetName with at least three letters (whitespace is not counted)&lt;br&gt;Some search parameters are also validated individually, see the search parameter description for more details.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="birthDate">The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)</param>
        /// <param name="gender">The person&#39;s gender (optional)</param>
        /// <param name="fullName">The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)</param>
        /// <param name="givenName">The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="middleName">The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="familyName">The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="streetAddress">The street address of the street where the person lives.  Contains of letters, housenumber, and houseletter, up to 200 characters. (optional)</param>
        /// <param name="postalCode">The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="cityName">The city name (poststed) of the city the person lives in.  Only letters allowed, up to 100 characters (optional)</param>
        /// <param name="municipalityNumber">The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonSearchResult</returns>
        PersonSearchResult ApiLegalBasisSearchPersonPost(List<InformationPart> informationParts, bool? includeHistory = default(bool?), string apiVersion = default(string), string birthDate = default(string), Gender? gender = default(Gender?), string fullName = default(string), string givenName = default(string), string middleName = default(string), string familyName = default(string), string streetAddress = default(string), string postalCode = default(string), string cityName = default(string), string municipalityNumber = default(string), int operationIndex = 0);

        /// <summary>
        /// Search for a limited set of persons based on current information. Returns a search result with max 100 person documents.
        /// </summary>
        /// <remarks>
        /// Search parameters will match current information, historic information will not be searchable.  For addresses, it&#39;s possible to search for norwegian residential, present and shared residence addresses.                Search parameters have the following requirements:  &lt;br&gt;1. A value for either FirstName, MiddleName, LastName or FullName&lt;br&gt;2. Combined across all names, there must be at least three letters in total (whitespace is not counted)&lt;br&gt;3. DateOfBirth OR MunicipalityNumber with at least 4 digits OR StreetName with at least three letters (whitespace is not counted)&lt;br&gt;Some search parameters are also validated individually, see the search parameter description for more details.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="birthDate">The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)</param>
        /// <param name="gender">The person&#39;s gender (optional)</param>
        /// <param name="fullName">The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)</param>
        /// <param name="givenName">The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="middleName">The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="familyName">The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="streetAddress">The street address of the street where the person lives.  Contains of letters, housenumber, and houseletter, up to 200 characters. (optional)</param>
        /// <param name="postalCode">The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="cityName">The city name (poststed) of the city the person lives in.  Only letters allowed, up to 100 characters (optional)</param>
        /// <param name="municipalityNumber">The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonSearchResult</returns>
        ApiResponse<PersonSearchResult> ApiLegalBasisSearchPersonPostWithHttpInfo(List<InformationPart> informationParts, bool? includeHistory = default(bool?), string apiVersion = default(string), string birthDate = default(string), Gender? gender = default(Gender?), string fullName = default(string), string givenName = default(string), string middleName = default(string), string familyName = default(string), string streetAddress = default(string), string postalCode = default(string), string cityName = default(string), string municipalityNumber = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchWithLegalBasisApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Search for a set of persons based on current information. Returns a search result with unique person ids, see HgdPerson.Out.OpenApi.PersonApi.Model.Person
        /// </summary>
        /// <remarks>
        /// Search for a set of persons based on current information. Returns a search result with unique person ids, see Person&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="fullName">The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)</param>
        /// <param name="givenName">The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="middleName">The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="familyName">The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="streetAddress">The street address of the street where the person lives.  Contains of letters, house number, and house letter, up to 200 characters. (optional)</param>
        /// <param name="postalCode">The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="municipalityNumber">The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="birthDateFrom">Will return persons with a birthday equal or higher than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)</param>
        /// <param name="birthDateTo">Will return persons with a birthday equal or lower than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)</param>
        /// <param name="gender">The person&#39;s gender (optional)</param>
        /// <param name="personStatuses">The nature of the relationship/connection  to Norway and the National Population Registry (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StringSearchResult</returns>
        System.Threading.Tasks.Task<StringSearchResult> ApiLegalBasisSearchMatchListPostAsync(string apiVersion = default(string), string fullName = default(string), string givenName = default(string), string middleName = default(string), string familyName = default(string), string streetAddress = default(string), string postalCode = default(string), string municipalityNumber = default(string), string birthDateFrom = default(string), string birthDateTo = default(string), Gender? gender = default(Gender?), List<PersonStatusType> personStatuses = default(List<PersonStatusType>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for a set of persons based on current information. Returns a search result with unique person ids, see HgdPerson.Out.OpenApi.PersonApi.Model.Person
        /// </summary>
        /// <remarks>
        /// Search for a set of persons based on current information. Returns a search result with unique person ids, see Person&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="fullName">The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)</param>
        /// <param name="givenName">The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="middleName">The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="familyName">The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="streetAddress">The street address of the street where the person lives.  Contains of letters, house number, and house letter, up to 200 characters. (optional)</param>
        /// <param name="postalCode">The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="municipalityNumber">The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="birthDateFrom">Will return persons with a birthday equal or higher than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)</param>
        /// <param name="birthDateTo">Will return persons with a birthday equal or lower than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)</param>
        /// <param name="gender">The person&#39;s gender (optional)</param>
        /// <param name="personStatuses">The nature of the relationship/connection  to Norway and the National Population Registry (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StringSearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringSearchResult>> ApiLegalBasisSearchMatchListPostWithHttpInfoAsync(string apiVersion = default(string), string fullName = default(string), string givenName = default(string), string middleName = default(string), string familyName = default(string), string streetAddress = default(string), string postalCode = default(string), string municipalityNumber = default(string), string birthDateFrom = default(string), string birthDateTo = default(string), Gender? gender = default(Gender?), List<PersonStatusType> personStatuses = default(List<PersonStatusType>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for a limited set of persons based on current information. Returns a search result with max 100 person documents.
        /// </summary>
        /// <remarks>
        /// Search parameters will match current information, historic information will not be searchable.  For addresses, it&#39;s possible to search for norwegian residential, present and shared residence addresses.                Search parameters have the following requirements:  &lt;br&gt;1. A value for either FirstName, MiddleName, LastName or FullName&lt;br&gt;2. Combined across all names, there must be at least three letters in total (whitespace is not counted)&lt;br&gt;3. DateOfBirth OR MunicipalityNumber with at least 4 digits OR StreetName with at least three letters (whitespace is not counted)&lt;br&gt;Some search parameters are also validated individually, see the search parameter description for more details.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="birthDate">The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)</param>
        /// <param name="gender">The person&#39;s gender (optional)</param>
        /// <param name="fullName">The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)</param>
        /// <param name="givenName">The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="middleName">The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="familyName">The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="streetAddress">The street address of the street where the person lives.  Contains of letters, housenumber, and houseletter, up to 200 characters. (optional)</param>
        /// <param name="postalCode">The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="cityName">The city name (poststed) of the city the person lives in.  Only letters allowed, up to 100 characters (optional)</param>
        /// <param name="municipalityNumber">The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonSearchResult</returns>
        System.Threading.Tasks.Task<PersonSearchResult> ApiLegalBasisSearchPersonPostAsync(List<InformationPart> informationParts, bool? includeHistory = default(bool?), string apiVersion = default(string), string birthDate = default(string), Gender? gender = default(Gender?), string fullName = default(string), string givenName = default(string), string middleName = default(string), string familyName = default(string), string streetAddress = default(string), string postalCode = default(string), string cityName = default(string), string municipalityNumber = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for a limited set of persons based on current information. Returns a search result with max 100 person documents.
        /// </summary>
        /// <remarks>
        /// Search parameters will match current information, historic information will not be searchable.  For addresses, it&#39;s possible to search for norwegian residential, present and shared residence addresses.                Search parameters have the following requirements:  &lt;br&gt;1. A value for either FirstName, MiddleName, LastName or FullName&lt;br&gt;2. Combined across all names, there must be at least three letters in total (whitespace is not counted)&lt;br&gt;3. DateOfBirth OR MunicipalityNumber with at least 4 digits OR StreetName with at least three letters (whitespace is not counted)&lt;br&gt;Some search parameters are also validated individually, see the search parameter description for more details.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="birthDate">The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)</param>
        /// <param name="gender">The person&#39;s gender (optional)</param>
        /// <param name="fullName">The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)</param>
        /// <param name="givenName">The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="middleName">The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="familyName">The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="streetAddress">The street address of the street where the person lives.  Contains of letters, housenumber, and houseletter, up to 200 characters. (optional)</param>
        /// <param name="postalCode">The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="cityName">The city name (poststed) of the city the person lives in.  Only letters allowed, up to 100 characters (optional)</param>
        /// <param name="municipalityNumber">The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonSearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonSearchResult>> ApiLegalBasisSearchPersonPostWithHttpInfoAsync(List<InformationPart> informationParts, bool? includeHistory = default(bool?), string apiVersion = default(string), string birthDate = default(string), Gender? gender = default(Gender?), string fullName = default(string), string givenName = default(string), string middleName = default(string), string familyName = default(string), string streetAddress = default(string), string postalCode = default(string), string cityName = default(string), string municipalityNumber = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchWithLegalBasisApi : ISearchWithLegalBasisApiSync, ISearchWithLegalBasisApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SearchWithLegalBasisApi : ISearchWithLegalBasisApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchWithLegalBasisApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchWithLegalBasisApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchWithLegalBasisApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchWithLegalBasisApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchWithLegalBasisApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchWithLegalBasisApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchWithLegalBasisApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SearchWithLegalBasisApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Search for a set of persons based on current information. Returns a search result with unique person ids, see HgdPerson.Out.OpenApi.PersonApi.Model.Person Search for a set of persons based on current information. Returns a search result with unique person ids, see Person&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="fullName">The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)</param>
        /// <param name="givenName">The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="middleName">The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="familyName">The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="streetAddress">The street address of the street where the person lives.  Contains of letters, house number, and house letter, up to 200 characters. (optional)</param>
        /// <param name="postalCode">The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="municipalityNumber">The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="birthDateFrom">Will return persons with a birthday equal or higher than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)</param>
        /// <param name="birthDateTo">Will return persons with a birthday equal or lower than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)</param>
        /// <param name="gender">The person&#39;s gender (optional)</param>
        /// <param name="personStatuses">The nature of the relationship/connection  to Norway and the National Population Registry (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StringSearchResult</returns>
        public StringSearchResult ApiLegalBasisSearchMatchListPost(string apiVersion = default(string), string fullName = default(string), string givenName = default(string), string middleName = default(string), string familyName = default(string), string streetAddress = default(string), string postalCode = default(string), string municipalityNumber = default(string), string birthDateFrom = default(string), string birthDateTo = default(string), Gender? gender = default(Gender?), List<PersonStatusType> personStatuses = default(List<PersonStatusType>), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<StringSearchResult> localVarResponse = ApiLegalBasisSearchMatchListPostWithHttpInfo(apiVersion, fullName, givenName, middleName, familyName, streetAddress, postalCode, municipalityNumber, birthDateFrom, birthDateTo, gender, personStatuses);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for a set of persons based on current information. Returns a search result with unique person ids, see HgdPerson.Out.OpenApi.PersonApi.Model.Person Search for a set of persons based on current information. Returns a search result with unique person ids, see Person&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="fullName">The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)</param>
        /// <param name="givenName">The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="middleName">The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="familyName">The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="streetAddress">The street address of the street where the person lives.  Contains of letters, house number, and house letter, up to 200 characters. (optional)</param>
        /// <param name="postalCode">The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="municipalityNumber">The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="birthDateFrom">Will return persons with a birthday equal or higher than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)</param>
        /// <param name="birthDateTo">Will return persons with a birthday equal or lower than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)</param>
        /// <param name="gender">The person&#39;s gender (optional)</param>
        /// <param name="personStatuses">The nature of the relationship/connection  to Norway and the National Population Registry (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StringSearchResult</returns>
        public Org.OpenAPITools.Client.ApiResponse<StringSearchResult> ApiLegalBasisSearchMatchListPostWithHttpInfo(string apiVersion = default(string), string fullName = default(string), string givenName = default(string), string middleName = default(string), string familyName = default(string), string streetAddress = default(string), string postalCode = default(string), string municipalityNumber = default(string), string birthDateFrom = default(string), string birthDateTo = default(string), Gender? gender = default(Gender?), List<PersonStatusType> personStatuses = default(List<PersonStatusType>), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (apiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("api-version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            }
            if (fullName != null)
            {
                localVarRequestOptions.FormParameters.Add("FullName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fullName)); // form parameter
            }
            if (givenName != null)
            {
                localVarRequestOptions.FormParameters.Add("GivenName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(givenName)); // form parameter
            }
            if (middleName != null)
            {
                localVarRequestOptions.FormParameters.Add("MiddleName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(middleName)); // form parameter
            }
            if (familyName != null)
            {
                localVarRequestOptions.FormParameters.Add("FamilyName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(familyName)); // form parameter
            }
            if (streetAddress != null)
            {
                localVarRequestOptions.FormParameters.Add("StreetAddress", Org.OpenAPITools.Client.ClientUtils.ParameterToString(streetAddress)); // form parameter
            }
            if (postalCode != null)
            {
                localVarRequestOptions.FormParameters.Add("PostalCode", Org.OpenAPITools.Client.ClientUtils.ParameterToString(postalCode)); // form parameter
            }
            if (municipalityNumber != null)
            {
                localVarRequestOptions.FormParameters.Add("MunicipalityNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(municipalityNumber)); // form parameter
            }
            if (birthDateFrom != null)
            {
                localVarRequestOptions.FormParameters.Add("BirthDateFrom", Org.OpenAPITools.Client.ClientUtils.ParameterToString(birthDateFrom)); // form parameter
            }
            if (birthDateTo != null)
            {
                localVarRequestOptions.FormParameters.Add("BirthDateTo", Org.OpenAPITools.Client.ClientUtils.ParameterToString(birthDateTo)); // form parameter
            }
            if (gender != null)
            {
                localVarRequestOptions.FormParameters.Add("Gender", Org.OpenAPITools.Client.ClientUtils.ParameterToString(gender)); // form parameter
            }
            if (personStatuses != null)
            {
                localVarRequestOptions.FormParameters.Add("PersonStatuses", Org.OpenAPITools.Client.ClientUtils.ParameterToString(personStatuses)); // form parameter
            }

            localVarRequestOptions.Operation = "SearchWithLegalBasisApi.ApiLegalBasisSearchMatchListPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (HelseID) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StringSearchResult>("/api/legal-basis/search/match-list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiLegalBasisSearchMatchListPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for a set of persons based on current information. Returns a search result with unique person ids, see HgdPerson.Out.OpenApi.PersonApi.Model.Person Search for a set of persons based on current information. Returns a search result with unique person ids, see Person&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="fullName">The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)</param>
        /// <param name="givenName">The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="middleName">The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="familyName">The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="streetAddress">The street address of the street where the person lives.  Contains of letters, house number, and house letter, up to 200 characters. (optional)</param>
        /// <param name="postalCode">The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="municipalityNumber">The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="birthDateFrom">Will return persons with a birthday equal or higher than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)</param>
        /// <param name="birthDateTo">Will return persons with a birthday equal or lower than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)</param>
        /// <param name="gender">The person&#39;s gender (optional)</param>
        /// <param name="personStatuses">The nature of the relationship/connection  to Norway and the National Population Registry (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StringSearchResult</returns>
        public async System.Threading.Tasks.Task<StringSearchResult> ApiLegalBasisSearchMatchListPostAsync(string apiVersion = default(string), string fullName = default(string), string givenName = default(string), string middleName = default(string), string familyName = default(string), string streetAddress = default(string), string postalCode = default(string), string municipalityNumber = default(string), string birthDateFrom = default(string), string birthDateTo = default(string), Gender? gender = default(Gender?), List<PersonStatusType> personStatuses = default(List<PersonStatusType>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<StringSearchResult> localVarResponse = await ApiLegalBasisSearchMatchListPostWithHttpInfoAsync(apiVersion, fullName, givenName, middleName, familyName, streetAddress, postalCode, municipalityNumber, birthDateFrom, birthDateTo, gender, personStatuses, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for a set of persons based on current information. Returns a search result with unique person ids, see HgdPerson.Out.OpenApi.PersonApi.Model.Person Search for a set of persons based on current information. Returns a search result with unique person ids, see Person&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="fullName">The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)</param>
        /// <param name="givenName">The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="middleName">The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="familyName">The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="streetAddress">The street address of the street where the person lives.  Contains of letters, house number, and house letter, up to 200 characters. (optional)</param>
        /// <param name="postalCode">The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="municipalityNumber">The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="birthDateFrom">Will return persons with a birthday equal or higher than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)</param>
        /// <param name="birthDateTo">Will return persons with a birthday equal or lower than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)</param>
        /// <param name="gender">The person&#39;s gender (optional)</param>
        /// <param name="personStatuses">The nature of the relationship/connection  to Norway and the National Population Registry (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StringSearchResult)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<StringSearchResult>> ApiLegalBasisSearchMatchListPostWithHttpInfoAsync(string apiVersion = default(string), string fullName = default(string), string givenName = default(string), string middleName = default(string), string familyName = default(string), string streetAddress = default(string), string postalCode = default(string), string municipalityNumber = default(string), string birthDateFrom = default(string), string birthDateTo = default(string), Gender? gender = default(Gender?), List<PersonStatusType> personStatuses = default(List<PersonStatusType>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (apiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("api-version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            }
            if (fullName != null)
            {
                localVarRequestOptions.FormParameters.Add("FullName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fullName)); // form parameter
            }
            if (givenName != null)
            {
                localVarRequestOptions.FormParameters.Add("GivenName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(givenName)); // form parameter
            }
            if (middleName != null)
            {
                localVarRequestOptions.FormParameters.Add("MiddleName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(middleName)); // form parameter
            }
            if (familyName != null)
            {
                localVarRequestOptions.FormParameters.Add("FamilyName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(familyName)); // form parameter
            }
            if (streetAddress != null)
            {
                localVarRequestOptions.FormParameters.Add("StreetAddress", Org.OpenAPITools.Client.ClientUtils.ParameterToString(streetAddress)); // form parameter
            }
            if (postalCode != null)
            {
                localVarRequestOptions.FormParameters.Add("PostalCode", Org.OpenAPITools.Client.ClientUtils.ParameterToString(postalCode)); // form parameter
            }
            if (municipalityNumber != null)
            {
                localVarRequestOptions.FormParameters.Add("MunicipalityNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(municipalityNumber)); // form parameter
            }
            if (birthDateFrom != null)
            {
                localVarRequestOptions.FormParameters.Add("BirthDateFrom", Org.OpenAPITools.Client.ClientUtils.ParameterToString(birthDateFrom)); // form parameter
            }
            if (birthDateTo != null)
            {
                localVarRequestOptions.FormParameters.Add("BirthDateTo", Org.OpenAPITools.Client.ClientUtils.ParameterToString(birthDateTo)); // form parameter
            }
            if (gender != null)
            {
                localVarRequestOptions.FormParameters.Add("Gender", Org.OpenAPITools.Client.ClientUtils.ParameterToString(gender)); // form parameter
            }
            if (personStatuses != null)
            {
                localVarRequestOptions.FormParameters.Add("PersonStatuses", Org.OpenAPITools.Client.ClientUtils.ParameterToString(personStatuses)); // form parameter
            }

            localVarRequestOptions.Operation = "SearchWithLegalBasisApi.ApiLegalBasisSearchMatchListPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (HelseID) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StringSearchResult>("/api/legal-basis/search/match-list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiLegalBasisSearchMatchListPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for a limited set of persons based on current information. Returns a search result with max 100 person documents. Search parameters will match current information, historic information will not be searchable.  For addresses, it&#39;s possible to search for norwegian residential, present and shared residence addresses.                Search parameters have the following requirements:  &lt;br&gt;1. A value for either FirstName, MiddleName, LastName or FullName&lt;br&gt;2. Combined across all names, there must be at least three letters in total (whitespace is not counted)&lt;br&gt;3. DateOfBirth OR MunicipalityNumber with at least 4 digits OR StreetName with at least three letters (whitespace is not counted)&lt;br&gt;Some search parameters are also validated individually, see the search parameter description for more details.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="birthDate">The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)</param>
        /// <param name="gender">The person&#39;s gender (optional)</param>
        /// <param name="fullName">The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)</param>
        /// <param name="givenName">The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="middleName">The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="familyName">The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="streetAddress">The street address of the street where the person lives.  Contains of letters, housenumber, and houseletter, up to 200 characters. (optional)</param>
        /// <param name="postalCode">The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="cityName">The city name (poststed) of the city the person lives in.  Only letters allowed, up to 100 characters (optional)</param>
        /// <param name="municipalityNumber">The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonSearchResult</returns>
        public PersonSearchResult ApiLegalBasisSearchPersonPost(List<InformationPart> informationParts, bool? includeHistory = default(bool?), string apiVersion = default(string), string birthDate = default(string), Gender? gender = default(Gender?), string fullName = default(string), string givenName = default(string), string middleName = default(string), string familyName = default(string), string streetAddress = default(string), string postalCode = default(string), string cityName = default(string), string municipalityNumber = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PersonSearchResult> localVarResponse = ApiLegalBasisSearchPersonPostWithHttpInfo(informationParts, includeHistory, apiVersion, birthDate, gender, fullName, givenName, middleName, familyName, streetAddress, postalCode, cityName, municipalityNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for a limited set of persons based on current information. Returns a search result with max 100 person documents. Search parameters will match current information, historic information will not be searchable.  For addresses, it&#39;s possible to search for norwegian residential, present and shared residence addresses.                Search parameters have the following requirements:  &lt;br&gt;1. A value for either FirstName, MiddleName, LastName or FullName&lt;br&gt;2. Combined across all names, there must be at least three letters in total (whitespace is not counted)&lt;br&gt;3. DateOfBirth OR MunicipalityNumber with at least 4 digits OR StreetName with at least three letters (whitespace is not counted)&lt;br&gt;Some search parameters are also validated individually, see the search parameter description for more details.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="birthDate">The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)</param>
        /// <param name="gender">The person&#39;s gender (optional)</param>
        /// <param name="fullName">The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)</param>
        /// <param name="givenName">The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="middleName">The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="familyName">The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="streetAddress">The street address of the street where the person lives.  Contains of letters, housenumber, and houseletter, up to 200 characters. (optional)</param>
        /// <param name="postalCode">The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="cityName">The city name (poststed) of the city the person lives in.  Only letters allowed, up to 100 characters (optional)</param>
        /// <param name="municipalityNumber">The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonSearchResult</returns>
        public Org.OpenAPITools.Client.ApiResponse<PersonSearchResult> ApiLegalBasisSearchPersonPostWithHttpInfo(List<InformationPart> informationParts, bool? includeHistory = default(bool?), string apiVersion = default(string), string birthDate = default(string), Gender? gender = default(Gender?), string fullName = default(string), string givenName = default(string), string middleName = default(string), string familyName = default(string), string streetAddress = default(string), string postalCode = default(string), string cityName = default(string), string municipalityNumber = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'informationParts' is set
            if (informationParts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'informationParts' when calling SearchWithLegalBasisApi->ApiLegalBasisSearchPersonPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "informationParts", informationParts));
            if (includeHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeHistory", includeHistory));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("api-version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            }
            if (birthDate != null)
            {
                localVarRequestOptions.FormParameters.Add("BirthDate", Org.OpenAPITools.Client.ClientUtils.ParameterToString(birthDate)); // form parameter
            }
            if (gender != null)
            {
                localVarRequestOptions.FormParameters.Add("Gender", Org.OpenAPITools.Client.ClientUtils.ParameterToString(gender)); // form parameter
            }
            if (fullName != null)
            {
                localVarRequestOptions.FormParameters.Add("FullName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fullName)); // form parameter
            }
            if (givenName != null)
            {
                localVarRequestOptions.FormParameters.Add("GivenName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(givenName)); // form parameter
            }
            if (middleName != null)
            {
                localVarRequestOptions.FormParameters.Add("MiddleName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(middleName)); // form parameter
            }
            if (familyName != null)
            {
                localVarRequestOptions.FormParameters.Add("FamilyName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(familyName)); // form parameter
            }
            if (streetAddress != null)
            {
                localVarRequestOptions.FormParameters.Add("StreetAddress", Org.OpenAPITools.Client.ClientUtils.ParameterToString(streetAddress)); // form parameter
            }
            if (postalCode != null)
            {
                localVarRequestOptions.FormParameters.Add("PostalCode", Org.OpenAPITools.Client.ClientUtils.ParameterToString(postalCode)); // form parameter
            }
            if (cityName != null)
            {
                localVarRequestOptions.FormParameters.Add("CityName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(cityName)); // form parameter
            }
            if (municipalityNumber != null)
            {
                localVarRequestOptions.FormParameters.Add("MunicipalityNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(municipalityNumber)); // form parameter
            }

            localVarRequestOptions.Operation = "SearchWithLegalBasisApi.ApiLegalBasisSearchPersonPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (HelseID) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PersonSearchResult>("/api/legal-basis/search/person", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiLegalBasisSearchPersonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for a limited set of persons based on current information. Returns a search result with max 100 person documents. Search parameters will match current information, historic information will not be searchable.  For addresses, it&#39;s possible to search for norwegian residential, present and shared residence addresses.                Search parameters have the following requirements:  &lt;br&gt;1. A value for either FirstName, MiddleName, LastName or FullName&lt;br&gt;2. Combined across all names, there must be at least three letters in total (whitespace is not counted)&lt;br&gt;3. DateOfBirth OR MunicipalityNumber with at least 4 digits OR StreetName with at least three letters (whitespace is not counted)&lt;br&gt;Some search parameters are also validated individually, see the search parameter description for more details.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="birthDate">The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)</param>
        /// <param name="gender">The person&#39;s gender (optional)</param>
        /// <param name="fullName">The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)</param>
        /// <param name="givenName">The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="middleName">The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="familyName">The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="streetAddress">The street address of the street where the person lives.  Contains of letters, housenumber, and houseletter, up to 200 characters. (optional)</param>
        /// <param name="postalCode">The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="cityName">The city name (poststed) of the city the person lives in.  Only letters allowed, up to 100 characters (optional)</param>
        /// <param name="municipalityNumber">The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonSearchResult</returns>
        public async System.Threading.Tasks.Task<PersonSearchResult> ApiLegalBasisSearchPersonPostAsync(List<InformationPart> informationParts, bool? includeHistory = default(bool?), string apiVersion = default(string), string birthDate = default(string), Gender? gender = default(Gender?), string fullName = default(string), string givenName = default(string), string middleName = default(string), string familyName = default(string), string streetAddress = default(string), string postalCode = default(string), string cityName = default(string), string municipalityNumber = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PersonSearchResult> localVarResponse = await ApiLegalBasisSearchPersonPostWithHttpInfoAsync(informationParts, includeHistory, apiVersion, birthDate, gender, fullName, givenName, middleName, familyName, streetAddress, postalCode, cityName, municipalityNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for a limited set of persons based on current information. Returns a search result with max 100 person documents. Search parameters will match current information, historic information will not be searchable.  For addresses, it&#39;s possible to search for norwegian residential, present and shared residence addresses.                Search parameters have the following requirements:  &lt;br&gt;1. A value for either FirstName, MiddleName, LastName or FullName&lt;br&gt;2. Combined across all names, there must be at least three letters in total (whitespace is not counted)&lt;br&gt;3. DateOfBirth OR MunicipalityNumber with at least 4 digits OR StreetName with at least three letters (whitespace is not counted)&lt;br&gt;Some search parameters are also validated individually, see the search parameter description for more details.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="birthDate">The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)</param>
        /// <param name="gender">The person&#39;s gender (optional)</param>
        /// <param name="fullName">The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)</param>
        /// <param name="givenName">The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="middleName">The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="familyName">The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)</param>
        /// <param name="streetAddress">The street address of the street where the person lives.  Contains of letters, housenumber, and houseletter, up to 200 characters. (optional)</param>
        /// <param name="postalCode">The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="cityName">The city name (poststed) of the city the person lives in.  Only letters allowed, up to 100 characters (optional)</param>
        /// <param name="municipalityNumber">The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonSearchResult)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PersonSearchResult>> ApiLegalBasisSearchPersonPostWithHttpInfoAsync(List<InformationPart> informationParts, bool? includeHistory = default(bool?), string apiVersion = default(string), string birthDate = default(string), Gender? gender = default(Gender?), string fullName = default(string), string givenName = default(string), string middleName = default(string), string familyName = default(string), string streetAddress = default(string), string postalCode = default(string), string cityName = default(string), string municipalityNumber = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'informationParts' is set
            if (informationParts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'informationParts' when calling SearchWithLegalBasisApi->ApiLegalBasisSearchPersonPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "informationParts", informationParts));
            if (includeHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeHistory", includeHistory));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("api-version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            }
            if (birthDate != null)
            {
                localVarRequestOptions.FormParameters.Add("BirthDate", Org.OpenAPITools.Client.ClientUtils.ParameterToString(birthDate)); // form parameter
            }
            if (gender != null)
            {
                localVarRequestOptions.FormParameters.Add("Gender", Org.OpenAPITools.Client.ClientUtils.ParameterToString(gender)); // form parameter
            }
            if (fullName != null)
            {
                localVarRequestOptions.FormParameters.Add("FullName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fullName)); // form parameter
            }
            if (givenName != null)
            {
                localVarRequestOptions.FormParameters.Add("GivenName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(givenName)); // form parameter
            }
            if (middleName != null)
            {
                localVarRequestOptions.FormParameters.Add("MiddleName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(middleName)); // form parameter
            }
            if (familyName != null)
            {
                localVarRequestOptions.FormParameters.Add("FamilyName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(familyName)); // form parameter
            }
            if (streetAddress != null)
            {
                localVarRequestOptions.FormParameters.Add("StreetAddress", Org.OpenAPITools.Client.ClientUtils.ParameterToString(streetAddress)); // form parameter
            }
            if (postalCode != null)
            {
                localVarRequestOptions.FormParameters.Add("PostalCode", Org.OpenAPITools.Client.ClientUtils.ParameterToString(postalCode)); // form parameter
            }
            if (cityName != null)
            {
                localVarRequestOptions.FormParameters.Add("CityName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(cityName)); // form parameter
            }
            if (municipalityNumber != null)
            {
                localVarRequestOptions.FormParameters.Add("MunicipalityNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(municipalityNumber)); // form parameter
            }

            localVarRequestOptions.Operation = "SearchWithLegalBasisApi.ApiLegalBasisSearchPersonPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (HelseID) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PersonSearchResult>("/api/legal-basis/search/person", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiLegalBasisSearchPersonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
