/*
 * Persontjenesten API - ET
 *
 * ## Introduction  The Person API is a copy of the [National Population Register (\"Folkeregisteret\")](https://www.skatteetaten.no/en/person/national-registry/about/) serving the norwegian health sector, maintained by Norsk helsenett. More detailed information on data coming from the National Population Register is also available in Norwegian here: [Information Model](https://skatteetaten.github.io/folkeregisteret-api-dokumentasjon/informasjonsmodell/)  More detailed information about the Person API service, including how to get access, is documented here: [Persontjenesten](https://www.nhn.no/samhandlingsplattform/grunndata/persontjenesten)  ## Disclaimer  The Person API is under continuous development and will be subject to changes without notice. The changes will follow semantic versioning to prevent breaking changes. Legacy versions will be available for 6 months before they are discontinued. We encourage consumers to follow our changelog in order to keep track of any changes. Send feedback and questions to [persontjenesten@nhn.no](mailto:persontjenesten@nhn.no)  ## Changelog  See [Changelog](../static/changelog/index.html)  ## Synthetic test data  Data in our test environment is using synthetic test data coming from the [Synthetic National Register](https://skatteetaten.github.io/testnorge-tenor-dokumentasjon/kilder#syntetisk-folkeregister). To browse the data available, you can log in using ID-porten at [Testnorge](https://testdata.skatteetaten.no/web/testnorge/)  ## Authentication and authorization  This API uses [HelseID](https://www.nhn.no/samhandlingsplattform/helseid) for authentication and authorization. To use the API you will need to have a valid HelseID token with a valid scope.  There are two scopes available to consume resources from the Person API: - **ReadWithLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-with-legal-basis`    This scope provides read access to information in the authorization bundle \"public with legal basis\" (aka statutory authority).    For version 0.5 name was `nhn:hgd-persontjenesten-api/read`  - **ReadNoLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-no-legal-basis`    This scope provides read access to information in the public bundle \"public with**out** legal basis\". 
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventNoLegalBasisApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the latest event. Returns a search result with the latest available event document
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EventDocument</returns>
        EventDocument ApiNoLegalBasisEventLatestGet(string apiVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Get the latest event. Returns a search result with the latest available event document
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EventDocument</returns>
        ApiResponse<EventDocument> ApiNoLegalBasisEventLatestGetWithHttpInfo(string apiVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// Get list of specific events by filter options. Returns a search result with max 1000 event documents  starting with the specified sequenceNumber
        /// </summary>
        /// <remarks>
        /// Get a list of up to 1000 events from a given sequenceNumber as a starting point. The result list may be  further filtered by specifying which event types that should be included in the result.  The result list will contain the event for the given sequenceNumber if it exists.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sequenceNumber">The lowest sequence number that should be included in the result (optional)</param>
        /// <param name="eventTypes">Which event types that should be included in the result.              All event types will be returned if no event types are specified (optional)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EventDocumentSearchResult</returns>
        EventDocumentSearchResult EventNoLegalBasis(long? sequenceNumber = default(long?), List<EventType> eventTypes = default(List<EventType>), string apiVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Get list of specific events by filter options. Returns a search result with max 1000 event documents  starting with the specified sequenceNumber
        /// </summary>
        /// <remarks>
        /// Get a list of up to 1000 events from a given sequenceNumber as a starting point. The result list may be  further filtered by specifying which event types that should be included in the result.  The result list will contain the event for the given sequenceNumber if it exists.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sequenceNumber">The lowest sequence number that should be included in the result (optional)</param>
        /// <param name="eventTypes">Which event types that should be included in the result.              All event types will be returned if no event types are specified (optional)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EventDocumentSearchResult</returns>
        ApiResponse<EventDocumentSearchResult> EventNoLegalBasisWithHttpInfo(long? sequenceNumber = default(long?), List<EventType> eventTypes = default(List<EventType>), string apiVersion = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventNoLegalBasisApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get the latest event. Returns a search result with the latest available event document
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventDocument</returns>
        System.Threading.Tasks.Task<EventDocument> ApiNoLegalBasisEventLatestGetAsync(string apiVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the latest event. Returns a search result with the latest available event document
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventDocument>> ApiNoLegalBasisEventLatestGetWithHttpInfoAsync(string apiVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get list of specific events by filter options. Returns a search result with max 1000 event documents  starting with the specified sequenceNumber
        /// </summary>
        /// <remarks>
        /// Get a list of up to 1000 events from a given sequenceNumber as a starting point. The result list may be  further filtered by specifying which event types that should be included in the result.  The result list will contain the event for the given sequenceNumber if it exists.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sequenceNumber">The lowest sequence number that should be included in the result (optional)</param>
        /// <param name="eventTypes">Which event types that should be included in the result.              All event types will be returned if no event types are specified (optional)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventDocumentSearchResult</returns>
        System.Threading.Tasks.Task<EventDocumentSearchResult> EventNoLegalBasisAsync(long? sequenceNumber = default(long?), List<EventType> eventTypes = default(List<EventType>), string apiVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get list of specific events by filter options. Returns a search result with max 1000 event documents  starting with the specified sequenceNumber
        /// </summary>
        /// <remarks>
        /// Get a list of up to 1000 events from a given sequenceNumber as a starting point. The result list may be  further filtered by specifying which event types that should be included in the result.  The result list will contain the event for the given sequenceNumber if it exists.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sequenceNumber">The lowest sequence number that should be included in the result (optional)</param>
        /// <param name="eventTypes">Which event types that should be included in the result.              All event types will be returned if no event types are specified (optional)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventDocumentSearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventDocumentSearchResult>> EventNoLegalBasisWithHttpInfoAsync(long? sequenceNumber = default(long?), List<EventType> eventTypes = default(List<EventType>), string apiVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventNoLegalBasisApi : IEventNoLegalBasisApiSync, IEventNoLegalBasisApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventNoLegalBasisApi : IEventNoLegalBasisApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventNoLegalBasisApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventNoLegalBasisApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventNoLegalBasisApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventNoLegalBasisApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventNoLegalBasisApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventNoLegalBasisApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventNoLegalBasisApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EventNoLegalBasisApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get the latest event. Returns a search result with the latest available event document &lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EventDocument</returns>
        public EventDocument ApiNoLegalBasisEventLatestGet(string apiVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EventDocument> localVarResponse = ApiNoLegalBasisEventLatestGetWithHttpInfo(apiVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the latest event. Returns a search result with the latest available event document &lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EventDocument</returns>
        public Org.OpenAPITools.Client.ApiResponse<EventDocument> ApiNoLegalBasisEventLatestGetWithHttpInfo(string apiVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (apiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("api-version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "EventNoLegalBasisApi.ApiNoLegalBasisEventLatestGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (HelseID) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EventDocument>("/api/no-legal-basis/event/latest", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiNoLegalBasisEventLatestGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the latest event. Returns a search result with the latest available event document &lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventDocument</returns>
        public async System.Threading.Tasks.Task<EventDocument> ApiNoLegalBasisEventLatestGetAsync(string apiVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EventDocument> localVarResponse = await ApiNoLegalBasisEventLatestGetWithHttpInfoAsync(apiVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the latest event. Returns a search result with the latest available event document &lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventDocument)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EventDocument>> ApiNoLegalBasisEventLatestGetWithHttpInfoAsync(string apiVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (apiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("api-version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "EventNoLegalBasisApi.ApiNoLegalBasisEventLatestGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (HelseID) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EventDocument>("/api/no-legal-basis/event/latest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiNoLegalBasisEventLatestGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of specific events by filter options. Returns a search result with max 1000 event documents  starting with the specified sequenceNumber Get a list of up to 1000 events from a given sequenceNumber as a starting point. The result list may be  further filtered by specifying which event types that should be included in the result.  The result list will contain the event for the given sequenceNumber if it exists.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sequenceNumber">The lowest sequence number that should be included in the result (optional)</param>
        /// <param name="eventTypes">Which event types that should be included in the result.              All event types will be returned if no event types are specified (optional)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EventDocumentSearchResult</returns>
        public EventDocumentSearchResult EventNoLegalBasis(long? sequenceNumber = default(long?), List<EventType> eventTypes = default(List<EventType>), string apiVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<EventDocumentSearchResult> localVarResponse = EventNoLegalBasisWithHttpInfo(sequenceNumber, eventTypes, apiVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of specific events by filter options. Returns a search result with max 1000 event documents  starting with the specified sequenceNumber Get a list of up to 1000 events from a given sequenceNumber as a starting point. The result list may be  further filtered by specifying which event types that should be included in the result.  The result list will contain the event for the given sequenceNumber if it exists.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sequenceNumber">The lowest sequence number that should be included in the result (optional)</param>
        /// <param name="eventTypes">Which event types that should be included in the result.              All event types will be returned if no event types are specified (optional)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EventDocumentSearchResult</returns>
        public Org.OpenAPITools.Client.ApiResponse<EventDocumentSearchResult> EventNoLegalBasisWithHttpInfo(long? sequenceNumber = default(long?), List<EventType> eventTypes = default(List<EventType>), string apiVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sequenceNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sequenceNumber", sequenceNumber));
            }
            if (eventTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "eventTypes", eventTypes));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("api-version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "EventNoLegalBasisApi.EventNoLegalBasis";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (HelseID) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EventDocumentSearchResult>("/api/no-legal-basis/event", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventNoLegalBasis", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of specific events by filter options. Returns a search result with max 1000 event documents  starting with the specified sequenceNumber Get a list of up to 1000 events from a given sequenceNumber as a starting point. The result list may be  further filtered by specifying which event types that should be included in the result.  The result list will contain the event for the given sequenceNumber if it exists.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sequenceNumber">The lowest sequence number that should be included in the result (optional)</param>
        /// <param name="eventTypes">Which event types that should be included in the result.              All event types will be returned if no event types are specified (optional)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventDocumentSearchResult</returns>
        public async System.Threading.Tasks.Task<EventDocumentSearchResult> EventNoLegalBasisAsync(long? sequenceNumber = default(long?), List<EventType> eventTypes = default(List<EventType>), string apiVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EventDocumentSearchResult> localVarResponse = await EventNoLegalBasisWithHttpInfoAsync(sequenceNumber, eventTypes, apiVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of specific events by filter options. Returns a search result with max 1000 event documents  starting with the specified sequenceNumber Get a list of up to 1000 events from a given sequenceNumber as a starting point. The result list may be  further filtered by specifying which event types that should be included in the result.  The result list will contain the event for the given sequenceNumber if it exists.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sequenceNumber">The lowest sequence number that should be included in the result (optional)</param>
        /// <param name="eventTypes">Which event types that should be included in the result.              All event types will be returned if no event types are specified (optional)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventDocumentSearchResult)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EventDocumentSearchResult>> EventNoLegalBasisWithHttpInfoAsync(long? sequenceNumber = default(long?), List<EventType> eventTypes = default(List<EventType>), string apiVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sequenceNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sequenceNumber", sequenceNumber));
            }
            if (eventTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "eventTypes", eventTypes));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("api-version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "EventNoLegalBasisApi.EventNoLegalBasis";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (HelseID) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EventDocumentSearchResult>("/api/no-legal-basis/event", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EventNoLegalBasis", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
