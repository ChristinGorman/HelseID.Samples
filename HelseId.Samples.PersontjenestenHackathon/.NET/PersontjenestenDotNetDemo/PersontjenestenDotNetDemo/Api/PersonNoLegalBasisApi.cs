/*
 * Persontjenesten API - ET
 *
 * ## Introduction  The Person API is a copy of the [National Population Register (\"Folkeregisteret\")](https://www.skatteetaten.no/en/person/national-registry/about/) serving the norwegian health sector, maintained by Norsk helsenett. More detailed information on data coming from the National Population Register is also available in Norwegian here: [Information Model](https://skatteetaten.github.io/folkeregisteret-api-dokumentasjon/informasjonsmodell/)  More detailed information about the Person API service, including how to get access, is documented here: [Persontjenesten](https://www.nhn.no/samhandlingsplattform/grunndata/persontjenesten)  ## Disclaimer  The Person API is under continuous development and will be subject to changes without notice. The changes will follow semantic versioning to prevent breaking changes. Legacy versions will be available for 6 months before they are discontinued. We encourage consumers to follow our changelog in order to keep track of any changes. Send feedback and questions to [persontjenesten@nhn.no](mailto:persontjenesten@nhn.no)  ## Changelog  See [Changelog](../static/changelog/index.html)  ## Synthetic test data  Data in our test environment is using synthetic test data coming from the [Synthetic National Register](https://skatteetaten.github.io/testnorge-tenor-dokumentasjon/kilder#syntetisk-folkeregister). To browse the data available, you can log in using ID-porten at [Testnorge](https://testdata.skatteetaten.no/web/testnorge/)  ## Authentication and authorization  This API uses [HelseID](https://www.nhn.no/samhandlingsplattform/helseid) for authentication and authorization. To use the API you will need to have a valid HelseID token with a valid scope.  There are two scopes available to consume resources from the Person API: - **ReadWithLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-with-legal-basis`    This scope provides read access to information in the authorization bundle \"public with legal basis\" (aka statutory authority).    For version 0.5 name was `nhn:hgd-persontjenesten-api/read`  - **ReadNoLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-no-legal-basis`    This scope provides read access to information in the public bundle \"public with**out** legal basis\". 
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonNoLegalBasisApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get multiple persons from a list of unique person id.
        /// </summary>
        /// <remarks>
        /// Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="personIds"></param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Person&gt;</returns>
        List<Person> ApiNoLegalBasisPersonBulkByIdPost(List<InformationPart> informationParts, List<string> personIds, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Get multiple persons from a list of unique person id.
        /// </summary>
        /// <remarks>
        /// Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="personIds"></param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Person&gt;</returns>
        ApiResponse<List<Person>> ApiNoLegalBasisPersonBulkByIdPostWithHttpInfo(List<InformationPart> informationParts, List<string> personIds, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// Get multiple persons from a list of Norwegian Identification Numbers.
        /// </summary>
        /// <remarks>
        /// Norwegian Identification Number includes national identity numbers (fødselsnummer) and D-numbers (D-nummer).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="nins"></param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Person&gt;</returns>
        List<Person> ApiNoLegalBasisPersonBulkByNinPost(List<InformationPart> informationParts, List<string> nins, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Get multiple persons from a list of Norwegian Identification Numbers.
        /// </summary>
        /// <remarks>
        /// Norwegian Identification Number includes national identity numbers (fødselsnummer) and D-numbers (D-nummer).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="nins"></param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Person&gt;</returns>
        ApiResponse<List<Person>> ApiNoLegalBasisPersonBulkByNinPostWithHttpInfo(List<InformationPart> informationParts, List<string> nins, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// Get a specific Person by Norwegian Identification Number
        /// </summary>
        /// <remarks>
        /// Get a person from a Norwegian Identification Number. This includes national identity numbers (fødselsnummer) and D-numbers (D-nummer).  Historic NINs are supported. H-number (hjelpenummer) is currently not supported.  This is a POST request to avoid including NIN as part of the URL.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="nin"></param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Person</returns>
        Person ApiNoLegalBasisPersonGetByNinPost(List<InformationPart> informationParts, string nin, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Get a specific Person by Norwegian Identification Number
        /// </summary>
        /// <remarks>
        /// Get a person from a Norwegian Identification Number. This includes national identity numbers (fødselsnummer) and D-numbers (D-nummer).  Historic NINs are supported. H-number (hjelpenummer) is currently not supported.  This is a POST request to avoid including NIN as part of the URL.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="nin"></param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Person</returns>
        ApiResponse<Person> ApiNoLegalBasisPersonGetByNinPostWithHttpInfo(List<InformationPart> informationParts, string nin, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0);
        /// <summary>
        /// Get a specific person by unique id
        /// </summary>
        /// <remarks>
        /// Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Person id</param>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Person</returns>
        Person ApiNoLegalBasisPersonIdGet(string id, List<InformationPart> informationParts, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Get a specific person by unique id
        /// </summary>
        /// <remarks>
        /// Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Person id</param>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Person</returns>
        ApiResponse<Person> ApiNoLegalBasisPersonIdGetWithHttpInfo(string id, List<InformationPart> informationParts, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonNoLegalBasisApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get multiple persons from a list of unique person id.
        /// </summary>
        /// <remarks>
        /// Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="personIds"></param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Person&gt;</returns>
        System.Threading.Tasks.Task<List<Person>> ApiNoLegalBasisPersonBulkByIdPostAsync(List<InformationPart> informationParts, List<string> personIds, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get multiple persons from a list of unique person id.
        /// </summary>
        /// <remarks>
        /// Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="personIds"></param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Person&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Person>>> ApiNoLegalBasisPersonBulkByIdPostWithHttpInfoAsync(List<InformationPart> informationParts, List<string> personIds, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get multiple persons from a list of Norwegian Identification Numbers.
        /// </summary>
        /// <remarks>
        /// Norwegian Identification Number includes national identity numbers (fødselsnummer) and D-numbers (D-nummer).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="nins"></param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Person&gt;</returns>
        System.Threading.Tasks.Task<List<Person>> ApiNoLegalBasisPersonBulkByNinPostAsync(List<InformationPart> informationParts, List<string> nins, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get multiple persons from a list of Norwegian Identification Numbers.
        /// </summary>
        /// <remarks>
        /// Norwegian Identification Number includes national identity numbers (fødselsnummer) and D-numbers (D-nummer).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="nins"></param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Person&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Person>>> ApiNoLegalBasisPersonBulkByNinPostWithHttpInfoAsync(List<InformationPart> informationParts, List<string> nins, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a specific Person by Norwegian Identification Number
        /// </summary>
        /// <remarks>
        /// Get a person from a Norwegian Identification Number. This includes national identity numbers (fødselsnummer) and D-numbers (D-nummer).  Historic NINs are supported. H-number (hjelpenummer) is currently not supported.  This is a POST request to avoid including NIN as part of the URL.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="nin"></param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Person</returns>
        System.Threading.Tasks.Task<Person> ApiNoLegalBasisPersonGetByNinPostAsync(List<InformationPart> informationParts, string nin, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a specific Person by Norwegian Identification Number
        /// </summary>
        /// <remarks>
        /// Get a person from a Norwegian Identification Number. This includes national identity numbers (fødselsnummer) and D-numbers (D-nummer).  Historic NINs are supported. H-number (hjelpenummer) is currently not supported.  This is a POST request to avoid including NIN as part of the URL.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="nin"></param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Person)</returns>
        System.Threading.Tasks.Task<ApiResponse<Person>> ApiNoLegalBasisPersonGetByNinPostWithHttpInfoAsync(List<InformationPart> informationParts, string nin, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a specific person by unique id
        /// </summary>
        /// <remarks>
        /// Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Person id</param>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Person</returns>
        System.Threading.Tasks.Task<Person> ApiNoLegalBasisPersonIdGetAsync(string id, List<InformationPart> informationParts, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a specific person by unique id
        /// </summary>
        /// <remarks>
        /// Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Person id</param>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Person)</returns>
        System.Threading.Tasks.Task<ApiResponse<Person>> ApiNoLegalBasisPersonIdGetWithHttpInfoAsync(string id, List<InformationPart> informationParts, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonNoLegalBasisApi : IPersonNoLegalBasisApiSync, IPersonNoLegalBasisApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PersonNoLegalBasisApi : IPersonNoLegalBasisApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonNoLegalBasisApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PersonNoLegalBasisApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonNoLegalBasisApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PersonNoLegalBasisApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonNoLegalBasisApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PersonNoLegalBasisApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonNoLegalBasisApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PersonNoLegalBasisApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get multiple persons from a list of unique person id. Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="personIds"></param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Person&gt;</returns>
        public List<Person> ApiNoLegalBasisPersonBulkByIdPost(List<InformationPart> informationParts, List<string> personIds, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Person>> localVarResponse = ApiNoLegalBasisPersonBulkByIdPostWithHttpInfo(informationParts, personIds, includeHistory, apiVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get multiple persons from a list of unique person id. Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="personIds"></param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Person&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Person>> ApiNoLegalBasisPersonBulkByIdPostWithHttpInfo(List<InformationPart> informationParts, List<string> personIds, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'informationParts' is set
            if (informationParts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'informationParts' when calling PersonNoLegalBasisApi->ApiNoLegalBasisPersonBulkByIdPost");
            }

            // verify the required parameter 'personIds' is set
            if (personIds == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'personIds' when calling PersonNoLegalBasisApi->ApiNoLegalBasisPersonBulkByIdPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "informationParts", informationParts));
            if (includeHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeHistory", includeHistory));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("api-version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            }
            localVarRequestOptions.FormParameters.Add("personIds", Org.OpenAPITools.Client.ClientUtils.Serialize(personIds)); // form parameter

            localVarRequestOptions.Operation = "PersonNoLegalBasisApi.ApiNoLegalBasisPersonBulkByIdPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (HelseID) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Person>>("/api/no-legal-basis/person/bulk-by-id", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiNoLegalBasisPersonBulkByIdPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get multiple persons from a list of unique person id. Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="personIds"></param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Person&gt;</returns>
        public async System.Threading.Tasks.Task<List<Person>> ApiNoLegalBasisPersonBulkByIdPostAsync(List<InformationPart> informationParts, List<string> personIds, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Person>> localVarResponse = await ApiNoLegalBasisPersonBulkByIdPostWithHttpInfoAsync(informationParts, personIds, includeHistory, apiVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get multiple persons from a list of unique person id. Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="personIds"></param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Person&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Person>>> ApiNoLegalBasisPersonBulkByIdPostWithHttpInfoAsync(List<InformationPart> informationParts, List<string> personIds, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'informationParts' is set
            if (informationParts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'informationParts' when calling PersonNoLegalBasisApi->ApiNoLegalBasisPersonBulkByIdPost");
            }

            // verify the required parameter 'personIds' is set
            if (personIds == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'personIds' when calling PersonNoLegalBasisApi->ApiNoLegalBasisPersonBulkByIdPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "informationParts", informationParts));
            if (includeHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeHistory", includeHistory));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("api-version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            }
            localVarRequestOptions.FormParameters.Add("personIds", Org.OpenAPITools.Client.ClientUtils.ParameterToString(personIds)); // form parameter

            localVarRequestOptions.Operation = "PersonNoLegalBasisApi.ApiNoLegalBasisPersonBulkByIdPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (HelseID) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Person>>("/api/no-legal-basis/person/bulk-by-id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiNoLegalBasisPersonBulkByIdPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get multiple persons from a list of Norwegian Identification Numbers. Norwegian Identification Number includes national identity numbers (fødselsnummer) and D-numbers (D-nummer).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="nins"></param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Person&gt;</returns>
        public List<Person> ApiNoLegalBasisPersonBulkByNinPost(List<InformationPart> informationParts, List<string> nins, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Person>> localVarResponse = ApiNoLegalBasisPersonBulkByNinPostWithHttpInfo(informationParts, nins, includeHistory, apiVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get multiple persons from a list of Norwegian Identification Numbers. Norwegian Identification Number includes national identity numbers (fødselsnummer) and D-numbers (D-nummer).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="nins"></param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Person&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Person>> ApiNoLegalBasisPersonBulkByNinPostWithHttpInfo(List<InformationPart> informationParts, List<string> nins, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'informationParts' is set
            if (informationParts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'informationParts' when calling PersonNoLegalBasisApi->ApiNoLegalBasisPersonBulkByNinPost");
            }

            // verify the required parameter 'nins' is set
            if (nins == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'nins' when calling PersonNoLegalBasisApi->ApiNoLegalBasisPersonBulkByNinPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "informationParts", informationParts));
            if (includeHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeHistory", includeHistory));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("api-version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            }
            localVarRequestOptions.FormParameters.Add("nins", Org.OpenAPITools.Client.ClientUtils.Serialize(nins)); // form parameter

            localVarRequestOptions.Operation = "PersonNoLegalBasisApi.ApiNoLegalBasisPersonBulkByNinPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (HelseID) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Person>>("/api/no-legal-basis/person/bulk-by-nin", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiNoLegalBasisPersonBulkByNinPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get multiple persons from a list of Norwegian Identification Numbers. Norwegian Identification Number includes national identity numbers (fødselsnummer) and D-numbers (D-nummer).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="nins"></param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Person&gt;</returns>
        public async System.Threading.Tasks.Task<List<Person>> ApiNoLegalBasisPersonBulkByNinPostAsync(List<InformationPart> informationParts, List<string> nins, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Person>> localVarResponse = await ApiNoLegalBasisPersonBulkByNinPostWithHttpInfoAsync(informationParts, nins, includeHistory, apiVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get multiple persons from a list of Norwegian Identification Numbers. Norwegian Identification Number includes national identity numbers (fødselsnummer) and D-numbers (D-nummer).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="nins"></param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Person&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Person>>> ApiNoLegalBasisPersonBulkByNinPostWithHttpInfoAsync(List<InformationPart> informationParts, List<string> nins, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'informationParts' is set
            if (informationParts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'informationParts' when calling PersonNoLegalBasisApi->ApiNoLegalBasisPersonBulkByNinPost");
            }

            // verify the required parameter 'nins' is set
            if (nins == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'nins' when calling PersonNoLegalBasisApi->ApiNoLegalBasisPersonBulkByNinPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "informationParts", informationParts));
            if (includeHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeHistory", includeHistory));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("api-version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            }
            localVarRequestOptions.FormParameters.Add("nins", Org.OpenAPITools.Client.ClientUtils.ParameterToString(nins)); // form parameter

            localVarRequestOptions.Operation = "PersonNoLegalBasisApi.ApiNoLegalBasisPersonBulkByNinPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (HelseID) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Person>>("/api/no-legal-basis/person/bulk-by-nin", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiNoLegalBasisPersonBulkByNinPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific Person by Norwegian Identification Number Get a person from a Norwegian Identification Number. This includes national identity numbers (fødselsnummer) and D-numbers (D-nummer).  Historic NINs are supported. H-number (hjelpenummer) is currently not supported.  This is a POST request to avoid including NIN as part of the URL.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="nin"></param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Person</returns>
        public Person ApiNoLegalBasisPersonGetByNinPost(List<InformationPart> informationParts, string nin, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Person> localVarResponse = ApiNoLegalBasisPersonGetByNinPostWithHttpInfo(informationParts, nin, includeHistory, apiVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific Person by Norwegian Identification Number Get a person from a Norwegian Identification Number. This includes national identity numbers (fødselsnummer) and D-numbers (D-nummer).  Historic NINs are supported. H-number (hjelpenummer) is currently not supported.  This is a POST request to avoid including NIN as part of the URL.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="nin"></param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Person</returns>
        public Org.OpenAPITools.Client.ApiResponse<Person> ApiNoLegalBasisPersonGetByNinPostWithHttpInfo(List<InformationPart> informationParts, string nin, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'informationParts' is set
            if (informationParts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'informationParts' when calling PersonNoLegalBasisApi->ApiNoLegalBasisPersonGetByNinPost");
            }

            // verify the required parameter 'nin' is set
            if (nin == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'nin' when calling PersonNoLegalBasisApi->ApiNoLegalBasisPersonGetByNinPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "informationParts", informationParts));
            if (includeHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeHistory", includeHistory));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("api-version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            }
            localVarRequestOptions.FormParameters.Add("nin", Org.OpenAPITools.Client.ClientUtils.ParameterToString(nin)); // form parameter

            localVarRequestOptions.Operation = "PersonNoLegalBasisApi.ApiNoLegalBasisPersonGetByNinPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (HelseID) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Person>("/api/no-legal-basis/person/get-by-nin", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiNoLegalBasisPersonGetByNinPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific Person by Norwegian Identification Number Get a person from a Norwegian Identification Number. This includes national identity numbers (fødselsnummer) and D-numbers (D-nummer).  Historic NINs are supported. H-number (hjelpenummer) is currently not supported.  This is a POST request to avoid including NIN as part of the URL.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="nin"></param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Person</returns>
        public async System.Threading.Tasks.Task<Person> ApiNoLegalBasisPersonGetByNinPostAsync(List<InformationPart> informationParts, string nin, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Person> localVarResponse = await ApiNoLegalBasisPersonGetByNinPostWithHttpInfoAsync(informationParts, nin, includeHistory, apiVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific Person by Norwegian Identification Number Get a person from a Norwegian Identification Number. This includes national identity numbers (fødselsnummer) and D-numbers (D-nummer).  Historic NINs are supported. H-number (hjelpenummer) is currently not supported.  This is a POST request to avoid including NIN as part of the URL.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="nin"></param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Person)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Person>> ApiNoLegalBasisPersonGetByNinPostWithHttpInfoAsync(List<InformationPart> informationParts, string nin, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'informationParts' is set
            if (informationParts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'informationParts' when calling PersonNoLegalBasisApi->ApiNoLegalBasisPersonGetByNinPost");
            }

            // verify the required parameter 'nin' is set
            if (nin == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'nin' when calling PersonNoLegalBasisApi->ApiNoLegalBasisPersonGetByNinPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "informationParts", informationParts));
            if (includeHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeHistory", includeHistory));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("api-version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            }
            localVarRequestOptions.FormParameters.Add("nin", Org.OpenAPITools.Client.ClientUtils.ParameterToString(nin)); // form parameter

            localVarRequestOptions.Operation = "PersonNoLegalBasisApi.ApiNoLegalBasisPersonGetByNinPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (HelseID) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Person>("/api/no-legal-basis/person/get-by-nin", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiNoLegalBasisPersonGetByNinPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific person by unique id Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Person id</param>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Person</returns>
        public Person ApiNoLegalBasisPersonIdGet(string id, List<InformationPart> informationParts, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Person> localVarResponse = ApiNoLegalBasisPersonIdGetWithHttpInfo(id, informationParts, includeHistory, apiVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific person by unique id Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Person id</param>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Person</returns>
        public Org.OpenAPITools.Client.ApiResponse<Person> ApiNoLegalBasisPersonIdGetWithHttpInfo(string id, List<InformationPart> informationParts, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling PersonNoLegalBasisApi->ApiNoLegalBasisPersonIdGet");
            }

            // verify the required parameter 'informationParts' is set
            if (informationParts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'informationParts' when calling PersonNoLegalBasisApi->ApiNoLegalBasisPersonIdGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "informationParts", informationParts));
            if (includeHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeHistory", includeHistory));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("api-version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "PersonNoLegalBasisApi.ApiNoLegalBasisPersonIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (HelseID) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Person>("/api/no-legal-basis/person/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiNoLegalBasisPersonIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific person by unique id Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Person id</param>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Person</returns>
        public async System.Threading.Tasks.Task<Person> ApiNoLegalBasisPersonIdGetAsync(string id, List<InformationPart> informationParts, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Person> localVarResponse = await ApiNoLegalBasisPersonIdGetWithHttpInfoAsync(id, informationParts, includeHistory, apiVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific person by unique id Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Person id</param>
        /// <param name="informationParts">Which information parts that should be included in the result</param>
        /// <param name="includeHistory">Flag to indicate if response should include historic information, defaults to false (optional, default to false)</param>
        /// <param name="apiVersion">The requested API version (optional, default to &quot;1.5&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Person)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Person>> ApiNoLegalBasisPersonIdGetWithHttpInfoAsync(string id, List<InformationPart> informationParts, bool? includeHistory = default(bool?), string apiVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling PersonNoLegalBasisApi->ApiNoLegalBasisPersonIdGet");
            }

            // verify the required parameter 'informationParts' is set
            if (informationParts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'informationParts' when calling PersonNoLegalBasisApi->ApiNoLegalBasisPersonIdGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "informationParts", informationParts));
            if (includeHistory != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeHistory", includeHistory));
            }
            if (apiVersion != null)
            {
                localVarRequestOptions.HeaderParameters.Add("api-version", Org.OpenAPITools.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            }

            localVarRequestOptions.Operation = "PersonNoLegalBasisApi.ApiNoLegalBasisPersonIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (HelseID) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Person>("/api/no-legal-basis/person/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiNoLegalBasisPersonIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
