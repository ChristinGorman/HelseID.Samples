/*
 * Persontjenesten API - ET
 *
 * ## Introduction  The Person API is a copy of the [National Population Register (\"Folkeregisteret\")](https://www.skatteetaten.no/en/person/national-registry/about/) serving the norwegian health sector, maintained by Norsk helsenett. More detailed information on data coming from the National Population Register is also available in Norwegian here: [Information Model](https://skatteetaten.github.io/folkeregisteret-api-dokumentasjon/informasjonsmodell/)  More detailed information about the Person API service, including how to get access, is documented here: [Persontjenesten](https://www.nhn.no/samhandlingsplattform/grunndata/persontjenesten)  ## Disclaimer  The Person API is under continuous development and will be subject to changes without notice. The changes will follow semantic versioning to prevent breaking changes. Legacy versions will be available for 6 months before they are discontinued. We encourage consumers to follow our changelog in order to keep track of any changes. Send feedback and questions to [persontjenesten@nhn.no](mailto:persontjenesten@nhn.no)  ## Changelog  See [Changelog](../static/changelog/index.html)  ## Synthetic test data  Data in our test environment is using synthetic test data coming from the [Synthetic National Register](https://skatteetaten.github.io/testnorge-tenor-dokumentasjon/kilder#syntetisk-folkeregister). To browse the data available, you can log in using ID-porten at [Testnorge](https://testdata.skatteetaten.no/web/testnorge/)  ## Authentication and authorization  This API uses [HelseID](https://www.nhn.no/samhandlingsplattform/helseid) for authentication and authorization. To use the API you will need to have a valid HelseID token with a valid scope.  There are two scopes available to consume resources from the Person API: - **ReadWithLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-with-legal-basis`    This scope provides read access to information in the authorization bundle \"public with legal basis\" (aka statutory authority).    For version 0.5 name was `nhn:hgd-persontjenesten-api/read`  - **ReadNoLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-no-legal-basis`    This scope provides read access to information in the public bundle \"public with**out** legal basis\". 
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Information on a person in the Person API.  Data is primarily from the National Population Register (FREG), but also contains data from other sources.
    /// </summary>
    [DataContract(Name = "Person")]
    public partial class Person : IEquatable<Person>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Person" /> class.
        /// </summary>
        /// <param name="falseIdentity">falseIdentity.</param>
        /// <param name="norwegianIdentificationNumber">&lt;br&gt;FREG: Identifikasjonsnummer.</param>
        /// <param name="identityVerification">If empty, is the same as IdentityVerificationStatus.None&lt;br&gt;FREG: Identitetsgrunnlag.</param>
        /// <param name="residuaryEstateContactInformation">&lt;br&gt;FREG: KontaktinformasjonForDoedsbo.</param>
        /// <param name="identificationDocument">&lt;br&gt;FREG: Legitimasjonsdokument.</param>
        /// <param name="status">&lt;br&gt;FREG: Status.</param>
        /// <param name="immigrationAuthoritiesIdentificationNumber">&lt;br&gt;FREG: UtlendingsmyndighetenesIdentifikasjonsnummer.</param>
        /// <param name="foreignPersonIdentificationNumber">&lt;br&gt;FREG: UtenlandskPersonidentifikasjon.</param>
        /// <param name="sharedResidence">List may only contain 0 or 1 element  &lt;br&gt;FREG: DeltBosted.</param>
        /// <param name="gender">&lt;br&gt;FREG: Kjoenn.</param>
        /// <param name="birth">&lt;br&gt;FREG: Foedsel.</param>
        /// <param name="birthInNorway">&lt;br&gt;FREG: FoedselINorge.</param>
        /// <param name="familyRelation">&lt;br&gt;FREG: Familierelasjon.</param>
        /// <param name="maritalStatus">&lt;br&gt;FREG: Sivilstand.</param>
        /// <param name="death">death.</param>
        /// <param name="name">&lt;br&gt;FREG: Navn.</param>
        /// <param name="addressProtection">&lt;br&gt;FREG: Adressebeskyttelse.</param>
        /// <param name="residentialAddress">&lt;br&gt;FREG: Bostedsadresse.</param>
        /// <param name="presentAddress">&lt;br&gt;FREG: Oppholdsadresse.</param>
        /// <param name="immigrationToNorway">&lt;br&gt;FREG: Innflytting.</param>
        /// <param name="emigrationFromNorway">&lt;br&gt;FREG: Utflytting.</param>
        /// <param name="useOfSamiLanguage">&lt;br&gt;FREG: BrukAvSamiskSpraak.</param>
        /// <param name="samiParliamentElectoralRegistryStatus">&lt;br&gt;FREG: ForholdTilSametingetsValgmanntall.</param>
        /// <param name="preferredContactAddress">Will be removed with deprecation of API v1.0  &lt;br&gt;FREG: PreferertKontaktadresse.</param>
        /// <param name="postalAddress">&lt;br&gt;FREG: Postadresse.</param>
        /// <param name="foreignPostalAddress">&lt;br&gt;FREG: PostadresseIUtlandet.</param>
        /// <param name="parentalResponsibility">&lt;br&gt;FREG: Foreldreansvar.</param>
        /// <param name="citizenship">&lt;br&gt;FREG: Statsborgerskap.</param>
        /// <param name="citizenshipRetention">&lt;br&gt;FREG: Bibehold.</param>
        /// <param name="residencePermit">&lt;br&gt;FREG: Opphold.</param>
        /// <param name="stayOnSvalbard">&lt;br&gt;FREG: OppholdPaaSvalbard.</param>
        /// <param name="guardianshipOrFuturePowerOfAttorney">&lt;br&gt;FREG: VergemaalEllerFremtidsfullmakt.</param>
        /// <param name="deprivedLegalAuthority">&lt;br&gt;FREG: FratattRettsligHandleevne .</param>
        /// <param name="id">A person&#39;s id. A unique identifier created by the Person API..</param>
        /// <param name="sequenceNumber">Internal sequence number, referring to the event that produced this version of the person information..</param>
        /// <param name="commonContactRegisterInformation">commonContactRegisterInformation.</param>
        public Person(PersonFalseIdentity falseIdentity = default(PersonFalseIdentity), List<NorwegianIdentificationNumber> norwegianIdentificationNumber = default(List<NorwegianIdentificationNumber>), List<IdentityVerification> identityVerification = default(List<IdentityVerification>), List<ResiduaryEstateContactInformation> residuaryEstateContactInformation = default(List<ResiduaryEstateContactInformation>), List<IdentificationDocument> identificationDocument = default(List<IdentificationDocument>), List<PersonStatus> status = default(List<PersonStatus>), List<PersonIdentification> immigrationAuthoritiesIdentificationNumber = default(List<PersonIdentification>), List<PersonIdentification> foreignPersonIdentificationNumber = default(List<PersonIdentification>), List<SharedResidence> sharedResidence = default(List<SharedResidence>), List<PersonGender> gender = default(List<PersonGender>), List<Birth> birth = default(List<Birth>), List<BirthInNorway> birthInNorway = default(List<BirthInNorway>), List<FamilyRelation> familyRelation = default(List<FamilyRelation>), List<MaritalStatus> maritalStatus = default(List<MaritalStatus>), PersonDeath death = default(PersonDeath), List<PersonName> name = default(List<PersonName>), List<AddressProtection> addressProtection = default(List<AddressProtection>), List<ResidentialAddress> residentialAddress = default(List<ResidentialAddress>), List<PresentAddress> presentAddress = default(List<PresentAddress>), List<ImmigrationToNorway> immigrationToNorway = default(List<ImmigrationToNorway>), List<EmigrationFromNorway> emigrationFromNorway = default(List<EmigrationFromNorway>), List<SamiLanguage> useOfSamiLanguage = default(List<SamiLanguage>), List<SamiParliamentElectoralRegistry> samiParliamentElectoralRegistryStatus = default(List<SamiParliamentElectoralRegistry>), List<PreferredContactAddress> preferredContactAddress = default(List<PreferredContactAddress>), List<ContactAddress> postalAddress = default(List<ContactAddress>), List<ForeignContactAddress> foreignPostalAddress = default(List<ForeignContactAddress>), List<ParentalResponsibility> parentalResponsibility = default(List<ParentalResponsibility>), List<Citizenship> citizenship = default(List<Citizenship>), List<NorwegianCitizenshipRetention> citizenshipRetention = default(List<NorwegianCitizenshipRetention>), List<ResidencePermit> residencePermit = default(List<ResidencePermit>), List<StayOnSvalbard> stayOnSvalbard = default(List<StayOnSvalbard>), List<GuardianshipOrFuturePowerOfAttorney> guardianshipOrFuturePowerOfAttorney = default(List<GuardianshipOrFuturePowerOfAttorney>), List<DeprivedLegalAuthority> deprivedLegalAuthority = default(List<DeprivedLegalAuthority>), string id = default(string), long sequenceNumber = default(long), PersonCommonContactRegisterInformation commonContactRegisterInformation = default(PersonCommonContactRegisterInformation))
        {
            this.FalseIdentity = falseIdentity;
            this.NorwegianIdentificationNumber = norwegianIdentificationNumber;
            this.IdentityVerification = identityVerification;
            this.ResiduaryEstateContactInformation = residuaryEstateContactInformation;
            this.IdentificationDocument = identificationDocument;
            this.Status = status;
            this.ImmigrationAuthoritiesIdentificationNumber = immigrationAuthoritiesIdentificationNumber;
            this.ForeignPersonIdentificationNumber = foreignPersonIdentificationNumber;
            this.SharedResidence = sharedResidence;
            this.Gender = gender;
            this.Birth = birth;
            this.BirthInNorway = birthInNorway;
            this.FamilyRelation = familyRelation;
            this.MaritalStatus = maritalStatus;
            this.Death = death;
            this.Name = name;
            this.AddressProtection = addressProtection;
            this.ResidentialAddress = residentialAddress;
            this.PresentAddress = presentAddress;
            this.ImmigrationToNorway = immigrationToNorway;
            this.EmigrationFromNorway = emigrationFromNorway;
            this.UseOfSamiLanguage = useOfSamiLanguage;
            this.SamiParliamentElectoralRegistryStatus = samiParliamentElectoralRegistryStatus;
            this.PreferredContactAddress = preferredContactAddress;
            this.PostalAddress = postalAddress;
            this.ForeignPostalAddress = foreignPostalAddress;
            this.ParentalResponsibility = parentalResponsibility;
            this.Citizenship = citizenship;
            this.CitizenshipRetention = citizenshipRetention;
            this.ResidencePermit = residencePermit;
            this.StayOnSvalbard = stayOnSvalbard;
            this.GuardianshipOrFuturePowerOfAttorney = guardianshipOrFuturePowerOfAttorney;
            this.DeprivedLegalAuthority = deprivedLegalAuthority;
            this.Id = id;
            this.SequenceNumber = sequenceNumber;
            this.CommonContactRegisterInformation = commonContactRegisterInformation;
        }

        /// <summary>
        /// Gets or Sets FalseIdentity
        /// </summary>
        [DataMember(Name = "falseIdentity", EmitDefaultValue = true)]
        public PersonFalseIdentity FalseIdentity { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Identifikasjonsnummer
        /// </summary>
        /// <value>&lt;br&gt;FREG: Identifikasjonsnummer</value>
        [DataMember(Name = "norwegianIdentificationNumber", EmitDefaultValue = true)]
        public List<NorwegianIdentificationNumber> NorwegianIdentificationNumber { get; set; }

        /// <summary>
        /// If empty, is the same as IdentityVerificationStatus.None&lt;br&gt;FREG: Identitetsgrunnlag
        /// </summary>
        /// <value>If empty, is the same as IdentityVerificationStatus.None&lt;br&gt;FREG: Identitetsgrunnlag</value>
        [DataMember(Name = "identityVerification", EmitDefaultValue = true)]
        public List<IdentityVerification> IdentityVerification { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: KontaktinformasjonForDoedsbo
        /// </summary>
        /// <value>&lt;br&gt;FREG: KontaktinformasjonForDoedsbo</value>
        [DataMember(Name = "residuaryEstateContactInformation", EmitDefaultValue = true)]
        public List<ResiduaryEstateContactInformation> ResiduaryEstateContactInformation { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Legitimasjonsdokument
        /// </summary>
        /// <value>&lt;br&gt;FREG: Legitimasjonsdokument</value>
        [DataMember(Name = "identificationDocument", EmitDefaultValue = true)]
        public List<IdentificationDocument> IdentificationDocument { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Status
        /// </summary>
        /// <value>&lt;br&gt;FREG: Status</value>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public List<PersonStatus> Status { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: UtlendingsmyndighetenesIdentifikasjonsnummer
        /// </summary>
        /// <value>&lt;br&gt;FREG: UtlendingsmyndighetenesIdentifikasjonsnummer</value>
        [DataMember(Name = "immigrationAuthoritiesIdentificationNumber", EmitDefaultValue = true)]
        public List<PersonIdentification> ImmigrationAuthoritiesIdentificationNumber { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: UtenlandskPersonidentifikasjon
        /// </summary>
        /// <value>&lt;br&gt;FREG: UtenlandskPersonidentifikasjon</value>
        [DataMember(Name = "foreignPersonIdentificationNumber", EmitDefaultValue = true)]
        public List<PersonIdentification> ForeignPersonIdentificationNumber { get; set; }

        /// <summary>
        /// List may only contain 0 or 1 element  &lt;br&gt;FREG: DeltBosted
        /// </summary>
        /// <value>List may only contain 0 or 1 element  &lt;br&gt;FREG: DeltBosted</value>
        [DataMember(Name = "sharedResidence", EmitDefaultValue = true)]
        public List<SharedResidence> SharedResidence { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Kjoenn
        /// </summary>
        /// <value>&lt;br&gt;FREG: Kjoenn</value>
        [DataMember(Name = "gender", EmitDefaultValue = true)]
        public List<PersonGender> Gender { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Foedsel
        /// </summary>
        /// <value>&lt;br&gt;FREG: Foedsel</value>
        [DataMember(Name = "birth", EmitDefaultValue = true)]
        public List<Birth> Birth { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: FoedselINorge
        /// </summary>
        /// <value>&lt;br&gt;FREG: FoedselINorge</value>
        [DataMember(Name = "birthInNorway", EmitDefaultValue = true)]
        public List<BirthInNorway> BirthInNorway { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Familierelasjon
        /// </summary>
        /// <value>&lt;br&gt;FREG: Familierelasjon</value>
        [DataMember(Name = "familyRelation", EmitDefaultValue = true)]
        public List<FamilyRelation> FamilyRelation { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Sivilstand
        /// </summary>
        /// <value>&lt;br&gt;FREG: Sivilstand</value>
        [DataMember(Name = "maritalStatus", EmitDefaultValue = true)]
        public List<MaritalStatus> MaritalStatus { get; set; }

        /// <summary>
        /// Gets or Sets Death
        /// </summary>
        [DataMember(Name = "death", EmitDefaultValue = true)]
        public PersonDeath Death { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Navn
        /// </summary>
        /// <value>&lt;br&gt;FREG: Navn</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public List<PersonName> Name { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Adressebeskyttelse
        /// </summary>
        /// <value>&lt;br&gt;FREG: Adressebeskyttelse</value>
        [DataMember(Name = "addressProtection", EmitDefaultValue = true)]
        public List<AddressProtection> AddressProtection { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Bostedsadresse
        /// </summary>
        /// <value>&lt;br&gt;FREG: Bostedsadresse</value>
        [DataMember(Name = "residentialAddress", EmitDefaultValue = true)]
        public List<ResidentialAddress> ResidentialAddress { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Oppholdsadresse
        /// </summary>
        /// <value>&lt;br&gt;FREG: Oppholdsadresse</value>
        [DataMember(Name = "presentAddress", EmitDefaultValue = true)]
        public List<PresentAddress> PresentAddress { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Innflytting
        /// </summary>
        /// <value>&lt;br&gt;FREG: Innflytting</value>
        [DataMember(Name = "immigrationToNorway", EmitDefaultValue = true)]
        public List<ImmigrationToNorway> ImmigrationToNorway { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Utflytting
        /// </summary>
        /// <value>&lt;br&gt;FREG: Utflytting</value>
        [DataMember(Name = "emigrationFromNorway", EmitDefaultValue = true)]
        public List<EmigrationFromNorway> EmigrationFromNorway { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: BrukAvSamiskSpraak
        /// </summary>
        /// <value>&lt;br&gt;FREG: BrukAvSamiskSpraak</value>
        [DataMember(Name = "useOfSamiLanguage", EmitDefaultValue = true)]
        public List<SamiLanguage> UseOfSamiLanguage { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: ForholdTilSametingetsValgmanntall
        /// </summary>
        /// <value>&lt;br&gt;FREG: ForholdTilSametingetsValgmanntall</value>
        [DataMember(Name = "samiParliamentElectoralRegistryStatus", EmitDefaultValue = true)]
        public List<SamiParliamentElectoralRegistry> SamiParliamentElectoralRegistryStatus { get; set; }

        /// <summary>
        /// Will be removed with deprecation of API v1.0  &lt;br&gt;FREG: PreferertKontaktadresse
        /// </summary>
        /// <value>Will be removed with deprecation of API v1.0  &lt;br&gt;FREG: PreferertKontaktadresse</value>
        [DataMember(Name = "preferredContactAddress", EmitDefaultValue = true)]
        [Obsolete]
        public List<PreferredContactAddress> PreferredContactAddress { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Postadresse
        /// </summary>
        /// <value>&lt;br&gt;FREG: Postadresse</value>
        [DataMember(Name = "postalAddress", EmitDefaultValue = true)]
        public List<ContactAddress> PostalAddress { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: PostadresseIUtlandet
        /// </summary>
        /// <value>&lt;br&gt;FREG: PostadresseIUtlandet</value>
        [DataMember(Name = "foreignPostalAddress", EmitDefaultValue = true)]
        public List<ForeignContactAddress> ForeignPostalAddress { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Foreldreansvar
        /// </summary>
        /// <value>&lt;br&gt;FREG: Foreldreansvar</value>
        [DataMember(Name = "parentalResponsibility", EmitDefaultValue = true)]
        public List<ParentalResponsibility> ParentalResponsibility { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Statsborgerskap
        /// </summary>
        /// <value>&lt;br&gt;FREG: Statsborgerskap</value>
        [DataMember(Name = "citizenship", EmitDefaultValue = true)]
        public List<Citizenship> Citizenship { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Bibehold
        /// </summary>
        /// <value>&lt;br&gt;FREG: Bibehold</value>
        [DataMember(Name = "citizenshipRetention", EmitDefaultValue = true)]
        public List<NorwegianCitizenshipRetention> CitizenshipRetention { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Opphold
        /// </summary>
        /// <value>&lt;br&gt;FREG: Opphold</value>
        [DataMember(Name = "residencePermit", EmitDefaultValue = true)]
        public List<ResidencePermit> ResidencePermit { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: OppholdPaaSvalbard
        /// </summary>
        /// <value>&lt;br&gt;FREG: OppholdPaaSvalbard</value>
        [DataMember(Name = "stayOnSvalbard", EmitDefaultValue = true)]
        public List<StayOnSvalbard> StayOnSvalbard { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: VergemaalEllerFremtidsfullmakt
        /// </summary>
        /// <value>&lt;br&gt;FREG: VergemaalEllerFremtidsfullmakt</value>
        [DataMember(Name = "guardianshipOrFuturePowerOfAttorney", EmitDefaultValue = true)]
        public List<GuardianshipOrFuturePowerOfAttorney> GuardianshipOrFuturePowerOfAttorney { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: FratattRettsligHandleevne 
        /// </summary>
        /// <value>&lt;br&gt;FREG: FratattRettsligHandleevne </value>
        [DataMember(Name = "deprivedLegalAuthority", EmitDefaultValue = true)]
        public List<DeprivedLegalAuthority> DeprivedLegalAuthority { get; set; }

        /// <summary>
        /// A person&#39;s id. A unique identifier created by the Person API.
        /// </summary>
        /// <value>A person&#39;s id. A unique identifier created by the Person API.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Internal sequence number, referring to the event that produced this version of the person information.
        /// </summary>
        /// <value>Internal sequence number, referring to the event that produced this version of the person information.</value>
        [DataMember(Name = "sequenceNumber", EmitDefaultValue = false)]
        public long SequenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets CommonContactRegisterInformation
        /// </summary>
        [DataMember(Name = "commonContactRegisterInformation", EmitDefaultValue = true)]
        public PersonCommonContactRegisterInformation CommonContactRegisterInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Person {\n");
            sb.Append("  FalseIdentity: ").Append(FalseIdentity).Append("\n");
            sb.Append("  NorwegianIdentificationNumber: ").Append(NorwegianIdentificationNumber).Append("\n");
            sb.Append("  IdentityVerification: ").Append(IdentityVerification).Append("\n");
            sb.Append("  ResiduaryEstateContactInformation: ").Append(ResiduaryEstateContactInformation).Append("\n");
            sb.Append("  IdentificationDocument: ").Append(IdentificationDocument).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ImmigrationAuthoritiesIdentificationNumber: ").Append(ImmigrationAuthoritiesIdentificationNumber).Append("\n");
            sb.Append("  ForeignPersonIdentificationNumber: ").Append(ForeignPersonIdentificationNumber).Append("\n");
            sb.Append("  SharedResidence: ").Append(SharedResidence).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Birth: ").Append(Birth).Append("\n");
            sb.Append("  BirthInNorway: ").Append(BirthInNorway).Append("\n");
            sb.Append("  FamilyRelation: ").Append(FamilyRelation).Append("\n");
            sb.Append("  MaritalStatus: ").Append(MaritalStatus).Append("\n");
            sb.Append("  Death: ").Append(Death).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AddressProtection: ").Append(AddressProtection).Append("\n");
            sb.Append("  ResidentialAddress: ").Append(ResidentialAddress).Append("\n");
            sb.Append("  PresentAddress: ").Append(PresentAddress).Append("\n");
            sb.Append("  ImmigrationToNorway: ").Append(ImmigrationToNorway).Append("\n");
            sb.Append("  EmigrationFromNorway: ").Append(EmigrationFromNorway).Append("\n");
            sb.Append("  UseOfSamiLanguage: ").Append(UseOfSamiLanguage).Append("\n");
            sb.Append("  SamiParliamentElectoralRegistryStatus: ").Append(SamiParliamentElectoralRegistryStatus).Append("\n");
            sb.Append("  PreferredContactAddress: ").Append(PreferredContactAddress).Append("\n");
            sb.Append("  PostalAddress: ").Append(PostalAddress).Append("\n");
            sb.Append("  ForeignPostalAddress: ").Append(ForeignPostalAddress).Append("\n");
            sb.Append("  ParentalResponsibility: ").Append(ParentalResponsibility).Append("\n");
            sb.Append("  Citizenship: ").Append(Citizenship).Append("\n");
            sb.Append("  CitizenshipRetention: ").Append(CitizenshipRetention).Append("\n");
            sb.Append("  ResidencePermit: ").Append(ResidencePermit).Append("\n");
            sb.Append("  StayOnSvalbard: ").Append(StayOnSvalbard).Append("\n");
            sb.Append("  GuardianshipOrFuturePowerOfAttorney: ").Append(GuardianshipOrFuturePowerOfAttorney).Append("\n");
            sb.Append("  DeprivedLegalAuthority: ").Append(DeprivedLegalAuthority).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  CommonContactRegisterInformation: ").Append(CommonContactRegisterInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Person);
        }

        /// <summary>
        /// Returns true if Person instances are equal
        /// </summary>
        /// <param name="input">Instance of Person to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Person input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FalseIdentity == input.FalseIdentity ||
                    (this.FalseIdentity != null &&
                    this.FalseIdentity.Equals(input.FalseIdentity))
                ) && 
                (
                    this.NorwegianIdentificationNumber == input.NorwegianIdentificationNumber ||
                    this.NorwegianIdentificationNumber != null &&
                    input.NorwegianIdentificationNumber != null &&
                    this.NorwegianIdentificationNumber.SequenceEqual(input.NorwegianIdentificationNumber)
                ) && 
                (
                    this.IdentityVerification == input.IdentityVerification ||
                    this.IdentityVerification != null &&
                    input.IdentityVerification != null &&
                    this.IdentityVerification.SequenceEqual(input.IdentityVerification)
                ) && 
                (
                    this.ResiduaryEstateContactInformation == input.ResiduaryEstateContactInformation ||
                    this.ResiduaryEstateContactInformation != null &&
                    input.ResiduaryEstateContactInformation != null &&
                    this.ResiduaryEstateContactInformation.SequenceEqual(input.ResiduaryEstateContactInformation)
                ) && 
                (
                    this.IdentificationDocument == input.IdentificationDocument ||
                    this.IdentificationDocument != null &&
                    input.IdentificationDocument != null &&
                    this.IdentificationDocument.SequenceEqual(input.IdentificationDocument)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status != null &&
                    input.Status != null &&
                    this.Status.SequenceEqual(input.Status)
                ) && 
                (
                    this.ImmigrationAuthoritiesIdentificationNumber == input.ImmigrationAuthoritiesIdentificationNumber ||
                    this.ImmigrationAuthoritiesIdentificationNumber != null &&
                    input.ImmigrationAuthoritiesIdentificationNumber != null &&
                    this.ImmigrationAuthoritiesIdentificationNumber.SequenceEqual(input.ImmigrationAuthoritiesIdentificationNumber)
                ) && 
                (
                    this.ForeignPersonIdentificationNumber == input.ForeignPersonIdentificationNumber ||
                    this.ForeignPersonIdentificationNumber != null &&
                    input.ForeignPersonIdentificationNumber != null &&
                    this.ForeignPersonIdentificationNumber.SequenceEqual(input.ForeignPersonIdentificationNumber)
                ) && 
                (
                    this.SharedResidence == input.SharedResidence ||
                    this.SharedResidence != null &&
                    input.SharedResidence != null &&
                    this.SharedResidence.SequenceEqual(input.SharedResidence)
                ) && 
                (
                    this.Gender == input.Gender ||
                    this.Gender != null &&
                    input.Gender != null &&
                    this.Gender.SequenceEqual(input.Gender)
                ) && 
                (
                    this.Birth == input.Birth ||
                    this.Birth != null &&
                    input.Birth != null &&
                    this.Birth.SequenceEqual(input.Birth)
                ) && 
                (
                    this.BirthInNorway == input.BirthInNorway ||
                    this.BirthInNorway != null &&
                    input.BirthInNorway != null &&
                    this.BirthInNorway.SequenceEqual(input.BirthInNorway)
                ) && 
                (
                    this.FamilyRelation == input.FamilyRelation ||
                    this.FamilyRelation != null &&
                    input.FamilyRelation != null &&
                    this.FamilyRelation.SequenceEqual(input.FamilyRelation)
                ) && 
                (
                    this.MaritalStatus == input.MaritalStatus ||
                    this.MaritalStatus != null &&
                    input.MaritalStatus != null &&
                    this.MaritalStatus.SequenceEqual(input.MaritalStatus)
                ) && 
                (
                    this.Death == input.Death ||
                    (this.Death != null &&
                    this.Death.Equals(input.Death))
                ) && 
                (
                    this.Name == input.Name ||
                    this.Name != null &&
                    input.Name != null &&
                    this.Name.SequenceEqual(input.Name)
                ) && 
                (
                    this.AddressProtection == input.AddressProtection ||
                    this.AddressProtection != null &&
                    input.AddressProtection != null &&
                    this.AddressProtection.SequenceEqual(input.AddressProtection)
                ) && 
                (
                    this.ResidentialAddress == input.ResidentialAddress ||
                    this.ResidentialAddress != null &&
                    input.ResidentialAddress != null &&
                    this.ResidentialAddress.SequenceEqual(input.ResidentialAddress)
                ) && 
                (
                    this.PresentAddress == input.PresentAddress ||
                    this.PresentAddress != null &&
                    input.PresentAddress != null &&
                    this.PresentAddress.SequenceEqual(input.PresentAddress)
                ) && 
                (
                    this.ImmigrationToNorway == input.ImmigrationToNorway ||
                    this.ImmigrationToNorway != null &&
                    input.ImmigrationToNorway != null &&
                    this.ImmigrationToNorway.SequenceEqual(input.ImmigrationToNorway)
                ) && 
                (
                    this.EmigrationFromNorway == input.EmigrationFromNorway ||
                    this.EmigrationFromNorway != null &&
                    input.EmigrationFromNorway != null &&
                    this.EmigrationFromNorway.SequenceEqual(input.EmigrationFromNorway)
                ) && 
                (
                    this.UseOfSamiLanguage == input.UseOfSamiLanguage ||
                    this.UseOfSamiLanguage != null &&
                    input.UseOfSamiLanguage != null &&
                    this.UseOfSamiLanguage.SequenceEqual(input.UseOfSamiLanguage)
                ) && 
                (
                    this.SamiParliamentElectoralRegistryStatus == input.SamiParliamentElectoralRegistryStatus ||
                    this.SamiParliamentElectoralRegistryStatus != null &&
                    input.SamiParliamentElectoralRegistryStatus != null &&
                    this.SamiParliamentElectoralRegistryStatus.SequenceEqual(input.SamiParliamentElectoralRegistryStatus)
                ) && 
                (
                    this.PreferredContactAddress == input.PreferredContactAddress ||
                    this.PreferredContactAddress != null &&
                    input.PreferredContactAddress != null &&
                    this.PreferredContactAddress.SequenceEqual(input.PreferredContactAddress)
                ) && 
                (
                    this.PostalAddress == input.PostalAddress ||
                    this.PostalAddress != null &&
                    input.PostalAddress != null &&
                    this.PostalAddress.SequenceEqual(input.PostalAddress)
                ) && 
                (
                    this.ForeignPostalAddress == input.ForeignPostalAddress ||
                    this.ForeignPostalAddress != null &&
                    input.ForeignPostalAddress != null &&
                    this.ForeignPostalAddress.SequenceEqual(input.ForeignPostalAddress)
                ) && 
                (
                    this.ParentalResponsibility == input.ParentalResponsibility ||
                    this.ParentalResponsibility != null &&
                    input.ParentalResponsibility != null &&
                    this.ParentalResponsibility.SequenceEqual(input.ParentalResponsibility)
                ) && 
                (
                    this.Citizenship == input.Citizenship ||
                    this.Citizenship != null &&
                    input.Citizenship != null &&
                    this.Citizenship.SequenceEqual(input.Citizenship)
                ) && 
                (
                    this.CitizenshipRetention == input.CitizenshipRetention ||
                    this.CitizenshipRetention != null &&
                    input.CitizenshipRetention != null &&
                    this.CitizenshipRetention.SequenceEqual(input.CitizenshipRetention)
                ) && 
                (
                    this.ResidencePermit == input.ResidencePermit ||
                    this.ResidencePermit != null &&
                    input.ResidencePermit != null &&
                    this.ResidencePermit.SequenceEqual(input.ResidencePermit)
                ) && 
                (
                    this.StayOnSvalbard == input.StayOnSvalbard ||
                    this.StayOnSvalbard != null &&
                    input.StayOnSvalbard != null &&
                    this.StayOnSvalbard.SequenceEqual(input.StayOnSvalbard)
                ) && 
                (
                    this.GuardianshipOrFuturePowerOfAttorney == input.GuardianshipOrFuturePowerOfAttorney ||
                    this.GuardianshipOrFuturePowerOfAttorney != null &&
                    input.GuardianshipOrFuturePowerOfAttorney != null &&
                    this.GuardianshipOrFuturePowerOfAttorney.SequenceEqual(input.GuardianshipOrFuturePowerOfAttorney)
                ) && 
                (
                    this.DeprivedLegalAuthority == input.DeprivedLegalAuthority ||
                    this.DeprivedLegalAuthority != null &&
                    input.DeprivedLegalAuthority != null &&
                    this.DeprivedLegalAuthority.SequenceEqual(input.DeprivedLegalAuthority)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SequenceNumber == input.SequenceNumber ||
                    this.SequenceNumber.Equals(input.SequenceNumber)
                ) && 
                (
                    this.CommonContactRegisterInformation == input.CommonContactRegisterInformation ||
                    (this.CommonContactRegisterInformation != null &&
                    this.CommonContactRegisterInformation.Equals(input.CommonContactRegisterInformation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FalseIdentity != null)
                {
                    hashCode = (hashCode * 59) + this.FalseIdentity.GetHashCode();
                }
                if (this.NorwegianIdentificationNumber != null)
                {
                    hashCode = (hashCode * 59) + this.NorwegianIdentificationNumber.GetHashCode();
                }
                if (this.IdentityVerification != null)
                {
                    hashCode = (hashCode * 59) + this.IdentityVerification.GetHashCode();
                }
                if (this.ResiduaryEstateContactInformation != null)
                {
                    hashCode = (hashCode * 59) + this.ResiduaryEstateContactInformation.GetHashCode();
                }
                if (this.IdentificationDocument != null)
                {
                    hashCode = (hashCode * 59) + this.IdentificationDocument.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.ImmigrationAuthoritiesIdentificationNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ImmigrationAuthoritiesIdentificationNumber.GetHashCode();
                }
                if (this.ForeignPersonIdentificationNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ForeignPersonIdentificationNumber.GetHashCode();
                }
                if (this.SharedResidence != null)
                {
                    hashCode = (hashCode * 59) + this.SharedResidence.GetHashCode();
                }
                if (this.Gender != null)
                {
                    hashCode = (hashCode * 59) + this.Gender.GetHashCode();
                }
                if (this.Birth != null)
                {
                    hashCode = (hashCode * 59) + this.Birth.GetHashCode();
                }
                if (this.BirthInNorway != null)
                {
                    hashCode = (hashCode * 59) + this.BirthInNorway.GetHashCode();
                }
                if (this.FamilyRelation != null)
                {
                    hashCode = (hashCode * 59) + this.FamilyRelation.GetHashCode();
                }
                if (this.MaritalStatus != null)
                {
                    hashCode = (hashCode * 59) + this.MaritalStatus.GetHashCode();
                }
                if (this.Death != null)
                {
                    hashCode = (hashCode * 59) + this.Death.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.AddressProtection != null)
                {
                    hashCode = (hashCode * 59) + this.AddressProtection.GetHashCode();
                }
                if (this.ResidentialAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ResidentialAddress.GetHashCode();
                }
                if (this.PresentAddress != null)
                {
                    hashCode = (hashCode * 59) + this.PresentAddress.GetHashCode();
                }
                if (this.ImmigrationToNorway != null)
                {
                    hashCode = (hashCode * 59) + this.ImmigrationToNorway.GetHashCode();
                }
                if (this.EmigrationFromNorway != null)
                {
                    hashCode = (hashCode * 59) + this.EmigrationFromNorway.GetHashCode();
                }
                if (this.UseOfSamiLanguage != null)
                {
                    hashCode = (hashCode * 59) + this.UseOfSamiLanguage.GetHashCode();
                }
                if (this.SamiParliamentElectoralRegistryStatus != null)
                {
                    hashCode = (hashCode * 59) + this.SamiParliamentElectoralRegistryStatus.GetHashCode();
                }
                if (this.PreferredContactAddress != null)
                {
                    hashCode = (hashCode * 59) + this.PreferredContactAddress.GetHashCode();
                }
                if (this.PostalAddress != null)
                {
                    hashCode = (hashCode * 59) + this.PostalAddress.GetHashCode();
                }
                if (this.ForeignPostalAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ForeignPostalAddress.GetHashCode();
                }
                if (this.ParentalResponsibility != null)
                {
                    hashCode = (hashCode * 59) + this.ParentalResponsibility.GetHashCode();
                }
                if (this.Citizenship != null)
                {
                    hashCode = (hashCode * 59) + this.Citizenship.GetHashCode();
                }
                if (this.CitizenshipRetention != null)
                {
                    hashCode = (hashCode * 59) + this.CitizenshipRetention.GetHashCode();
                }
                if (this.ResidencePermit != null)
                {
                    hashCode = (hashCode * 59) + this.ResidencePermit.GetHashCode();
                }
                if (this.StayOnSvalbard != null)
                {
                    hashCode = (hashCode * 59) + this.StayOnSvalbard.GetHashCode();
                }
                if (this.GuardianshipOrFuturePowerOfAttorney != null)
                {
                    hashCode = (hashCode * 59) + this.GuardianshipOrFuturePowerOfAttorney.GetHashCode();
                }
                if (this.DeprivedLegalAuthority != null)
                {
                    hashCode = (hashCode * 59) + this.DeprivedLegalAuthority.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SequenceNumber.GetHashCode();
                if (this.CommonContactRegisterInformation != null)
                {
                    hashCode = (hashCode * 59) + this.CommonContactRegisterInformation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
