/*
 * Persontjenesten API - ET
 *
 * ## Introduction  The Person API is a copy of the [National Population Register (\"Folkeregisteret\")](https://www.skatteetaten.no/en/person/national-registry/about/) serving the norwegian health sector, maintained by Norsk helsenett. More detailed information on data coming from the National Population Register is also available in Norwegian here: [Information Model](https://skatteetaten.github.io/folkeregisteret-api-dokumentasjon/informasjonsmodell/)  More detailed information about the Person API service, including how to get access, is documented here: [Persontjenesten](https://www.nhn.no/samhandlingsplattform/grunndata/persontjenesten)  ## Disclaimer  The Person API is under continuous development and will be subject to changes without notice. The changes will follow semantic versioning to prevent breaking changes. Legacy versions will be available for 6 months before they are discontinued. We encourage consumers to follow our changelog in order to keep track of any changes. Send feedback and questions to [persontjenesten@nhn.no](mailto:persontjenesten@nhn.no)  ## Changelog  See [Changelog](../static/changelog/index.html)  ## Synthetic test data  Data in our test environment is using synthetic test data coming from the [Synthetic National Register](https://skatteetaten.github.io/testnorge-tenor-dokumentasjon/kilder#syntetisk-folkeregister). To browse the data available, you can log in using ID-porten at [Testnorge](https://testdata.skatteetaten.no/web/testnorge/)  ## Authentication and authorization  This API uses [HelseID](https://www.nhn.no/samhandlingsplattform/helseid) for authentication and authorization. To use the API you will need to have a valid HelseID token with a valid scope.  There are two scopes available to consume resources from the Person API: - **ReadWithLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-with-legal-basis`    This scope provides read access to information in the authorization bundle \"public with legal basis\" (aka statutory authority).    For version 0.5 name was `nhn:hgd-persontjenesten-api/read`  - **ReadNoLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-no-legal-basis`    This scope provides read access to information in the public bundle \"public with**out** legal basis\". 
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Information parts available for filtering
    /// </summary>
    /// <value>Information parts available for filtering</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum InformationPart
    {
        /// <summary>
        /// Enum AddressProtection for value: AddressProtection
        /// </summary>
        [EnumMember(Value = "AddressProtection")]
        AddressProtection = 1,

        /// <summary>
        /// Enum CitizenshipRetention for value: CitizenshipRetention
        /// </summary>
        [EnumMember(Value = "CitizenshipRetention")]
        CitizenshipRetention = 2,

        /// <summary>
        /// Enum ResidentialAddress for value: ResidentialAddress
        /// </summary>
        [EnumMember(Value = "ResidentialAddress")]
        ResidentialAddress = 3,

        /// <summary>
        /// Enum UseOfSamiLanguage for value: UseOfSamiLanguage
        /// </summary>
        [EnumMember(Value = "UseOfSamiLanguage")]
        UseOfSamiLanguage = 4,

        /// <summary>
        /// Enum SharedResidence for value: SharedResidence
        /// </summary>
        [EnumMember(Value = "SharedResidence")]
        SharedResidence = 5,

        /// <summary>
        /// Enum Death for value: Death
        /// </summary>
        [EnumMember(Value = "Death")]
        Death = 6,

        /// <summary>
        /// Enum FalseIdentity for value: FalseIdentity
        /// </summary>
        [EnumMember(Value = "FalseIdentity")]
        FalseIdentity = 7,

        /// <summary>
        /// Enum FamilyRelation for value: FamilyRelation
        /// </summary>
        [EnumMember(Value = "FamilyRelation")]
        FamilyRelation = 8,

        /// <summary>
        /// Enum Birth for value: Birth
        /// </summary>
        [EnumMember(Value = "Birth")]
        Birth = 9,

        /// <summary>
        /// Enum BirthInNorway for value: BirthInNorway
        /// </summary>
        [EnumMember(Value = "BirthInNorway")]
        BirthInNorway = 10,

        /// <summary>
        /// Enum ParentalResponsibility for value: ParentalResponsibility
        /// </summary>
        [EnumMember(Value = "ParentalResponsibility")]
        ParentalResponsibility = 11,

        /// <summary>
        /// Enum SamiParliamentElectoralRegistryStatus for value: SamiParliamentElectoralRegistryStatus
        /// </summary>
        [EnumMember(Value = "SamiParliamentElectoralRegistryStatus")]
        SamiParliamentElectoralRegistryStatus = 12,

        /// <summary>
        /// Enum NorwegianIdentificationNumber for value: NorwegianIdentificationNumber
        /// </summary>
        [EnumMember(Value = "NorwegianIdentificationNumber")]
        NorwegianIdentificationNumber = 13,

        /// <summary>
        /// Enum IdentityVerification for value: IdentityVerification
        /// </summary>
        [EnumMember(Value = "IdentityVerification")]
        IdentityVerification = 14,

        /// <summary>
        /// Enum ImmigrationToNorway for value: ImmigrationToNorway
        /// </summary>
        [EnumMember(Value = "ImmigrationToNorway")]
        ImmigrationToNorway = 15,

        /// <summary>
        /// Enum Gender for value: Gender
        /// </summary>
        [EnumMember(Value = "Gender")]
        Gender = 16,

        /// <summary>
        /// Enum ResiduaryEstateContactInformation for value: ResiduaryEstateContactInformation
        /// </summary>
        [EnumMember(Value = "ResiduaryEstateContactInformation")]
        ResiduaryEstateContactInformation = 17,

        /// <summary>
        /// Enum IdentificationDocument for value: IdentificationDocument
        /// </summary>
        [EnumMember(Value = "IdentificationDocument")]
        IdentificationDocument = 18,

        /// <summary>
        /// Enum Name for value: Name
        /// </summary>
        [EnumMember(Value = "Name")]
        Name = 19,

        /// <summary>
        /// Enum ResidencePermit for value: ResidencePermit
        /// </summary>
        [EnumMember(Value = "ResidencePermit")]
        ResidencePermit = 20,

        /// <summary>
        /// Enum StayOnSvalbard for value: StayOnSvalbard
        /// </summary>
        [EnumMember(Value = "StayOnSvalbard")]
        StayOnSvalbard = 21,

        /// <summary>
        /// Enum PresentAddress for value: PresentAddress
        /// </summary>
        [EnumMember(Value = "PresentAddress")]
        PresentAddress = 22,

        /// <summary>
        /// Enum PostalAddress for value: PostalAddress
        /// </summary>
        [EnumMember(Value = "PostalAddress")]
        PostalAddress = 23,

        /// <summary>
        /// Enum ForeignPostalAddress for value: ForeignPostalAddress
        /// </summary>
        [EnumMember(Value = "ForeignPostalAddress")]
        ForeignPostalAddress = 24,

        /// <summary>
        /// Enum PreferredContactAddress for value: PreferredContactAddress
        /// </summary>
        [EnumMember(Value = "PreferredContactAddress")]
        PreferredContactAddress = 25,

        /// <summary>
        /// Enum MaritalStatus for value: MaritalStatus
        /// </summary>
        [EnumMember(Value = "MaritalStatus")]
        MaritalStatus = 26,

        /// <summary>
        /// Enum Citizenship for value: Citizenship
        /// </summary>
        [EnumMember(Value = "Citizenship")]
        Citizenship = 27,

        /// <summary>
        /// Enum Status for value: Status
        /// </summary>
        [EnumMember(Value = "Status")]
        Status = 28,

        /// <summary>
        /// Enum ForeignPersonIdentificationNumber for value: ForeignPersonIdentificationNumber
        /// </summary>
        [EnumMember(Value = "ForeignPersonIdentificationNumber")]
        ForeignPersonIdentificationNumber = 29,

        /// <summary>
        /// Enum EmigrationFromNorway for value: EmigrationFromNorway
        /// </summary>
        [EnumMember(Value = "EmigrationFromNorway")]
        EmigrationFromNorway = 30,

        /// <summary>
        /// Enum ImmigrationAuthoritiesIdentificationNumber for value: ImmigrationAuthoritiesIdentificationNumber
        /// </summary>
        [EnumMember(Value = "ImmigrationAuthoritiesIdentificationNumber")]
        ImmigrationAuthoritiesIdentificationNumber = 31,

        /// <summary>
        /// Enum GuardianshipOrFuturePowerOfAttorney for value: GuardianshipOrFuturePowerOfAttorney
        /// </summary>
        [EnumMember(Value = "GuardianshipOrFuturePowerOfAttorney")]
        GuardianshipOrFuturePowerOfAttorney = 32,

        /// <summary>
        /// Enum DeprivedLegalAuthority for value: DeprivedLegalAuthority
        /// </summary>
        [EnumMember(Value = "DeprivedLegalAuthority")]
        DeprivedLegalAuthority = 33

    }

}
