/*
 * Persontjenesten API - ET
 * ## Introduction  The Person API is a copy of the [National Population Register (\"Folkeregisteret\")](https://www.skatteetaten.no/en/person/national-registry/about/) serving the norwegian health sector, maintained by Norsk helsenett. More detailed information on data coming from the National Population Register is also available in Norwegian here: [Information Model](https://skatteetaten.github.io/folkeregisteret-api-dokumentasjon/informasjonsmodell/)  More detailed information about the Person API service, including how to get access, is documented here: [Persontjenesten](https://www.nhn.no/samhandlingsplattform/grunndata/persontjenesten)  ## Disclaimer  The Person API is under continuous development and will be subject to changes without notice. The changes will follow semantic versioning to prevent breaking changes. Legacy versions will be available for 6 months before they are discontinued. We encourage consumers to follow our changelog in order to keep track of any changes. Send feedback and questions to [persontjenesten@nhn.no](mailto:persontjenesten@nhn.no)  ## Changelog  See [Changelog](../static/changelog/index.html)  ## Synthetic test data  Data in our test environment is using synthetic test data coming from the [Synthetic National Register](https://skatteetaten.github.io/testnorge-tenor-dokumentasjon/kilder#syntetisk-folkeregister). To browse the data available, you can log in using ID-porten at [Testnorge](https://testdata.skatteetaten.no/web/testnorge/)  ## Authentication and authorization  This API uses [HelseID](https://www.nhn.no/samhandlingsplattform/helseid) for authentication and authorization. To use the API you will need to have a valid HelseID token with a valid scope.  There are two scopes available to consume resources from the Person API: - **ReadWithLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-with-legal-basis`    This scope provides read access to information in the authorization bundle \"public with legal basis\" (aka statutory authority).    For version 0.5 name was `nhn:hgd-persontjenesten-api/read`  - **ReadNoLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-no-legal-basis`    This scope provides read access to information in the public bundle \"public with**out** legal basis\". 
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sf.nhn.helseid.demo.persontjenesten.api;

import com.google.gson.reflect.TypeToken;
import sf.nhn.helseid.demo.persontjenesten.*;
import sf.nhn.helseid.demo.persontjenesten.model.*;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchWithLegalBasisApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchWithLegalBasisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchWithLegalBasisApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiLegalBasisSearchMatchListPost
     * @param apiVersion The requested API version (required)
     * @param fullName The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)
     * @param givenName The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)
     * @param middleName The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)
     * @param familyName The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)
     * @param streetAddress The street address of the street where the person lives.  Contains of letters, house number, and house letter, up to 200 characters. (optional)
     * @param postalCode The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)
     * @param municipalityNumber The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)
     * @param birthDateFrom Will return persons with a birthday equal or higher than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param birthDateTo Will return persons with a birthday equal or lower than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param gender The person&#39;s gender (optional)
     * @param personStatuses The nature of the relationship/connection  to Norway and the National Population Registry (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search result with a list of person ids </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLegalBasisSearchMatchListPostCall(String apiVersion, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String municipalityNumber, String birthDateFrom, String birthDateTo, Gender gender, List<PersonStatusType> personStatuses, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/legal-basis/search/match-list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fullName != null) {
            localVarFormParams.put("FullName", fullName);
        }

        if (givenName != null) {
            localVarFormParams.put("GivenName", givenName);
        }

        if (middleName != null) {
            localVarFormParams.put("MiddleName", middleName);
        }

        if (familyName != null) {
            localVarFormParams.put("FamilyName", familyName);
        }

        if (streetAddress != null) {
            localVarFormParams.put("StreetAddress", streetAddress);
        }

        if (postalCode != null) {
            localVarFormParams.put("PostalCode", postalCode);
        }

        if (municipalityNumber != null) {
            localVarFormParams.put("MunicipalityNumber", municipalityNumber);
        }

        if (birthDateFrom != null) {
            localVarFormParams.put("BirthDateFrom", birthDateFrom);
        }

        if (birthDateTo != null) {
            localVarFormParams.put("BirthDateTo", birthDateTo);
        }

        if (gender != null) {
            localVarFormParams.put("Gender", gender);
        }

        if (personStatuses != null) {
            localVarFormParams.put("PersonStatuses", personStatuses);
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("api-version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HelseID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiLegalBasisSearchMatchListPostValidateBeforeCall(String apiVersion, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String municipalityNumber, String birthDateFrom, String birthDateTo, Gender gender, List<PersonStatusType> personStatuses, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling apiLegalBasisSearchMatchListPost(Async)");
        }
        

        okhttp3.Call localVarCall = apiLegalBasisSearchMatchListPostCall(apiVersion, fullName, givenName, middleName, familyName, streetAddress, postalCode, municipalityNumber, birthDateFrom, birthDateTo, gender, personStatuses, _callback);
        return localVarCall;

    }

    /**
     * Search for a set of persons based on current information. Returns a search result with unique person ids, see HgdPerson.Out.OpenApi.PersonApi.Model.Person
     * Search for a set of persons based on current information. Returns a search result with unique person ids, see Person&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
     * @param apiVersion The requested API version (required)
     * @param fullName The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)
     * @param givenName The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)
     * @param middleName The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)
     * @param familyName The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)
     * @param streetAddress The street address of the street where the person lives.  Contains of letters, house number, and house letter, up to 200 characters. (optional)
     * @param postalCode The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)
     * @param municipalityNumber The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)
     * @param birthDateFrom Will return persons with a birthday equal or higher than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param birthDateTo Will return persons with a birthday equal or lower than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param gender The person&#39;s gender (optional)
     * @param personStatuses The nature of the relationship/connection  to Norway and the National Population Registry (optional)
     * @return StringSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search result with a list of person ids </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public StringSearchResult apiLegalBasisSearchMatchListPost(String apiVersion, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String municipalityNumber, String birthDateFrom, String birthDateTo, Gender gender, List<PersonStatusType> personStatuses) throws ApiException {
        ApiResponse<StringSearchResult> localVarResp = apiLegalBasisSearchMatchListPostWithHttpInfo(apiVersion, fullName, givenName, middleName, familyName, streetAddress, postalCode, municipalityNumber, birthDateFrom, birthDateTo, gender, personStatuses);
        return localVarResp.getData();
    }

    /**
     * Search for a set of persons based on current information. Returns a search result with unique person ids, see HgdPerson.Out.OpenApi.PersonApi.Model.Person
     * Search for a set of persons based on current information. Returns a search result with unique person ids, see Person&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
     * @param apiVersion The requested API version (required)
     * @param fullName The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)
     * @param givenName The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)
     * @param middleName The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)
     * @param familyName The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)
     * @param streetAddress The street address of the street where the person lives.  Contains of letters, house number, and house letter, up to 200 characters. (optional)
     * @param postalCode The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)
     * @param municipalityNumber The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)
     * @param birthDateFrom Will return persons with a birthday equal or higher than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param birthDateTo Will return persons with a birthday equal or lower than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param gender The person&#39;s gender (optional)
     * @param personStatuses The nature of the relationship/connection  to Norway and the National Population Registry (optional)
     * @return ApiResponse&lt;StringSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search result with a list of person ids </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringSearchResult> apiLegalBasisSearchMatchListPostWithHttpInfo(String apiVersion, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String municipalityNumber, String birthDateFrom, String birthDateTo, Gender gender, List<PersonStatusType> personStatuses) throws ApiException {
        okhttp3.Call localVarCall = apiLegalBasisSearchMatchListPostValidateBeforeCall(apiVersion, fullName, givenName, middleName, familyName, streetAddress, postalCode, municipalityNumber, birthDateFrom, birthDateTo, gender, personStatuses, null);
        Type localVarReturnType = new TypeToken<StringSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for a set of persons based on current information. Returns a search result with unique person ids, see HgdPerson.Out.OpenApi.PersonApi.Model.Person (asynchronously)
     * Search for a set of persons based on current information. Returns a search result with unique person ids, see Person&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
     * @param apiVersion The requested API version (required)
     * @param fullName The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)
     * @param givenName The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)
     * @param middleName The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)
     * @param familyName The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)
     * @param streetAddress The street address of the street where the person lives.  Contains of letters, house number, and house letter, up to 200 characters. (optional)
     * @param postalCode The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)
     * @param municipalityNumber The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)
     * @param birthDateFrom Will return persons with a birthday equal or higher than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param birthDateTo Will return persons with a birthday equal or lower than the given value.  The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param gender The person&#39;s gender (optional)
     * @param personStatuses The nature of the relationship/connection  to Norway and the National Population Registry (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search result with a list of person ids </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLegalBasisSearchMatchListPostAsync(String apiVersion, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String municipalityNumber, String birthDateFrom, String birthDateTo, Gender gender, List<PersonStatusType> personStatuses, final ApiCallback<StringSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiLegalBasisSearchMatchListPostValidateBeforeCall(apiVersion, fullName, givenName, middleName, familyName, streetAddress, postalCode, municipalityNumber, birthDateFrom, birthDateTo, gender, personStatuses, _callback);
        Type localVarReturnType = new TypeToken<StringSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiLegalBasisSearchPersonPost
     * @param informationParts Which information parts that should be included in the result (required)
     * @param apiVersion The requested API version (required)
     * @param includeHistory Flag to indicate if response should include historic information, defaults to false (optional, default to false)
     * @param birthDate The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param gender The person&#39;s gender (optional)
     * @param fullName The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)
     * @param givenName The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)
     * @param middleName The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)
     * @param familyName The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)
     * @param streetAddress The street address of the street where the person lives.  Contains of letters, housenumber, and houseletter, up to 200 characters. (optional)
     * @param postalCode The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)
     * @param cityName The city name (poststed) of the city the person lives in.  Only letters allowed, up to 100 characters (optional)
     * @param municipalityNumber The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search result with a list of person documents </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLegalBasisSearchPersonPostCall(List<InformationPart> informationParts, String apiVersion, Boolean includeHistory, String birthDate, Gender gender, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String cityName, String municipalityNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/legal-basis/search/person";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (birthDate != null) {
            localVarFormParams.put("BirthDate", birthDate);
        }

        if (gender != null) {
            localVarFormParams.put("Gender", gender);
        }

        if (fullName != null) {
            localVarFormParams.put("FullName", fullName);
        }

        if (givenName != null) {
            localVarFormParams.put("GivenName", givenName);
        }

        if (middleName != null) {
            localVarFormParams.put("MiddleName", middleName);
        }

        if (familyName != null) {
            localVarFormParams.put("FamilyName", familyName);
        }

        if (streetAddress != null) {
            localVarFormParams.put("StreetAddress", streetAddress);
        }

        if (postalCode != null) {
            localVarFormParams.put("PostalCode", postalCode);
        }

        if (cityName != null) {
            localVarFormParams.put("CityName", cityName);
        }

        if (municipalityNumber != null) {
            localVarFormParams.put("MunicipalityNumber", municipalityNumber);
        }

        if (informationParts != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "informationParts", informationParts));
        }

        if (includeHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeHistory", includeHistory));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("api-version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HelseID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiLegalBasisSearchPersonPostValidateBeforeCall(List<InformationPart> informationParts, String apiVersion, Boolean includeHistory, String birthDate, Gender gender, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String cityName, String municipalityNumber, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'informationParts' is set
        if (informationParts == null) {
            throw new ApiException("Missing the required parameter 'informationParts' when calling apiLegalBasisSearchPersonPost(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling apiLegalBasisSearchPersonPost(Async)");
        }
        

        okhttp3.Call localVarCall = apiLegalBasisSearchPersonPostCall(informationParts, apiVersion, includeHistory, birthDate, gender, fullName, givenName, middleName, familyName, streetAddress, postalCode, cityName, municipalityNumber, _callback);
        return localVarCall;

    }

    /**
     * Search for a limited set of persons based on current information. Returns a search result with max 100 person documents.
     * Search parameters will match current information, historic information will not be searchable.  For addresses, it&#39;s possible to search for norwegian residential, present and shared residence addresses.                Search parameters have the following requirements:  &lt;br&gt;1. A value for either FirstName, MiddleName, LastName or FullName&lt;br&gt;2. Combined across all names, there must be at least three letters in total (whitespace is not counted)&lt;br&gt;3. DateOfBirth OR MunicipalityNumber with at least 4 digits OR StreetName with at least three letters (whitespace is not counted)&lt;br&gt;Some search parameters are also validated individually, see the search parameter description for more details.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
     * @param informationParts Which information parts that should be included in the result (required)
     * @param apiVersion The requested API version (required)
     * @param includeHistory Flag to indicate if response should include historic information, defaults to false (optional, default to false)
     * @param birthDate The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param gender The person&#39;s gender (optional)
     * @param fullName The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)
     * @param givenName The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)
     * @param middleName The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)
     * @param familyName The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)
     * @param streetAddress The street address of the street where the person lives.  Contains of letters, housenumber, and houseletter, up to 200 characters. (optional)
     * @param postalCode The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)
     * @param cityName The city name (poststed) of the city the person lives in.  Only letters allowed, up to 100 characters (optional)
     * @param municipalityNumber The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)
     * @return PersonSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search result with a list of person documents </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public PersonSearchResult apiLegalBasisSearchPersonPost(List<InformationPart> informationParts, String apiVersion, Boolean includeHistory, String birthDate, Gender gender, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String cityName, String municipalityNumber) throws ApiException {
        ApiResponse<PersonSearchResult> localVarResp = apiLegalBasisSearchPersonPostWithHttpInfo(informationParts, apiVersion, includeHistory, birthDate, gender, fullName, givenName, middleName, familyName, streetAddress, postalCode, cityName, municipalityNumber);
        return localVarResp.getData();
    }

    /**
     * Search for a limited set of persons based on current information. Returns a search result with max 100 person documents.
     * Search parameters will match current information, historic information will not be searchable.  For addresses, it&#39;s possible to search for norwegian residential, present and shared residence addresses.                Search parameters have the following requirements:  &lt;br&gt;1. A value for either FirstName, MiddleName, LastName or FullName&lt;br&gt;2. Combined across all names, there must be at least three letters in total (whitespace is not counted)&lt;br&gt;3. DateOfBirth OR MunicipalityNumber with at least 4 digits OR StreetName with at least three letters (whitespace is not counted)&lt;br&gt;Some search parameters are also validated individually, see the search parameter description for more details.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
     * @param informationParts Which information parts that should be included in the result (required)
     * @param apiVersion The requested API version (required)
     * @param includeHistory Flag to indicate if response should include historic information, defaults to false (optional, default to false)
     * @param birthDate The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param gender The person&#39;s gender (optional)
     * @param fullName The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)
     * @param givenName The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)
     * @param middleName The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)
     * @param familyName The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)
     * @param streetAddress The street address of the street where the person lives.  Contains of letters, housenumber, and houseletter, up to 200 characters. (optional)
     * @param postalCode The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)
     * @param cityName The city name (poststed) of the city the person lives in.  Only letters allowed, up to 100 characters (optional)
     * @param municipalityNumber The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)
     * @return ApiResponse&lt;PersonSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search result with a list of person documents </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonSearchResult> apiLegalBasisSearchPersonPostWithHttpInfo(List<InformationPart> informationParts, String apiVersion, Boolean includeHistory, String birthDate, Gender gender, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String cityName, String municipalityNumber) throws ApiException {
        okhttp3.Call localVarCall = apiLegalBasisSearchPersonPostValidateBeforeCall(informationParts, apiVersion, includeHistory, birthDate, gender, fullName, givenName, middleName, familyName, streetAddress, postalCode, cityName, municipalityNumber, null);
        Type localVarReturnType = new TypeToken<PersonSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for a limited set of persons based on current information. Returns a search result with max 100 person documents. (asynchronously)
     * Search parameters will match current information, historic information will not be searchable.  For addresses, it&#39;s possible to search for norwegian residential, present and shared residence addresses.                Search parameters have the following requirements:  &lt;br&gt;1. A value for either FirstName, MiddleName, LastName or FullName&lt;br&gt;2. Combined across all names, there must be at least three letters in total (whitespace is not counted)&lt;br&gt;3. DateOfBirth OR MunicipalityNumber with at least 4 digits OR StreetName with at least three letters (whitespace is not counted)&lt;br&gt;Some search parameters are also validated individually, see the search parameter description for more details.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
     * @param informationParts Which information parts that should be included in the result (required)
     * @param apiVersion The requested API version (required)
     * @param includeHistory Flag to indicate if response should include historic information, defaults to false (optional, default to false)
     * @param birthDate The person&#39;s date of birth provided as a string, formatted as YYYY-MM-DD.  Searching only by year (YYYY) or year and month (YYYY-MM) is also allowed. (optional)
     * @param gender The person&#39;s gender (optional)
     * @param fullName The whole or parts of a person&#39;s full name. Only letters are allowed, up to 600 characters.  The search string will be divided into separate search words, and these words can match  the start of any part of the person&#39;s full name, regardless of the order of search words.  Only the first three search words will be used. (optional)
     * @param givenName The whole or the first part of a person&#39;s given name.  Only letters are allowed, up to 200 characters. (optional)
     * @param middleName The whole or first part of a person&#39;s middle name.  Only letters are allowed, up to 200 characters. (optional)
     * @param familyName The whole or first part of a person&#39;s family name.  Only letters are allowed, up to 200 characters. (optional)
     * @param streetAddress The street address of the street where the person lives.  Contains of letters, housenumber, and houseletter, up to 200 characters. (optional)
     * @param postalCode The postal code (postnummer) number where the person lives.  If provided, needs to be exactly four digits. (optional)
     * @param cityName The city name (poststed) of the city the person lives in.  Only letters allowed, up to 100 characters (optional)
     * @param municipalityNumber The municipality number of the municipality the person lives in.  If provided, needs to be exactly four digits. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search result with a list of person documents </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLegalBasisSearchPersonPostAsync(List<InformationPart> informationParts, String apiVersion, Boolean includeHistory, String birthDate, Gender gender, String fullName, String givenName, String middleName, String familyName, String streetAddress, String postalCode, String cityName, String municipalityNumber, final ApiCallback<PersonSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiLegalBasisSearchPersonPostValidateBeforeCall(informationParts, apiVersion, includeHistory, birthDate, gender, fullName, givenName, middleName, familyName, streetAddress, postalCode, cityName, municipalityNumber, _callback);
        Type localVarReturnType = new TypeToken<PersonSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
