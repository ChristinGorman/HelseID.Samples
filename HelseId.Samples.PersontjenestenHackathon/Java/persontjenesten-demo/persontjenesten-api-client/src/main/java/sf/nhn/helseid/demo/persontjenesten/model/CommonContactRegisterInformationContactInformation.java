/*
 * Persontjenesten API - ET
 * ## Introduction  The Person API is a copy of the [National Population Register (\"Folkeregisteret\")](https://www.skatteetaten.no/en/person/national-registry/about/) serving the norwegian health sector, maintained by Norsk helsenett. More detailed information on data coming from the National Population Register is also available in Norwegian here: [Information Model](https://skatteetaten.github.io/folkeregisteret-api-dokumentasjon/informasjonsmodell/)  More detailed information about the Person API service, including how to get access, is documented here: [Persontjenesten](https://www.nhn.no/samhandlingsplattform/grunndata/persontjenesten)  ## Disclaimer  The Person API is under continuous development and will be subject to changes without notice. The changes will follow semantic versioning to prevent breaking changes. Legacy versions will be available for 6 months before they are discontinued. We encourage consumers to follow our changelog in order to keep track of any changes. Send feedback and questions to [persontjenesten@nhn.no](mailto:persontjenesten@nhn.no)  ## Changelog  See [Changelog](../static/changelog/index.html)  ## Synthetic test data  Data in our test environment is using synthetic test data coming from the [Synthetic National Register](https://skatteetaten.github.io/testnorge-tenor-dokumentasjon/kilder#syntetisk-folkeregister). To browse the data available, you can log in using ID-porten at [Testnorge](https://testdata.skatteetaten.no/web/testnorge/)  ## Authentication and authorization  This API uses [HelseID](https://www.nhn.no/samhandlingsplattform/helseid) for authentication and authorization. To use the API you will need to have a valid HelseID token with a valid scope.  There are two scopes available to consume resources from the Person API: - **ReadWithLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-with-legal-basis`    This scope provides read access to information in the authorization bundle \"public with legal basis\" (aka statutory authority).    For version 0.5 name was `nhn:hgd-persontjenesten-api/read`  - **ReadNoLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-no-legal-basis`    This scope provides read access to information in the public bundle \"public with**out** legal basis\". 
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sf.nhn.helseid.demo.persontjenesten.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import sf.nhn.helseid.demo.persontjenesten.JSON;

import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * &lt;br&gt;KRR: kontaktinformasjon              Contact information for a person
 */
@ApiModel(description = "<br>KRR: kontaktinformasjon              Contact information for a person")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-21T11:48:55.741350900+02:00[Europe/Oslo]")
public class CommonContactRegisterInformationContactInformation {
  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EMAIL_LAST_UPDATED = "emailLastUpdated";
  @SerializedName(SERIALIZED_NAME_EMAIL_LAST_UPDATED)
  private String emailLastUpdated;

  public static final String SERIALIZED_NAME_EMAIL_LAST_VERIFIED = "emailLastVerified";
  @SerializedName(SERIALIZED_NAME_EMAIL_LAST_VERIFIED)
  private String emailLastVerified;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_PHONE_NUMBER_LAST_UPDATED = "phoneNumberLastUpdated";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_LAST_UPDATED)
  private String phoneNumberLastUpdated;

  public static final String SERIALIZED_NAME_PHONE_NUMBER_LAST_VERIFIED = "phoneNumberLastVerified";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_LAST_VERIFIED)
  private String phoneNumberLastVerified;

  public CommonContactRegisterInformationContactInformation() {
  }

  public CommonContactRegisterInformationContactInformation email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * &lt;br&gt;KRR: epostadresse              The Email a person has registered in KRR
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "01012295312_test@minid.difi.no", value = "<br>KRR: epostadresse              The Email a person has registered in KRR")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public CommonContactRegisterInformationContactInformation emailLastUpdated(String emailLastUpdated) {
    
    this.emailLastUpdated = emailLastUpdated;
    return this;
  }

   /**
   * &lt;br&gt;KRR: epostadresse_oppdatert              Last time The Email was updated by person. New or changed email address. Date can be more than 18 months back in time
   * @return emailLastUpdated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2016-08-05T10:45:15.768Z", value = "<br>KRR: epostadresse_oppdatert              Last time The Email was updated by person. New or changed email address. Date can be more than 18 months back in time")

  public String getEmailLastUpdated() {
    return emailLastUpdated;
  }


  public void setEmailLastUpdated(String emailLastUpdated) {
    this.emailLastUpdated = emailLastUpdated;
  }


  public CommonContactRegisterInformationContactInformation emailLastVerified(String emailLastVerified) {
    
    this.emailLastVerified = emailLastVerified;
    return this;
  }

   /**
   * &lt;br&gt;KRR: epostadresse_sist_verifisert              Last time email was verified by person. Confirmed by person at least twice a year
   * @return emailLastVerified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-08-05T10:45:15.768Z", value = "<br>KRR: epostadresse_sist_verifisert              Last time email was verified by person. Confirmed by person at least twice a year")

  public String getEmailLastVerified() {
    return emailLastVerified;
  }


  public void setEmailLastVerified(String emailLastVerified) {
    this.emailLastVerified = emailLastVerified;
  }


  public CommonContactRegisterInformationContactInformation phoneNumber(String phoneNumber) {
    
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * &lt;br&gt;KRR: mobiltelefonnummer              The Phone number the person has registered in KRR
   * @return phoneNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>KRR: mobiltelefonnummer              The Phone number the person has registered in KRR")

  public String getPhoneNumber() {
    return phoneNumber;
  }


  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public CommonContactRegisterInformationContactInformation phoneNumberLastUpdated(String phoneNumberLastUpdated) {
    
    this.phoneNumberLastUpdated = phoneNumberLastUpdated;
    return this;
  }

   /**
   * &lt;br&gt;KRR: mobiltelefonnummer_oppdatert              Last time The Phone number was updated by person. New or changed phone number. Date can be more than 18 months back in time
   * @return phoneNumberLastUpdated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2016-08-05T10:45:15.768Z", value = "<br>KRR: mobiltelefonnummer_oppdatert              Last time The Phone number was updated by person. New or changed phone number. Date can be more than 18 months back in time")

  public String getPhoneNumberLastUpdated() {
    return phoneNumberLastUpdated;
  }


  public void setPhoneNumberLastUpdated(String phoneNumberLastUpdated) {
    this.phoneNumberLastUpdated = phoneNumberLastUpdated;
  }


  public CommonContactRegisterInformationContactInformation phoneNumberLastVerified(String phoneNumberLastVerified) {
    
    this.phoneNumberLastVerified = phoneNumberLastVerified;
    return this;
  }

   /**
   * &lt;br&gt;KRR: mobiltelefonnummer_sist_verifisert              Last time the Phone number was verified by person. Confirmed by person at least twice a year
   * @return phoneNumberLastVerified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-08-05T10:45:15.768Z", value = "<br>KRR: mobiltelefonnummer_sist_verifisert              Last time the Phone number was verified by person. Confirmed by person at least twice a year")

  public String getPhoneNumberLastVerified() {
    return phoneNumberLastVerified;
  }


  public void setPhoneNumberLastVerified(String phoneNumberLastVerified) {
    this.phoneNumberLastVerified = phoneNumberLastVerified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommonContactRegisterInformationContactInformation commonContactRegisterInformationContactInformation = (CommonContactRegisterInformationContactInformation) o;
    return Objects.equals(this.email, commonContactRegisterInformationContactInformation.email) &&
        Objects.equals(this.emailLastUpdated, commonContactRegisterInformationContactInformation.emailLastUpdated) &&
        Objects.equals(this.emailLastVerified, commonContactRegisterInformationContactInformation.emailLastVerified) &&
        Objects.equals(this.phoneNumber, commonContactRegisterInformationContactInformation.phoneNumber) &&
        Objects.equals(this.phoneNumberLastUpdated, commonContactRegisterInformationContactInformation.phoneNumberLastUpdated) &&
        Objects.equals(this.phoneNumberLastVerified, commonContactRegisterInformationContactInformation.phoneNumberLastVerified);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, emailLastUpdated, emailLastVerified, phoneNumber, phoneNumberLastUpdated, phoneNumberLastVerified);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommonContactRegisterInformationContactInformation {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    emailLastUpdated: ").append(toIndentedString(emailLastUpdated)).append("\n");
    sb.append("    emailLastVerified: ").append(toIndentedString(emailLastVerified)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    phoneNumberLastUpdated: ").append(toIndentedString(phoneNumberLastUpdated)).append("\n");
    sb.append("    phoneNumberLastVerified: ").append(toIndentedString(phoneNumberLastVerified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("emailLastUpdated");
    openapiFields.add("emailLastVerified");
    openapiFields.add("phoneNumber");
    openapiFields.add("phoneNumberLastUpdated");
    openapiFields.add("phoneNumberLastVerified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CommonContactRegisterInformationContactInformation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CommonContactRegisterInformationContactInformation.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommonContactRegisterInformationContactInformation is not found in the empty JSON string", CommonContactRegisterInformationContactInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CommonContactRegisterInformationContactInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommonContactRegisterInformationContactInformation` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("emailLastUpdated") != null && !jsonObj.get("emailLastUpdated").isJsonNull()) && !jsonObj.get("emailLastUpdated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailLastUpdated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailLastUpdated").toString()));
      }
      if ((jsonObj.get("emailLastVerified") != null && !jsonObj.get("emailLastVerified").isJsonNull()) && !jsonObj.get("emailLastVerified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailLastVerified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailLastVerified").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("phoneNumberLastUpdated") != null && !jsonObj.get("phoneNumberLastUpdated").isJsonNull()) && !jsonObj.get("phoneNumberLastUpdated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumberLastUpdated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumberLastUpdated").toString()));
      }
      if ((jsonObj.get("phoneNumberLastVerified") != null && !jsonObj.get("phoneNumberLastVerified").isJsonNull()) && !jsonObj.get("phoneNumberLastVerified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumberLastVerified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumberLastVerified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommonContactRegisterInformationContactInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommonContactRegisterInformationContactInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommonContactRegisterInformationContactInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommonContactRegisterInformationContactInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<CommonContactRegisterInformationContactInformation>() {
           @Override
           public void write(JsonWriter out, CommonContactRegisterInformationContactInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommonContactRegisterInformationContactInformation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CommonContactRegisterInformationContactInformation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CommonContactRegisterInformationContactInformation
  * @throws IOException if the JSON string is invalid with respect to CommonContactRegisterInformationContactInformation
  */
  public static CommonContactRegisterInformationContactInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommonContactRegisterInformationContactInformation.class);
  }

 /**
  * Convert an instance of CommonContactRegisterInformationContactInformation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

