/*
 * Persontjenesten API - ET
 * ## Introduction  The Person API is a copy of the [National Population Register (\"Folkeregisteret\")](https://www.skatteetaten.no/en/person/national-registry/about/) serving the norwegian health sector, maintained by Norsk helsenett. More detailed information on data coming from the National Population Register is also available in Norwegian here: [Information Model](https://skatteetaten.github.io/folkeregisteret-api-dokumentasjon/informasjonsmodell/)  More detailed information about the Person API service, including how to get access, is documented here: [Persontjenesten](https://www.nhn.no/samhandlingsplattform/grunndata/persontjenesten)  ## Disclaimer  The Person API is under continuous development and will be subject to changes without notice. The changes will follow semantic versioning to prevent breaking changes. Legacy versions will be available for 6 months before they are discontinued. We encourage consumers to follow our changelog in order to keep track of any changes. Send feedback and questions to [persontjenesten@nhn.no](mailto:persontjenesten@nhn.no)  ## Changelog  See [Changelog](../static/changelog/index.html)  ## Synthetic test data  Data in our test environment is using synthetic test data coming from the [Synthetic National Register](https://skatteetaten.github.io/testnorge-tenor-dokumentasjon/kilder#syntetisk-folkeregister). To browse the data available, you can log in using ID-porten at [Testnorge](https://testdata.skatteetaten.no/web/testnorge/)  ## Authentication and authorization  This API uses [HelseID](https://www.nhn.no/samhandlingsplattform/helseid) for authentication and authorization. To use the API you will need to have a valid HelseID token with a valid scope.  There are two scopes available to consume resources from the Person API: - **ReadWithLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-with-legal-basis`    This scope provides read access to information in the authorization bundle \"public with legal basis\" (aka statutory authority).    For version 0.5 name was `nhn:hgd-persontjenesten-api/read`  - **ReadNoLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-no-legal-basis`    This scope provides read access to information in the public bundle \"public with**out** legal basis\". 
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sf.nhn.helseid.demo.persontjenesten.api;

import com.google.gson.reflect.TypeToken;
import sf.nhn.helseid.demo.persontjenesten.*;
import sf.nhn.helseid.demo.persontjenesten.model.InformationPart;
import sf.nhn.helseid.demo.persontjenesten.model.Person;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PersonWithLegalBasisApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PersonWithLegalBasisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PersonWithLegalBasisApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiLegalBasisPersonBulkByIdPost
     * @param informationParts Which information parts that should be included in the result (required)
     * @param apiVersion The requested API version (required)
     * @param personIds  (required)
     * @param includeHistory Flag to indicate if response should include historic information, defaults to false (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Person documents returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLegalBasisPersonBulkByIdPostCall(List<InformationPart> informationParts, String apiVersion, List<String> personIds, Boolean includeHistory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/legal-basis/person/bulk-by-id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (personIds != null) {
            localVarFormParams.put("personIds", personIds);
        }

        if (informationParts != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "informationParts", informationParts));
        }

        if (includeHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeHistory", includeHistory));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("api-version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HelseID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiLegalBasisPersonBulkByIdPostValidateBeforeCall(List<InformationPart> informationParts, String apiVersion, List<String> personIds, Boolean includeHistory, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'informationParts' is set
        if (informationParts == null) {
            throw new ApiException("Missing the required parameter 'informationParts' when calling apiLegalBasisPersonBulkByIdPost(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling apiLegalBasisPersonBulkByIdPost(Async)");
        }
        
        // verify the required parameter 'personIds' is set
        if (personIds == null) {
            throw new ApiException("Missing the required parameter 'personIds' when calling apiLegalBasisPersonBulkByIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = apiLegalBasisPersonBulkByIdPostCall(informationParts, apiVersion, personIds, includeHistory, _callback);
        return localVarCall;

    }

    /**
     * Get multiple persons from a list of unique person id.
     * Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
     * @param informationParts Which information parts that should be included in the result (required)
     * @param apiVersion The requested API version (required)
     * @param personIds  (required)
     * @param includeHistory Flag to indicate if response should include historic information, defaults to false (optional, default to false)
     * @return List&lt;Person&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Person documents returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public List<Person> apiLegalBasisPersonBulkByIdPost(List<InformationPart> informationParts, String apiVersion, List<String> personIds, Boolean includeHistory) throws ApiException {
        ApiResponse<List<Person>> localVarResp = apiLegalBasisPersonBulkByIdPostWithHttpInfo(informationParts, apiVersion, personIds, includeHistory);
        return localVarResp.getData();
    }

    /**
     * Get multiple persons from a list of unique person id.
     * Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
     * @param informationParts Which information parts that should be included in the result (required)
     * @param apiVersion The requested API version (required)
     * @param personIds  (required)
     * @param includeHistory Flag to indicate if response should include historic information, defaults to false (optional, default to false)
     * @return ApiResponse&lt;List&lt;Person&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Person documents returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Person>> apiLegalBasisPersonBulkByIdPostWithHttpInfo(List<InformationPart> informationParts, String apiVersion, List<String> personIds, Boolean includeHistory) throws ApiException {
        okhttp3.Call localVarCall = apiLegalBasisPersonBulkByIdPostValidateBeforeCall(informationParts, apiVersion, personIds, includeHistory, null);
        Type localVarReturnType = new TypeToken<List<Person>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get multiple persons from a list of unique person id. (asynchronously)
     * Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
     * @param informationParts Which information parts that should be included in the result (required)
     * @param apiVersion The requested API version (required)
     * @param personIds  (required)
     * @param includeHistory Flag to indicate if response should include historic information, defaults to false (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Person documents returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLegalBasisPersonBulkByIdPostAsync(List<InformationPart> informationParts, String apiVersion, List<String> personIds, Boolean includeHistory, final ApiCallback<List<Person>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiLegalBasisPersonBulkByIdPostValidateBeforeCall(informationParts, apiVersion, personIds, includeHistory, _callback);
        Type localVarReturnType = new TypeToken<List<Person>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiLegalBasisPersonBulkByNinPost
     * @param informationParts Which information parts that should be included in the result (required)
     * @param apiVersion The requested API version (required)
     * @param nins  (required)
     * @param includeHistory Flag to indicate if response should include historic information, defaults to false (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Person documents returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLegalBasisPersonBulkByNinPostCall(List<InformationPart> informationParts, String apiVersion, List<String> nins, Boolean includeHistory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/legal-basis/person/bulk-by-nin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nins != null) {
            localVarFormParams.put("nins", nins);
        }

        if (informationParts != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "informationParts", informationParts));
        }

        if (includeHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeHistory", includeHistory));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("api-version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HelseID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiLegalBasisPersonBulkByNinPostValidateBeforeCall(List<InformationPart> informationParts, String apiVersion, List<String> nins, Boolean includeHistory, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'informationParts' is set
        if (informationParts == null) {
            throw new ApiException("Missing the required parameter 'informationParts' when calling apiLegalBasisPersonBulkByNinPost(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling apiLegalBasisPersonBulkByNinPost(Async)");
        }
        
        // verify the required parameter 'nins' is set
        if (nins == null) {
            throw new ApiException("Missing the required parameter 'nins' when calling apiLegalBasisPersonBulkByNinPost(Async)");
        }
        

        okhttp3.Call localVarCall = apiLegalBasisPersonBulkByNinPostCall(informationParts, apiVersion, nins, includeHistory, _callback);
        return localVarCall;

    }

    /**
     * Get multiple persons from a list of Norwegian Identification Numbers.
     * Norwegian Identification Number includes national identity numbers (fødselsnummer) and D-numbers (D-nummer).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
     * @param informationParts Which information parts that should be included in the result (required)
     * @param apiVersion The requested API version (required)
     * @param nins  (required)
     * @param includeHistory Flag to indicate if response should include historic information, defaults to false (optional, default to false)
     * @return List&lt;Person&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Person documents returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public List<Person> apiLegalBasisPersonBulkByNinPost(List<InformationPart> informationParts, String apiVersion, List<String> nins, Boolean includeHistory) throws ApiException {
        ApiResponse<List<Person>> localVarResp = apiLegalBasisPersonBulkByNinPostWithHttpInfo(informationParts, apiVersion, nins, includeHistory);
        return localVarResp.getData();
    }

    /**
     * Get multiple persons from a list of Norwegian Identification Numbers.
     * Norwegian Identification Number includes national identity numbers (fødselsnummer) and D-numbers (D-nummer).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
     * @param informationParts Which information parts that should be included in the result (required)
     * @param apiVersion The requested API version (required)
     * @param nins  (required)
     * @param includeHistory Flag to indicate if response should include historic information, defaults to false (optional, default to false)
     * @return ApiResponse&lt;List&lt;Person&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Person documents returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Person>> apiLegalBasisPersonBulkByNinPostWithHttpInfo(List<InformationPart> informationParts, String apiVersion, List<String> nins, Boolean includeHistory) throws ApiException {
        okhttp3.Call localVarCall = apiLegalBasisPersonBulkByNinPostValidateBeforeCall(informationParts, apiVersion, nins, includeHistory, null);
        Type localVarReturnType = new TypeToken<List<Person>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get multiple persons from a list of Norwegian Identification Numbers. (asynchronously)
     * Norwegian Identification Number includes national identity numbers (fødselsnummer) and D-numbers (D-nummer).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
     * @param informationParts Which information parts that should be included in the result (required)
     * @param apiVersion The requested API version (required)
     * @param nins  (required)
     * @param includeHistory Flag to indicate if response should include historic information, defaults to false (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Person documents returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLegalBasisPersonBulkByNinPostAsync(List<InformationPart> informationParts, String apiVersion, List<String> nins, Boolean includeHistory, final ApiCallback<List<Person>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiLegalBasisPersonBulkByNinPostValidateBeforeCall(informationParts, apiVersion, nins, includeHistory, _callback);
        Type localVarReturnType = new TypeToken<List<Person>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiLegalBasisPersonGetByNinPost
     * @param informationParts Which information parts that should be included in the result (required)
     * @param apiVersion The requested API version (required)
     * @param nin  (required)
     * @param includeHistory Flag to indicate if response should include historic information, defaults to false (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Person returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLegalBasisPersonGetByNinPostCall(List<InformationPart> informationParts, String apiVersion, String nin, Boolean includeHistory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/legal-basis/person/get-by-nin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nin != null) {
            localVarFormParams.put("nin", nin);
        }

        if (informationParts != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "informationParts", informationParts));
        }

        if (includeHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeHistory", includeHistory));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("api-version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HelseID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiLegalBasisPersonGetByNinPostValidateBeforeCall(List<InformationPart> informationParts, String apiVersion, String nin, Boolean includeHistory, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'informationParts' is set
        if (informationParts == null) {
            throw new ApiException("Missing the required parameter 'informationParts' when calling apiLegalBasisPersonGetByNinPost(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling apiLegalBasisPersonGetByNinPost(Async)");
        }
        
        // verify the required parameter 'nin' is set
        if (nin == null) {
            throw new ApiException("Missing the required parameter 'nin' when calling apiLegalBasisPersonGetByNinPost(Async)");
        }
        

        okhttp3.Call localVarCall = apiLegalBasisPersonGetByNinPostCall(informationParts, apiVersion, nin, includeHistory, _callback);
        return localVarCall;

    }

    /**
     * Get a specific Person by Norwegian Identification Number
     * Get a person from a Norwegian Identification Number. This includes national identity numbers (fødselsnummer) and D-numbers (D-nummer).  Historic NINs are supported. H-number (hjelpenummer) is currently not supported.  This is a POST request to avoid including NIN as part of the URL.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
     * @param informationParts Which information parts that should be included in the result (required)
     * @param apiVersion The requested API version (required)
     * @param nin  (required)
     * @param includeHistory Flag to indicate if response should include historic information, defaults to false (optional, default to false)
     * @return Person
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Person returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public Person apiLegalBasisPersonGetByNinPost(List<InformationPart> informationParts, String apiVersion, String nin, Boolean includeHistory) throws ApiException {
        ApiResponse<Person> localVarResp = apiLegalBasisPersonGetByNinPostWithHttpInfo(informationParts, apiVersion, nin, includeHistory);
        return localVarResp.getData();
    }

    /**
     * Get a specific Person by Norwegian Identification Number
     * Get a person from a Norwegian Identification Number. This includes national identity numbers (fødselsnummer) and D-numbers (D-nummer).  Historic NINs are supported. H-number (hjelpenummer) is currently not supported.  This is a POST request to avoid including NIN as part of the URL.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
     * @param informationParts Which information parts that should be included in the result (required)
     * @param apiVersion The requested API version (required)
     * @param nin  (required)
     * @param includeHistory Flag to indicate if response should include historic information, defaults to false (optional, default to false)
     * @return ApiResponse&lt;Person&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Person returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Person> apiLegalBasisPersonGetByNinPostWithHttpInfo(List<InformationPart> informationParts, String apiVersion, String nin, Boolean includeHistory) throws ApiException {
        okhttp3.Call localVarCall = apiLegalBasisPersonGetByNinPostValidateBeforeCall(informationParts, apiVersion, nin, includeHistory, null);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific Person by Norwegian Identification Number (asynchronously)
     * Get a person from a Norwegian Identification Number. This includes national identity numbers (fødselsnummer) and D-numbers (D-nummer).  Historic NINs are supported. H-number (hjelpenummer) is currently not supported.  This is a POST request to avoid including NIN as part of the URL.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
     * @param informationParts Which information parts that should be included in the result (required)
     * @param apiVersion The requested API version (required)
     * @param nin  (required)
     * @param includeHistory Flag to indicate if response should include historic information, defaults to false (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Person returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLegalBasisPersonGetByNinPostAsync(List<InformationPart> informationParts, String apiVersion, String nin, Boolean includeHistory, final ApiCallback<Person> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiLegalBasisPersonGetByNinPostValidateBeforeCall(informationParts, apiVersion, nin, includeHistory, _callback);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiLegalBasisPersonIdGet
     * @param id The Person id (required)
     * @param informationParts Which information parts that should be included in the result (required)
     * @param apiVersion The requested API version (required)
     * @param includeHistory Flag to indicate if response should include historic information, defaults to false (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Person returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLegalBasisPersonIdGetCall(String id, List<InformationPart> informationParts, String apiVersion, Boolean includeHistory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/legal-basis/person/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (informationParts != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "informationParts", informationParts));
        }

        if (includeHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeHistory", includeHistory));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("api-version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HelseID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiLegalBasisPersonIdGetValidateBeforeCall(String id, List<InformationPart> informationParts, String apiVersion, Boolean includeHistory, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiLegalBasisPersonIdGet(Async)");
        }
        
        // verify the required parameter 'informationParts' is set
        if (informationParts == null) {
            throw new ApiException("Missing the required parameter 'informationParts' when calling apiLegalBasisPersonIdGet(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling apiLegalBasisPersonIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = apiLegalBasisPersonIdGetCall(id, informationParts, apiVersion, includeHistory, _callback);
        return localVarCall;

    }

    /**
     * Get a specific person by unique id
     * Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
     * @param id The Person id (required)
     * @param informationParts Which information parts that should be included in the result (required)
     * @param apiVersion The requested API version (required)
     * @param includeHistory Flag to indicate if response should include historic information, defaults to false (optional, default to false)
     * @return Person
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Person returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public Person apiLegalBasisPersonIdGet(String id, List<InformationPart> informationParts, String apiVersion, Boolean includeHistory) throws ApiException {
        ApiResponse<Person> localVarResp = apiLegalBasisPersonIdGetWithHttpInfo(id, informationParts, apiVersion, includeHistory);
        return localVarResp.getData();
    }

    /**
     * Get a specific person by unique id
     * Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
     * @param id The Person id (required)
     * @param informationParts Which information parts that should be included in the result (required)
     * @param apiVersion The requested API version (required)
     * @param includeHistory Flag to indicate if response should include historic information, defaults to false (optional, default to false)
     * @return ApiResponse&lt;Person&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Person returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Person> apiLegalBasisPersonIdGetWithHttpInfo(String id, List<InformationPart> informationParts, String apiVersion, Boolean includeHistory) throws ApiException {
        okhttp3.Call localVarCall = apiLegalBasisPersonIdGetValidateBeforeCall(id, informationParts, apiVersion, includeHistory, null);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific person by unique id (asynchronously)
     * Does not support nin&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadWithLegalBasis
     * @param id The Person id (required)
     * @param informationParts Which information parts that should be included in the result (required)
     * @param apiVersion The requested API version (required)
     * @param includeHistory Flag to indicate if response should include historic information, defaults to false (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Person returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Person not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLegalBasisPersonIdGetAsync(String id, List<InformationPart> informationParts, String apiVersion, Boolean includeHistory, final ApiCallback<Person> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiLegalBasisPersonIdGetValidateBeforeCall(id, informationParts, apiVersion, includeHistory, _callback);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
