/*
 * Persontjenesten API - ET
 * ## Introduction  The Person API is a copy of the [National Population Register (\"Folkeregisteret\")](https://www.skatteetaten.no/en/person/national-registry/about/) serving the norwegian health sector, maintained by Norsk helsenett. More detailed information on data coming from the National Population Register is also available in Norwegian here: [Information Model](https://skatteetaten.github.io/folkeregisteret-api-dokumentasjon/informasjonsmodell/)  More detailed information about the Person API service, including how to get access, is documented here: [Persontjenesten](https://www.nhn.no/samhandlingsplattform/grunndata/persontjenesten)  ## Disclaimer  The Person API is under continuous development and will be subject to changes without notice. The changes will follow semantic versioning to prevent breaking changes. Legacy versions will be available for 6 months before they are discontinued. We encourage consumers to follow our changelog in order to keep track of any changes. Send feedback and questions to [persontjenesten@nhn.no](mailto:persontjenesten@nhn.no)  ## Changelog  See [Changelog](../static/changelog/index.html)  ## Synthetic test data  Data in our test environment is using synthetic test data coming from the [Synthetic National Register](https://skatteetaten.github.io/testnorge-tenor-dokumentasjon/kilder#syntetisk-folkeregister). To browse the data available, you can log in using ID-porten at [Testnorge](https://testdata.skatteetaten.no/web/testnorge/)  ## Authentication and authorization  This API uses [HelseID](https://www.nhn.no/samhandlingsplattform/helseid) for authentication and authorization. To use the API you will need to have a valid HelseID token with a valid scope.  There are two scopes available to consume resources from the Person API: - **ReadWithLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-with-legal-basis`    This scope provides read access to information in the authorization bundle \"public with legal basis\" (aka statutory authority).    For version 0.5 name was `nhn:hgd-persontjenesten-api/read`  - **ReadNoLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-no-legal-basis`    This scope provides read access to information in the public bundle \"public with**out** legal basis\". 
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sf.nhn.helseid.demo.persontjenesten.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import sf.nhn.helseid.demo.persontjenesten.JSON;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * Residuary estate contact information  Will be either a Person, a Lawyer or an Organization.  &lt;br&gt;FREG: KontaktinformasjonForDoedsbo
 */
@ApiModel(description = "Residuary estate contact information  Will be either a Person, a Lawyer or an Organization.  <br>FREG: KontaktinformasjonForDoedsbo")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-21T11:48:55.741350900+02:00[Europe/Oslo]")
public class ResiduaryEstateContactInformation {
  public static final String SERIALIZED_NAME_REGISTERED_AT = "registeredAt";
  @SerializedName(SERIALIZED_NAME_REGISTERED_AT)
  private OffsetDateTime registeredAt;

  public static final String SERIALIZED_NAME_IS_VALID = "isValid";
  @SerializedName(SERIALIZED_NAME_IS_VALID)
  private Boolean isValid;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_VALID_FROM = "validFrom";
  @SerializedName(SERIALIZED_NAME_VALID_FROM)
  private OffsetDateTime validFrom;

  public static final String SERIALIZED_NAME_VALID_TO = "validTo";
  @SerializedName(SERIALIZED_NAME_VALID_TO)
  private OffsetDateTime validTo;

  public static final String SERIALIZED_NAME_PERSON = "person";
  @SerializedName(SERIALIZED_NAME_PERSON)
  private ResiduaryEstateContactInformationPerson person;

  public static final String SERIALIZED_NAME_LAWYER = "lawyer";
  @SerializedName(SERIALIZED_NAME_LAWYER)
  private ResiduaryEstateContactInformationLawyer lawyer;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private ResiduaryEstateContactInformationOrganization organization;

  public static final String SERIALIZED_NAME_PROBATE_CERTIFICATE_TYPE = "probateCertificateType";
  @SerializedName(SERIALIZED_NAME_PROBATE_CERTIFICATE_TYPE)
  private ProbateCertificateType probateCertificateType;

  public static final String SERIALIZED_NAME_PROBATE_CERTIFICATE_ISSUE_DATE = "probateCertificateIssueDate";
  @SerializedName(SERIALIZED_NAME_PROBATE_CERTIFICATE_ISSUE_DATE)
  private OffsetDateTime probateCertificateIssueDate;

  public static final String SERIALIZED_NAME_CONTACT_ADDRESS = "contactAddress";
  @SerializedName(SERIALIZED_NAME_CONTACT_ADDRESS)
  private ResiduaryEstateContactInformationContactAddress contactAddress;

  public ResiduaryEstateContactInformation() {
  }

  public ResiduaryEstateContactInformation registeredAt(OffsetDateTime registeredAt) {
    
    this.registeredAt = registeredAt;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Ajourholdstidspunkt
   * @return registeredAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>FREG: Ajourholdstidspunkt")

  public OffsetDateTime getRegisteredAt() {
    return registeredAt;
  }


  public void setRegisteredAt(OffsetDateTime registeredAt) {
    this.registeredAt = registeredAt;
  }


  public ResiduaryEstateContactInformation isValid(Boolean isValid) {
    
    this.isValid = isValid;
    return this;
  }

   /**
   * &lt;br&gt;FREG: ErGjeldende
   * @return isValid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>FREG: ErGjeldende")

  public Boolean getIsValid() {
    return isValid;
  }


  public void setIsValid(Boolean isValid) {
    this.isValid = isValid;
  }


  public ResiduaryEstateContactInformation source(String source) {
    
    this.source = source;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Kilde
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>FREG: Kilde")

  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    this.source = source;
  }


  public ResiduaryEstateContactInformation reason(String reason) {
    
    this.reason = reason;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Aarsak
   * @return reason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>FREG: Aarsak")

  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    this.reason = reason;
  }


  public ResiduaryEstateContactInformation validFrom(OffsetDateTime validFrom) {
    
    this.validFrom = validFrom;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Gyldighetstidspunkt
   * @return validFrom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>FREG: Gyldighetstidspunkt")

  public OffsetDateTime getValidFrom() {
    return validFrom;
  }


  public void setValidFrom(OffsetDateTime validFrom) {
    this.validFrom = validFrom;
  }


  public ResiduaryEstateContactInformation validTo(OffsetDateTime validTo) {
    
    this.validTo = validTo;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Opphoerstidspunkt
   * @return validTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>FREG: Opphoerstidspunkt")

  public OffsetDateTime getValidTo() {
    return validTo;
  }


  public void setValidTo(OffsetDateTime validTo) {
    this.validTo = validTo;
  }


  public ResiduaryEstateContactInformation person(ResiduaryEstateContactInformationPerson person) {
    
    this.person = person;
    return this;
  }

   /**
   * Get person
   * @return person
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ResiduaryEstateContactInformationPerson getPerson() {
    return person;
  }


  public void setPerson(ResiduaryEstateContactInformationPerson person) {
    this.person = person;
  }


  public ResiduaryEstateContactInformation lawyer(ResiduaryEstateContactInformationLawyer lawyer) {
    
    this.lawyer = lawyer;
    return this;
  }

   /**
   * Get lawyer
   * @return lawyer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ResiduaryEstateContactInformationLawyer getLawyer() {
    return lawyer;
  }


  public void setLawyer(ResiduaryEstateContactInformationLawyer lawyer) {
    this.lawyer = lawyer;
  }


  public ResiduaryEstateContactInformation organization(ResiduaryEstateContactInformationOrganization organization) {
    
    this.organization = organization;
    return this;
  }

   /**
   * Get organization
   * @return organization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ResiduaryEstateContactInformationOrganization getOrganization() {
    return organization;
  }


  public void setOrganization(ResiduaryEstateContactInformationOrganization organization) {
    this.organization = organization;
  }


  public ResiduaryEstateContactInformation probateCertificateType(ProbateCertificateType probateCertificateType) {
    
    this.probateCertificateType = probateCertificateType;
    return this;
  }

   /**
   * Probate certificate type  &lt;br&gt;FREG: Skifteform
   * @return probateCertificateType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Probate certificate type  <br>FREG: Skifteform")

  public ProbateCertificateType getProbateCertificateType() {
    return probateCertificateType;
  }


  public void setProbateCertificateType(ProbateCertificateType probateCertificateType) {
    this.probateCertificateType = probateCertificateType;
  }


  public ResiduaryEstateContactInformation probateCertificateIssueDate(OffsetDateTime probateCertificateIssueDate) {
    
    this.probateCertificateIssueDate = probateCertificateIssueDate;
    return this;
  }

   /**
   * Date of the probate certificate issuance  &lt;br&gt;FREG: Attestutstedelsesdato
   * @return probateCertificateIssueDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date of the probate certificate issuance  <br>FREG: Attestutstedelsesdato")

  public OffsetDateTime getProbateCertificateIssueDate() {
    return probateCertificateIssueDate;
  }


  public void setProbateCertificateIssueDate(OffsetDateTime probateCertificateIssueDate) {
    this.probateCertificateIssueDate = probateCertificateIssueDate;
  }


  public ResiduaryEstateContactInformation contactAddress(ResiduaryEstateContactInformationContactAddress contactAddress) {
    
    this.contactAddress = contactAddress;
    return this;
  }

   /**
   * Get contactAddress
   * @return contactAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ResiduaryEstateContactInformationContactAddress getContactAddress() {
    return contactAddress;
  }


  public void setContactAddress(ResiduaryEstateContactInformationContactAddress contactAddress) {
    this.contactAddress = contactAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResiduaryEstateContactInformation residuaryEstateContactInformation = (ResiduaryEstateContactInformation) o;
    return Objects.equals(this.registeredAt, residuaryEstateContactInformation.registeredAt) &&
        Objects.equals(this.isValid, residuaryEstateContactInformation.isValid) &&
        Objects.equals(this.source, residuaryEstateContactInformation.source) &&
        Objects.equals(this.reason, residuaryEstateContactInformation.reason) &&
        Objects.equals(this.validFrom, residuaryEstateContactInformation.validFrom) &&
        Objects.equals(this.validTo, residuaryEstateContactInformation.validTo) &&
        Objects.equals(this.person, residuaryEstateContactInformation.person) &&
        Objects.equals(this.lawyer, residuaryEstateContactInformation.lawyer) &&
        Objects.equals(this.organization, residuaryEstateContactInformation.organization) &&
        Objects.equals(this.probateCertificateType, residuaryEstateContactInformation.probateCertificateType) &&
        Objects.equals(this.probateCertificateIssueDate, residuaryEstateContactInformation.probateCertificateIssueDate) &&
        Objects.equals(this.contactAddress, residuaryEstateContactInformation.contactAddress);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(registeredAt, isValid, source, reason, validFrom, validTo, person, lawyer, organization, probateCertificateType, probateCertificateIssueDate, contactAddress);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResiduaryEstateContactInformation {\n");
    sb.append("    registeredAt: ").append(toIndentedString(registeredAt)).append("\n");
    sb.append("    isValid: ").append(toIndentedString(isValid)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    validFrom: ").append(toIndentedString(validFrom)).append("\n");
    sb.append("    validTo: ").append(toIndentedString(validTo)).append("\n");
    sb.append("    person: ").append(toIndentedString(person)).append("\n");
    sb.append("    lawyer: ").append(toIndentedString(lawyer)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    probateCertificateType: ").append(toIndentedString(probateCertificateType)).append("\n");
    sb.append("    probateCertificateIssueDate: ").append(toIndentedString(probateCertificateIssueDate)).append("\n");
    sb.append("    contactAddress: ").append(toIndentedString(contactAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("registeredAt");
    openapiFields.add("isValid");
    openapiFields.add("source");
    openapiFields.add("reason");
    openapiFields.add("validFrom");
    openapiFields.add("validTo");
    openapiFields.add("person");
    openapiFields.add("lawyer");
    openapiFields.add("organization");
    openapiFields.add("probateCertificateType");
    openapiFields.add("probateCertificateIssueDate");
    openapiFields.add("contactAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ResiduaryEstateContactInformation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ResiduaryEstateContactInformation.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResiduaryEstateContactInformation is not found in the empty JSON string", ResiduaryEstateContactInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ResiduaryEstateContactInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResiduaryEstateContactInformation` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      // validate the optional field `person`
      if (jsonObj.get("person") != null && !jsonObj.get("person").isJsonNull()) {
        ResiduaryEstateContactInformationPerson.validateJsonObject(jsonObj.getAsJsonObject("person"));
      }
      // validate the optional field `lawyer`
      if (jsonObj.get("lawyer") != null && !jsonObj.get("lawyer").isJsonNull()) {
        ResiduaryEstateContactInformationLawyer.validateJsonObject(jsonObj.getAsJsonObject("lawyer"));
      }
      // validate the optional field `organization`
      if (jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) {
        ResiduaryEstateContactInformationOrganization.validateJsonObject(jsonObj.getAsJsonObject("organization"));
      }
      // validate the optional field `contactAddress`
      if (jsonObj.get("contactAddress") != null && !jsonObj.get("contactAddress").isJsonNull()) {
        ResiduaryEstateContactInformationContactAddress.validateJsonObject(jsonObj.getAsJsonObject("contactAddress"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResiduaryEstateContactInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResiduaryEstateContactInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResiduaryEstateContactInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResiduaryEstateContactInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<ResiduaryEstateContactInformation>() {
           @Override
           public void write(JsonWriter out, ResiduaryEstateContactInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResiduaryEstateContactInformation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ResiduaryEstateContactInformation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ResiduaryEstateContactInformation
  * @throws IOException if the JSON string is invalid with respect to ResiduaryEstateContactInformation
  */
  public static ResiduaryEstateContactInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResiduaryEstateContactInformation.class);
  }

 /**
  * Convert an instance of ResiduaryEstateContactInformation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

