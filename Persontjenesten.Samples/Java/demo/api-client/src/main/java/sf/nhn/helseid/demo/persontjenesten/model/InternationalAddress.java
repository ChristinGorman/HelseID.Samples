/*
 * Persontjenesten API - ET
 * ## Introduction  The Person API is a copy of the [National Population Register (\"Folkeregisteret\")](https://www.skatteetaten.no/en/person/national-registry/about/) serving the norwegian health sector, maintained by Norsk helsenett. More detailed information on data coming from the National Population Register is also available in Norwegian here: [Information Model](https://skatteetaten.github.io/folkeregisteret-api-dokumentasjon/informasjonsmodell/)  More detailed information about the Person API service, including how to get access, is documented here: [Persontjenesten](https://www.nhn.no/samhandlingsplattform/grunndata/persontjenesten)  ## Disclaimer  The Person API is under continuous development and will be subject to changes without notice. The changes will follow semantic versioning to prevent breaking changes. Legacy versions will be available for 6 months before they are discontinued. We encourage consumers to follow our changelog in order to keep track of any changes. Send feedback and questions to [persontjenesten@nhn.no](mailto:persontjenesten@nhn.no)  ## Changelog  See [Changelog](../static/changelog/index.html)  ## Synthetic test data  Data in our test environment is using synthetic test data coming from the [Synthetic National Register](https://skatteetaten.github.io/testnorge-tenor-dokumentasjon/kilder#syntetisk-folkeregister). To browse the data available, you can log in using ID-porten at [Testnorge](https://testdata.skatteetaten.no/web/testnorge/)  ## Authentication and authorization  This API uses [HelseID](https://www.nhn.no/samhandlingsplattform/helseid) for authentication and authorization. To use the API you will need to have a valid HelseID token with a valid scope.  There are two scopes available to consume resources from the Person API: - **ReadWithLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-with-legal-basis`    This scope provides read access to information in the authorization bundle \"public with legal basis\" (aka statutory authority).    For version 0.5 name was `nhn:hgd-persontjenesten-api/read`  - **ReadNoLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-no-legal-basis`    This scope provides read access to information in the public bundle \"public with**out** legal basis\". 
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sf.nhn.helseid.demo.persontjenesten.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import sf.nhn.helseid.demo.persontjenesten.JSON;

import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * International address  &lt;br&gt;FREG: InternasjonalAdresse
 */
@ApiModel(description = "International address  <br>FREG: InternasjonalAdresse")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-21T11:48:55.741350900+02:00[Europe/Oslo]")
public class InternationalAddress {
  public static final String SERIALIZED_NAME_CO_ADDRESS_NAME = "coAddressName";
  @SerializedName(SERIALIZED_NAME_CO_ADDRESS_NAME)
  private String coAddressName;

  public static final String SERIALIZED_NAME_ADDRESS_NAME = "addressName";
  @SerializedName(SERIALIZED_NAME_ADDRESS_NAME)
  private String addressName;

  public static final String SERIALIZED_NAME_BUILDING = "building";
  @SerializedName(SERIALIZED_NAME_BUILDING)
  private String building;

  public static final String SERIALIZED_NAME_FLOOR_NUMBER = "floorNumber";
  @SerializedName(SERIALIZED_NAME_FLOOR_NUMBER)
  private String floorNumber;

  public static final String SERIALIZED_NAME_HOUSING_UNIT = "housingUnit";
  @SerializedName(SERIALIZED_NAME_HOUSING_UNIT)
  private String housingUnit;

  public static final String SERIALIZED_NAME_POST_BOX = "postBox";
  @SerializedName(SERIALIZED_NAME_POST_BOX)
  private String postBox;

  public static final String SERIALIZED_NAME_POST_CODE = "postCode";
  @SerializedName(SERIALIZED_NAME_POST_CODE)
  private String postCode;

  public static final String SERIALIZED_NAME_CITY_OR_PLACE_NAME = "cityOrPlaceName";
  @SerializedName(SERIALIZED_NAME_CITY_OR_PLACE_NAME)
  private String cityOrPlaceName;

  public static final String SERIALIZED_NAME_DISTRICT_NAME = "districtName";
  @SerializedName(SERIALIZED_NAME_DISTRICT_NAME)
  private String districtName;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public InternationalAddress() {
  }

  public InternationalAddress coAddressName(String coAddressName) {
    
    this.coAddressName = coAddressName;
    return this;
  }

   /**
   * Description of who the recipient is in care of (C/O),  or which recipient in an organization (v/ &#x3D; with, or Att: &#x3D; \&quot;Attention\&quot;)  &lt;br&gt;FREG: CoAdressenavn
   * @return coAddressName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "C/O ACME Company, Inc.", value = "Description of who the recipient is in care of (C/O),  or which recipient in an organization (v/ = with, or Att: = \"Attention\")  <br>FREG: CoAdressenavn")

  public String getCoAddressName() {
    return coAddressName;
  }


  public void setCoAddressName(String coAddressName) {
    this.coAddressName = coAddressName;
  }


  public InternationalAddress addressName(String addressName) {
    
    this.addressName = addressName;
    return this;
  }

   /**
   * Name of a street, road, path, place or area  as registered in the cadastral of a municipality  &lt;br&gt;Remarks:   Address number (housing number and lettering) may be included  Freg: Adressenavn
   * @return addressName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "114 Av. des Champs-Élysées", value = "Name of a street, road, path, place or area  as registered in the cadastral of a municipality  <br>Remarks:   Address number (housing number and lettering) may be included  Freg: Adressenavn")

  public String getAddressName() {
    return addressName;
  }


  public void setAddressName(String addressName) {
    this.addressName = addressName;
  }


  public InternationalAddress building(String building) {
    
    this.building = building;
    return this;
  }

   /**
   * Describes name and/or number of a building  &lt;br&gt;FREG: Bygning
   * @return building
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Block 3, Bel-Air Flats", value = "Describes name and/or number of a building  <br>FREG: Bygning")

  public String getBuilding() {
    return building;
  }


  public void setBuilding(String building) {
    this.building = building;
  }


  public InternationalAddress floorNumber(String floorNumber) {
    
    this.floorNumber = floorNumber;
    return this;
  }

   /**
   * Described which floor the registered address is located in  &lt;br&gt;FREG: Etasjenummer
   * @return floorNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Level 1, Ground floor, Verdieping 3", value = "Described which floor the registered address is located in  <br>FREG: Etasjenummer")

  public String getFloorNumber() {
    return floorNumber;
  }


  public void setFloorNumber(String floorNumber) {
    this.floorNumber = floorNumber;
  }


  public InternationalAddress housingUnit(String housingUnit) {
    
    this.housingUnit = housingUnit;
    return this;
  }

   /**
   * Address property describing what kind of habitat or  business is registered, and a unique identifier within  the building / floor  &lt;br&gt;FREG: Boenhet
   * @return housingUnit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Apartment 10, Unit 2, Wardens Flat", value = "Address property describing what kind of habitat or  business is registered, and a unique identifier within  the building / floor  <br>FREG: Boenhet")

  public String getHousingUnit() {
    return housingUnit;
  }


  public void setHousingUnit(String housingUnit) {
    this.housingUnit = housingUnit;
  }


  public InternationalAddress postBox(String postBox) {
    
    this.postBox = postBox;
    return this;
  }

   /**
   * Post box identifier  &lt;br&gt;FREG: Postboks
   * @return postBox
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Post box identifier  <br>FREG: Postboks")

  public String getPostBox() {
    return postBox;
  }


  public void setPostBox(String postBox) {
    this.postBox = postBox;
  }


  public InternationalAddress postCode(String postCode) {
    
    this.postCode = postCode;
    return this;
  }

   /**
   * Post code / zip code for each post area  &lt;br&gt;FREG: Postkode
   * @return postCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Post code / zip code for each post area  <br>FREG: Postkode")

  public String getPostCode() {
    return postCode;
  }


  public void setPostCode(String postCode) {
    this.postCode = postCode;
  }


  public InternationalAddress cityOrPlaceName(String cityOrPlaceName) {
    
    this.cityOrPlaceName = cityOrPlaceName;
    return this;
  }

   /**
   * Name of place or city  &lt;br&gt;FREG: ByEllerStedsnavn
   * @return cityOrPlaceName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Paris", value = "Name of place or city  <br>FREG: ByEllerStedsnavn")

  public String getCityOrPlaceName() {
    return cityOrPlaceName;
  }


  public void setCityOrPlaceName(String cityOrPlaceName) {
    this.cityOrPlaceName = cityOrPlaceName;
  }


  public InternationalAddress districtName(String districtName) {
    
    this.districtName = districtName;
    return this;
  }

   /**
   * District inside a country or part of a city  &lt;br&gt;FREG: Distriktsnavn
   * @return districtName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "District inside a country or part of a city  <br>FREG: Distriktsnavn")

  public String getDistrictName() {
    return districtName;
  }


  public void setDistrictName(String districtName) {
    this.districtName = districtName;
  }


  public InternationalAddress region(String region) {
    
    this.region = region;
    return this;
  }

   /**
   * Large geographical area part of a country  &lt;br&gt;FREG: Region
   * @return region
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Large geographical area part of a country  <br>FREG: Region")

  public String getRegion() {
    return region;
  }


  public void setRegion(String region) {
    this.region = region;
  }


  public InternationalAddress countryCode(String countryCode) {
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * 2 letter Code used to represent a country  &lt;br&gt;Remarks:   Uses ISO 3166-1 Alpha 2. XK &#x3D; Kosovo.  Freg: Landkode
   * @return countryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "2 letter Code used to represent a country  <br>Remarks:   Uses ISO 3166-1 Alpha 2. XK = Kosovo.  Freg: Landkode")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InternationalAddress internationalAddress = (InternationalAddress) o;
    return Objects.equals(this.coAddressName, internationalAddress.coAddressName) &&
        Objects.equals(this.addressName, internationalAddress.addressName) &&
        Objects.equals(this.building, internationalAddress.building) &&
        Objects.equals(this.floorNumber, internationalAddress.floorNumber) &&
        Objects.equals(this.housingUnit, internationalAddress.housingUnit) &&
        Objects.equals(this.postBox, internationalAddress.postBox) &&
        Objects.equals(this.postCode, internationalAddress.postCode) &&
        Objects.equals(this.cityOrPlaceName, internationalAddress.cityOrPlaceName) &&
        Objects.equals(this.districtName, internationalAddress.districtName) &&
        Objects.equals(this.region, internationalAddress.region) &&
        Objects.equals(this.countryCode, internationalAddress.countryCode);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(coAddressName, addressName, building, floorNumber, housingUnit, postBox, postCode, cityOrPlaceName, districtName, region, countryCode);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InternationalAddress {\n");
    sb.append("    coAddressName: ").append(toIndentedString(coAddressName)).append("\n");
    sb.append("    addressName: ").append(toIndentedString(addressName)).append("\n");
    sb.append("    building: ").append(toIndentedString(building)).append("\n");
    sb.append("    floorNumber: ").append(toIndentedString(floorNumber)).append("\n");
    sb.append("    housingUnit: ").append(toIndentedString(housingUnit)).append("\n");
    sb.append("    postBox: ").append(toIndentedString(postBox)).append("\n");
    sb.append("    postCode: ").append(toIndentedString(postCode)).append("\n");
    sb.append("    cityOrPlaceName: ").append(toIndentedString(cityOrPlaceName)).append("\n");
    sb.append("    districtName: ").append(toIndentedString(districtName)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("coAddressName");
    openapiFields.add("addressName");
    openapiFields.add("building");
    openapiFields.add("floorNumber");
    openapiFields.add("housingUnit");
    openapiFields.add("postBox");
    openapiFields.add("postCode");
    openapiFields.add("cityOrPlaceName");
    openapiFields.add("districtName");
    openapiFields.add("region");
    openapiFields.add("countryCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InternationalAddress
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (InternationalAddress.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in InternationalAddress is not found in the empty JSON string", InternationalAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!InternationalAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InternationalAddress` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("coAddressName") != null && !jsonObj.get("coAddressName").isJsonNull()) && !jsonObj.get("coAddressName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coAddressName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coAddressName").toString()));
      }
      if ((jsonObj.get("addressName") != null && !jsonObj.get("addressName").isJsonNull()) && !jsonObj.get("addressName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressName").toString()));
      }
      if ((jsonObj.get("building") != null && !jsonObj.get("building").isJsonNull()) && !jsonObj.get("building").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `building` to be a primitive type in the JSON string but got `%s`", jsonObj.get("building").toString()));
      }
      if ((jsonObj.get("floorNumber") != null && !jsonObj.get("floorNumber").isJsonNull()) && !jsonObj.get("floorNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floorNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floorNumber").toString()));
      }
      if ((jsonObj.get("housingUnit") != null && !jsonObj.get("housingUnit").isJsonNull()) && !jsonObj.get("housingUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `housingUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("housingUnit").toString()));
      }
      if ((jsonObj.get("postBox") != null && !jsonObj.get("postBox").isJsonNull()) && !jsonObj.get("postBox").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postBox` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postBox").toString()));
      }
      if ((jsonObj.get("postCode") != null && !jsonObj.get("postCode").isJsonNull()) && !jsonObj.get("postCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postCode").toString()));
      }
      if ((jsonObj.get("cityOrPlaceName") != null && !jsonObj.get("cityOrPlaceName").isJsonNull()) && !jsonObj.get("cityOrPlaceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cityOrPlaceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cityOrPlaceName").toString()));
      }
      if ((jsonObj.get("districtName") != null && !jsonObj.get("districtName").isJsonNull()) && !jsonObj.get("districtName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `districtName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("districtName").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InternationalAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InternationalAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InternationalAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InternationalAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<InternationalAddress>() {
           @Override
           public void write(JsonWriter out, InternationalAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InternationalAddress read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InternationalAddress given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InternationalAddress
  * @throws IOException if the JSON string is invalid with respect to InternationalAddress
  */
  public static InternationalAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InternationalAddress.class);
  }

 /**
  * Convert an instance of InternationalAddress to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

