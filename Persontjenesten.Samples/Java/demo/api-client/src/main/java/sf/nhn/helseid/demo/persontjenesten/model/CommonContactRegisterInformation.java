/*
 * Persontjenesten API - ET
 * ## Introduction  The Person API is a copy of the [National Population Register (\"Folkeregisteret\")](https://www.skatteetaten.no/en/person/national-registry/about/) serving the norwegian health sector, maintained by Norsk helsenett. More detailed information on data coming from the National Population Register is also available in Norwegian here: [Information Model](https://skatteetaten.github.io/folkeregisteret-api-dokumentasjon/informasjonsmodell/)  More detailed information about the Person API service, including how to get access, is documented here: [Persontjenesten](https://www.nhn.no/samhandlingsplattform/grunndata/persontjenesten)  ## Disclaimer  The Person API is under continuous development and will be subject to changes without notice. The changes will follow semantic versioning to prevent breaking changes. Legacy versions will be available for 6 months before they are discontinued. We encourage consumers to follow our changelog in order to keep track of any changes. Send feedback and questions to [persontjenesten@nhn.no](mailto:persontjenesten@nhn.no)  ## Changelog  See [Changelog](../static/changelog/index.html)  ## Synthetic test data  Data in our test environment is using synthetic test data coming from the [Synthetic National Register](https://skatteetaten.github.io/testnorge-tenor-dokumentasjon/kilder#syntetisk-folkeregister). To browse the data available, you can log in using ID-porten at [Testnorge](https://testdata.skatteetaten.no/web/testnorge/)  ## Authentication and authorization  This API uses [HelseID](https://www.nhn.no/samhandlingsplattform/helseid) for authentication and authorization. To use the API you will need to have a valid HelseID token with a valid scope.  There are two scopes available to consume resources from the Person API: - **ReadWithLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-with-legal-basis`    This scope provides read access to information in the authorization bundle \"public with legal basis\" (aka statutory authority).    For version 0.5 name was `nhn:hgd-persontjenesten-api/read`  - **ReadNoLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-no-legal-basis`    This scope provides read access to information in the public bundle \"public with**out** legal basis\". 
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sf.nhn.helseid.demo.persontjenesten.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import sf.nhn.helseid.demo.persontjenesten.JSON;

import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * Contact Register Information for a person in the Person API  Data is from the Contact and Reservation Register (KRR)
 */
@ApiModel(description = "Contact Register Information for a person in the Person API  Data is from the Contact and Reservation Register (KRR)")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-21T11:48:55.741350900+02:00[Europe/Oslo]")
public class CommonContactRegisterInformation {
  public static final String SERIALIZED_NAME_RESERVATION = "reservation";
  @SerializedName(SERIALIZED_NAME_RESERVATION)
  private Reservation reservation;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public static final String SERIALIZED_NAME_NOTIFICATION_STATUS = "notificationStatus";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_STATUS)
  private NotificationStatus notificationStatus;

  public static final String SERIALIZED_NAME_CONTACT_INFORMATION = "contactInformation";
  @SerializedName(SERIALIZED_NAME_CONTACT_INFORMATION)
  private CommonContactRegisterInformationContactInformation contactInformation;

  public static final String SERIALIZED_NAME_DIGITAL_POST = "digitalPost";
  @SerializedName(SERIALIZED_NAME_DIGITAL_POST)
  private CommonContactRegisterInformationDigitalPost digitalPost;

  public static final String SERIALIZED_NAME_CERTIFICATE = "certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private String certificate;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LANGUAGE_LAST_UPDATED = "languageLastUpdated";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_LAST_UPDATED)
  private String languageLastUpdated;

  public CommonContactRegisterInformation() {
  }

  public CommonContactRegisterInformation reservation(Reservation reservation) {
    
    this.reservation = reservation;
    return this;
  }

   /**
   * &lt;br&gt;KRR: reservasjon              Reservation given by a person, used in accordance to eForvaltningsforskriften ยง 15 a.
   * @return reservation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>KRR: reservasjon              Reservation given by a person, used in accordance to eForvaltningsforskriften ยง 15 a.")

  public Reservation getReservation() {
    return reservation;
  }


  public void setReservation(Reservation reservation) {
    this.reservation = reservation;
  }


  public CommonContactRegisterInformation status(Status status) {
    
    this.status = status;
    return this;
  }

   /**
   * &lt;br&gt;KRR: status              The status of a person
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>KRR: status              The status of a person")

  public Status getStatus() {
    return status;
  }


  public void setStatus(Status status) {
    this.status = status;
  }


  public CommonContactRegisterInformation notificationStatus(NotificationStatus notificationStatus) {
    
    this.notificationStatus = notificationStatus;
    return this;
  }

   /**
   * &lt;br&gt;KRR: varslingsstatus              Describes if a person can be notified or not
   * @return notificationStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>KRR: varslingsstatus              Describes if a person can be notified or not")

  public NotificationStatus getNotificationStatus() {
    return notificationStatus;
  }


  public void setNotificationStatus(NotificationStatus notificationStatus) {
    this.notificationStatus = notificationStatus;
  }


  public CommonContactRegisterInformation contactInformation(CommonContactRegisterInformationContactInformation contactInformation) {
    
    this.contactInformation = contactInformation;
    return this;
  }

   /**
   * Get contactInformation
   * @return contactInformation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CommonContactRegisterInformationContactInformation getContactInformation() {
    return contactInformation;
  }


  public void setContactInformation(CommonContactRegisterInformationContactInformation contactInformation) {
    this.contactInformation = contactInformation;
  }


  public CommonContactRegisterInformation digitalPost(CommonContactRegisterInformationDigitalPost digitalPost) {
    
    this.digitalPost = digitalPost;
    return this;
  }

   /**
   * Get digitalPost
   * @return digitalPost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CommonContactRegisterInformationDigitalPost getDigitalPost() {
    return digitalPost;
  }


  public void setDigitalPost(CommonContactRegisterInformationDigitalPost digitalPost) {
    this.digitalPost = digitalPost;
  }


  public CommonContactRegisterInformation certificate(String certificate) {
    
    this.certificate = certificate;
    return this;
  }

   /**
   * &lt;br&gt;KRR: sertifikat              Person certificate for digital post
   * @return certificate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "X509Certificate", value = "<br>KRR: sertifikat              Person certificate for digital post")

  public String getCertificate() {
    return certificate;
  }


  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }


  public CommonContactRegisterInformation language(String language) {
    
    this.language = language;
    return this;
  }

   /**
   * &lt;br&gt;KRR: spraak              Persons preferred language for communication with the public
   * @return language
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "nn, nb, en, se", value = "<br>KRR: spraak              Persons preferred language for communication with the public")

  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    this.language = language;
  }


  public CommonContactRegisterInformation languageLastUpdated(String languageLastUpdated) {
    
    this.languageLastUpdated = languageLastUpdated;
    return this;
  }

   /**
   * &lt;br&gt;KRR: spraak_oppdatert              Last time language choice was updated
   * @return languageLastUpdated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-08-05T10:45:15.768Z", value = "<br>KRR: spraak_oppdatert              Last time language choice was updated")

  public String getLanguageLastUpdated() {
    return languageLastUpdated;
  }


  public void setLanguageLastUpdated(String languageLastUpdated) {
    this.languageLastUpdated = languageLastUpdated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommonContactRegisterInformation commonContactRegisterInformation = (CommonContactRegisterInformation) o;
    return Objects.equals(this.reservation, commonContactRegisterInformation.reservation) &&
        Objects.equals(this.status, commonContactRegisterInformation.status) &&
        Objects.equals(this.notificationStatus, commonContactRegisterInformation.notificationStatus) &&
        Objects.equals(this.contactInformation, commonContactRegisterInformation.contactInformation) &&
        Objects.equals(this.digitalPost, commonContactRegisterInformation.digitalPost) &&
        Objects.equals(this.certificate, commonContactRegisterInformation.certificate) &&
        Objects.equals(this.language, commonContactRegisterInformation.language) &&
        Objects.equals(this.languageLastUpdated, commonContactRegisterInformation.languageLastUpdated);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(reservation, status, notificationStatus, contactInformation, digitalPost, certificate, language, languageLastUpdated);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommonContactRegisterInformation {\n");
    sb.append("    reservation: ").append(toIndentedString(reservation)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    notificationStatus: ").append(toIndentedString(notificationStatus)).append("\n");
    sb.append("    contactInformation: ").append(toIndentedString(contactInformation)).append("\n");
    sb.append("    digitalPost: ").append(toIndentedString(digitalPost)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    languageLastUpdated: ").append(toIndentedString(languageLastUpdated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("reservation");
    openapiFields.add("status");
    openapiFields.add("notificationStatus");
    openapiFields.add("contactInformation");
    openapiFields.add("digitalPost");
    openapiFields.add("certificate");
    openapiFields.add("language");
    openapiFields.add("languageLastUpdated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CommonContactRegisterInformation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CommonContactRegisterInformation.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommonContactRegisterInformation is not found in the empty JSON string", CommonContactRegisterInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CommonContactRegisterInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommonContactRegisterInformation` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `contactInformation`
      if (jsonObj.get("contactInformation") != null && !jsonObj.get("contactInformation").isJsonNull()) {
        CommonContactRegisterInformationContactInformation.validateJsonObject(jsonObj.getAsJsonObject("contactInformation"));
      }
      // validate the optional field `digitalPost`
      if (jsonObj.get("digitalPost") != null && !jsonObj.get("digitalPost").isJsonNull()) {
        CommonContactRegisterInformationDigitalPost.validateJsonObject(jsonObj.getAsJsonObject("digitalPost"));
      }
      if ((jsonObj.get("certificate") != null && !jsonObj.get("certificate").isJsonNull()) && !jsonObj.get("certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("languageLastUpdated") != null && !jsonObj.get("languageLastUpdated").isJsonNull()) && !jsonObj.get("languageLastUpdated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageLastUpdated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageLastUpdated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommonContactRegisterInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommonContactRegisterInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommonContactRegisterInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommonContactRegisterInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<CommonContactRegisterInformation>() {
           @Override
           public void write(JsonWriter out, CommonContactRegisterInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommonContactRegisterInformation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CommonContactRegisterInformation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CommonContactRegisterInformation
  * @throws IOException if the JSON string is invalid with respect to CommonContactRegisterInformation
  */
  public static CommonContactRegisterInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommonContactRegisterInformation.class);
  }

 /**
  * Convert an instance of CommonContactRegisterInformation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

