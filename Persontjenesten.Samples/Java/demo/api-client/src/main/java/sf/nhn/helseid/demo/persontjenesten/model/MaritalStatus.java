/*
 * Persontjenesten API - ET
 * ## Introduction  The Person API is a copy of the [National Population Register (\"Folkeregisteret\")](https://www.skatteetaten.no/en/person/national-registry/about/) serving the norwegian health sector, maintained by Norsk helsenett. More detailed information on data coming from the National Population Register is also available in Norwegian here: [Information Model](https://skatteetaten.github.io/folkeregisteret-api-dokumentasjon/informasjonsmodell/)  More detailed information about the Person API service, including how to get access, is documented here: [Persontjenesten](https://www.nhn.no/samhandlingsplattform/grunndata/persontjenesten)  ## Disclaimer  The Person API is under continuous development and will be subject to changes without notice. The changes will follow semantic versioning to prevent breaking changes. Legacy versions will be available for 6 months before they are discontinued. We encourage consumers to follow our changelog in order to keep track of any changes. Send feedback and questions to [persontjenesten@nhn.no](mailto:persontjenesten@nhn.no)  ## Changelog  See [Changelog](../static/changelog/index.html)  ## Synthetic test data  Data in our test environment is using synthetic test data coming from the [Synthetic National Register](https://skatteetaten.github.io/testnorge-tenor-dokumentasjon/kilder#syntetisk-folkeregister). To browse the data available, you can log in using ID-porten at [Testnorge](https://testdata.skatteetaten.no/web/testnorge/)  ## Authentication and authorization  This API uses [HelseID](https://www.nhn.no/samhandlingsplattform/helseid) for authentication and authorization. To use the API you will need to have a valid HelseID token with a valid scope.  There are two scopes available to consume resources from the Person API: - **ReadWithLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-with-legal-basis`    This scope provides read access to information in the authorization bundle \"public with legal basis\" (aka statutory authority).    For version 0.5 name was `nhn:hgd-persontjenesten-api/read`  - **ReadNoLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-no-legal-basis`    This scope provides read access to information in the public bundle \"public with**out** legal basis\". 
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sf.nhn.helseid.demo.persontjenesten.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import sf.nhn.helseid.demo.persontjenesten.JSON;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * Martial status  &lt;br&gt;FREG: Sivilstand
 */
@ApiModel(description = "Martial status  <br>FREG: Sivilstand")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-21T11:48:55.741350900+02:00[Europe/Oslo]")
public class MaritalStatus {
  public static final String SERIALIZED_NAME_REGISTERED_AT = "registeredAt";
  @SerializedName(SERIALIZED_NAME_REGISTERED_AT)
  private OffsetDateTime registeredAt;

  public static final String SERIALIZED_NAME_IS_VALID = "isValid";
  @SerializedName(SERIALIZED_NAME_IS_VALID)
  private Boolean isValid;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_VALID_FROM = "validFrom";
  @SerializedName(SERIALIZED_NAME_VALID_FROM)
  private OffsetDateTime validFrom;

  public static final String SERIALIZED_NAME_VALID_TO = "validTo";
  @SerializedName(SERIALIZED_NAME_VALID_TO)
  private OffsetDateTime validTo;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private MaritalStatusType status;

  public static final String SERIALIZED_NAME_STATUS_DATE = "statusDate";
  @SerializedName(SERIALIZED_NAME_STATUS_DATE)
  private OffsetDateTime statusDate;

  public static final String SERIALIZED_NAME_AUTHORITY = "authority";
  @SerializedName(SERIALIZED_NAME_AUTHORITY)
  private String authority;

  public static final String SERIALIZED_NAME_MUNICIPALITY_NUMBER = "municipalityNumber";
  @SerializedName(SERIALIZED_NAME_MUNICIPALITY_NUMBER)
  private String municipalityNumber;

  public static final String SERIALIZED_NAME_PLACE = "place";
  @SerializedName(SERIALIZED_NAME_PLACE)
  private String place;

  public static final String SERIALIZED_NAME_ABROAD = "abroad";
  @SerializedName(SERIALIZED_NAME_ABROAD)
  private String abroad;

  public static final String SERIALIZED_NAME_RELATED_BY_MARITAL_STATUS = "relatedByMaritalStatus";
  @SerializedName(SERIALIZED_NAME_RELATED_BY_MARITAL_STATUS)
  private String relatedByMaritalStatus;

  public MaritalStatus() {
  }

  public MaritalStatus registeredAt(OffsetDateTime registeredAt) {
    
    this.registeredAt = registeredAt;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Ajourholdstidspunkt
   * @return registeredAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>FREG: Ajourholdstidspunkt")

  public OffsetDateTime getRegisteredAt() {
    return registeredAt;
  }


  public void setRegisteredAt(OffsetDateTime registeredAt) {
    this.registeredAt = registeredAt;
  }


  public MaritalStatus isValid(Boolean isValid) {
    
    this.isValid = isValid;
    return this;
  }

   /**
   * &lt;br&gt;FREG: ErGjeldende
   * @return isValid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>FREG: ErGjeldende")

  public Boolean getIsValid() {
    return isValid;
  }


  public void setIsValid(Boolean isValid) {
    this.isValid = isValid;
  }


  public MaritalStatus source(String source) {
    
    this.source = source;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Kilde
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>FREG: Kilde")

  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    this.source = source;
  }


  public MaritalStatus reason(String reason) {
    
    this.reason = reason;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Aarsak
   * @return reason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>FREG: Aarsak")

  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    this.reason = reason;
  }


  public MaritalStatus validFrom(OffsetDateTime validFrom) {
    
    this.validFrom = validFrom;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Gyldighetstidspunkt
   * @return validFrom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>FREG: Gyldighetstidspunkt")

  public OffsetDateTime getValidFrom() {
    return validFrom;
  }


  public void setValidFrom(OffsetDateTime validFrom) {
    this.validFrom = validFrom;
  }


  public MaritalStatus validTo(OffsetDateTime validTo) {
    
    this.validTo = validTo;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Opphoerstidspunkt
   * @return validTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>FREG: Opphoerstidspunkt")

  public OffsetDateTime getValidTo() {
    return validTo;
  }


  public void setValidTo(OffsetDateTime validTo) {
    this.validTo = validTo;
  }


  public MaritalStatus status(MaritalStatusType status) {
    
    this.status = status;
    return this;
  }

   /**
   * Marital status type  &lt;br&gt;FREG: Sivilstand
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Marital status type  <br>FREG: Sivilstand")

  public MaritalStatusType getStatus() {
    return status;
  }


  public void setStatus(MaritalStatusType status) {
    this.status = status;
  }


  public MaritalStatus statusDate(OffsetDateTime statusDate) {
    
    this.statusDate = statusDate;
    return this;
  }

   /**
   * Date of  the marial status  &lt;br&gt;FREG: SivilstandDato
   * @return statusDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date of  the marial status  <br>FREG: SivilstandDato")

  public OffsetDateTime getStatusDate() {
    return statusDate;
  }


  public void setStatusDate(OffsetDateTime statusDate) {
    this.statusDate = statusDate;
  }


  public MaritalStatus authority(String authority) {
    
    this.authority = authority;
    return this;
  }

   /**
   * Code value for which authority that has granted the marital status  If the source of the Marital Status is DSF, the current values:  DSF er denne verdien representert med vigselstype (VIGSELSTYPE)  1 &#x3D; The Norwegian Church  2 &#x3D; Civil  3 &#x3D; Dissenter for  a non-established Church or other denominations with marital rights  4 &#x3D; Abroad - Foreign authority  Updated 2021.10.14  &lt;br&gt;FREG: Myndighet
   * @return authority
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Code value for which authority that has granted the marital status  If the source of the Marital Status is DSF, the current values:  DSF er denne verdien representert med vigselstype (VIGSELSTYPE)  1 = The Norwegian Church  2 = Civil  3 = Dissenter for  a non-established Church or other denominations with marital rights  4 = Abroad - Foreign authority  Updated 2021.10.14  <br>FREG: Myndighet")

  public String getAuthority() {
    return authority;
  }


  public void setAuthority(String authority) {
    this.authority = authority;
  }


  public MaritalStatus municipalityNumber(String municipalityNumber) {
    
    this.municipalityNumber = municipalityNumber;
    return this;
  }

   /**
   * Number of the municipaltiy the marital status was changed.  If the marital status is a Marrige, the municipality number will be used when there is a representative of the municipality who is married  &lt;br&gt;FREG: Kommune
   * @return municipalityNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of the municipaltiy the marital status was changed.  If the marital status is a Marrige, the municipality number will be used when there is a representative of the municipality who is married  <br>FREG: Kommune")

  public String getMunicipalityNumber() {
    return municipalityNumber;
  }


  public void setMunicipalityNumber(String municipalityNumber) {
    this.municipalityNumber = municipalityNumber;
  }


  public MaritalStatus place(String place) {
    
    this.place = place;
    return this;
  }

   /**
   * Name of the place in Norway or abroad where the status change was made.  May be an address or less exact  &lt;br&gt;FREG: Sted
   * @return place
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the place in Norway or abroad where the status change was made.  May be an address or less exact  <br>FREG: Sted")

  public String getPlace() {
    return place;
  }


  public void setPlace(String place) {
    this.place = place;
  }


  public MaritalStatus abroad(String abroad) {
    
    this.abroad = abroad;
    return this;
  }

   /**
   * Name of country if happened abroad  &lt;br&gt;FREG: Utland
   * @return abroad
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of country if happened abroad  <br>FREG: Utland")

  public String getAbroad() {
    return abroad;
  }


  public void setAbroad(String abroad) {
    this.abroad = abroad;
  }


  public MaritalStatus relatedByMaritalStatus(String relatedByMaritalStatus) {
    
    this.relatedByMaritalStatus = relatedByMaritalStatus;
    return this;
  }

   /**
   * NIN for person related by marital status  &lt;br&gt;FREG: RelatertVedSivilstatus
   * @return relatedByMaritalStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "NIN for person related by marital status  <br>FREG: RelatertVedSivilstatus")

  public String getRelatedByMaritalStatus() {
    return relatedByMaritalStatus;
  }


  public void setRelatedByMaritalStatus(String relatedByMaritalStatus) {
    this.relatedByMaritalStatus = relatedByMaritalStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MaritalStatus maritalStatus = (MaritalStatus) o;
    return Objects.equals(this.registeredAt, maritalStatus.registeredAt) &&
        Objects.equals(this.isValid, maritalStatus.isValid) &&
        Objects.equals(this.source, maritalStatus.source) &&
        Objects.equals(this.reason, maritalStatus.reason) &&
        Objects.equals(this.validFrom, maritalStatus.validFrom) &&
        Objects.equals(this.validTo, maritalStatus.validTo) &&
        Objects.equals(this.status, maritalStatus.status) &&
        Objects.equals(this.statusDate, maritalStatus.statusDate) &&
        Objects.equals(this.authority, maritalStatus.authority) &&
        Objects.equals(this.municipalityNumber, maritalStatus.municipalityNumber) &&
        Objects.equals(this.place, maritalStatus.place) &&
        Objects.equals(this.abroad, maritalStatus.abroad) &&
        Objects.equals(this.relatedByMaritalStatus, maritalStatus.relatedByMaritalStatus);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(registeredAt, isValid, source, reason, validFrom, validTo, status, statusDate, authority, municipalityNumber, place, abroad, relatedByMaritalStatus);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MaritalStatus {\n");
    sb.append("    registeredAt: ").append(toIndentedString(registeredAt)).append("\n");
    sb.append("    isValid: ").append(toIndentedString(isValid)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    validFrom: ").append(toIndentedString(validFrom)).append("\n");
    sb.append("    validTo: ").append(toIndentedString(validTo)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDate: ").append(toIndentedString(statusDate)).append("\n");
    sb.append("    authority: ").append(toIndentedString(authority)).append("\n");
    sb.append("    municipalityNumber: ").append(toIndentedString(municipalityNumber)).append("\n");
    sb.append("    place: ").append(toIndentedString(place)).append("\n");
    sb.append("    abroad: ").append(toIndentedString(abroad)).append("\n");
    sb.append("    relatedByMaritalStatus: ").append(toIndentedString(relatedByMaritalStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("registeredAt");
    openapiFields.add("isValid");
    openapiFields.add("source");
    openapiFields.add("reason");
    openapiFields.add("validFrom");
    openapiFields.add("validTo");
    openapiFields.add("status");
    openapiFields.add("statusDate");
    openapiFields.add("authority");
    openapiFields.add("municipalityNumber");
    openapiFields.add("place");
    openapiFields.add("abroad");
    openapiFields.add("relatedByMaritalStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MaritalStatus
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (MaritalStatus.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in MaritalStatus is not found in the empty JSON string", MaritalStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MaritalStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MaritalStatus` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("authority") != null && !jsonObj.get("authority").isJsonNull()) && !jsonObj.get("authority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authority").toString()));
      }
      if ((jsonObj.get("municipalityNumber") != null && !jsonObj.get("municipalityNumber").isJsonNull()) && !jsonObj.get("municipalityNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `municipalityNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("municipalityNumber").toString()));
      }
      if ((jsonObj.get("place") != null && !jsonObj.get("place").isJsonNull()) && !jsonObj.get("place").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `place` to be a primitive type in the JSON string but got `%s`", jsonObj.get("place").toString()));
      }
      if ((jsonObj.get("abroad") != null && !jsonObj.get("abroad").isJsonNull()) && !jsonObj.get("abroad").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abroad` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abroad").toString()));
      }
      if ((jsonObj.get("relatedByMaritalStatus") != null && !jsonObj.get("relatedByMaritalStatus").isJsonNull()) && !jsonObj.get("relatedByMaritalStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relatedByMaritalStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relatedByMaritalStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MaritalStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MaritalStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MaritalStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MaritalStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<MaritalStatus>() {
           @Override
           public void write(JsonWriter out, MaritalStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MaritalStatus read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MaritalStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MaritalStatus
  * @throws IOException if the JSON string is invalid with respect to MaritalStatus
  */
  public static MaritalStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MaritalStatus.class);
  }

 /**
  * Convert an instance of MaritalStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

