/*
 * Persontjenesten API - ET
 *
 * ## Introduction  The Person API is a copy of the [National Population Register (\"Folkeregisteret\")](https://www.skatteetaten.no/en/person/national-registry/about/) serving the norwegian health sector, maintained by Norsk helsenett. More detailed information on data coming from the National Population Register is also available in Norwegian here: [Information Model](https://skatteetaten.github.io/folkeregisteret-api-dokumentasjon/informasjonsmodell/)  More detailed information about the Person API service, including how to get access, is documented here: [Persontjenesten](https://www.nhn.no/samhandlingsplattform/grunndata/persontjenesten)  ## Disclaimer  The Person API is under continuous development and will be subject to changes without notice. The changes will follow semantic versioning to prevent breaking changes. Legacy versions will be available for 6 months before they are discontinued. We encourage consumers to follow our changelog in order to keep track of any changes. Send feedback and questions to [persontjenesten@nhn.no](mailto:persontjenesten@nhn.no)  ## Changelog  See [Changelog](../static/changelog/index.html)  ## Synthetic test data  Data in our test environment is using synthetic test data coming from the [Synthetic National Register](https://skatteetaten.github.io/testnorge-tenor-dokumentasjon/kilder#syntetisk-folkeregister). To browse the data available, you can log in using ID-porten at [Testnorge](https://testdata.skatteetaten.no/web/testnorge/)  ## Authentication and authorization  This API uses [HelseID](https://www.nhn.no/samhandlingsplattform/helseid) for authentication and authorization. To use the API you will need to have a valid HelseID token with a valid scope.  There are two scopes available to consume resources from the Person API: - **ReadWithLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-with-legal-basis`    This scope provides read access to information in the authorization bundle \"public with legal basis\" (aka statutory authority).    For version 0.5 name was `nhn:hgd-persontjenesten-api/read`  - **ReadNoLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-no-legal-basis`    This scope provides read access to information in the public bundle \"public with**out** legal basis\". 
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Address where person is registered to live.  Only one of StreetAddress, CadastralAddress  or UnknownResidence is in use  &lt;br&gt;FREG: Bostedsadresse
    /// </summary>
    [DataContract(Name = "ResidentialAddress")]
    public partial class ResidentialAddress : IEquatable<ResidentialAddress>, IValidatableObject
    {

        /// <summary>
        /// Describes with which confidentiality the address  should be handled  &lt;br&gt;FREG: Adressegradering
        /// </summary>
        /// <value>Describes with which confidentiality the address  should be handled  &lt;br&gt;FREG: Adressegradering</value>
        [DataMember(Name = "addressConfidentiality", EmitDefaultValue = false)]
        public AddressConfidentiality? AddressConfidentiality { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResidentialAddress" /> class.
        /// </summary>
        /// <param name="registeredAt">&lt;br&gt;FREG: Ajourholdstidspunkt.</param>
        /// <param name="isValid">&lt;br&gt;FREG: ErGjeldende.</param>
        /// <param name="source">&lt;br&gt;FREG: Kilde.</param>
        /// <param name="reason">&lt;br&gt;FREG: Aarsak.</param>
        /// <param name="validFrom">&lt;br&gt;FREG: Gyldighetstidspunkt.</param>
        /// <param name="validTo">&lt;br&gt;FREG: Opphoerstidspunkt.</param>
        /// <param name="streetAddress">streetAddress.</param>
        /// <param name="cadastralAddress">cadastralAddress.</param>
        /// <param name="unknownResidence">unknownResidence.</param>
        /// <param name="cadastralIdentifier">Unique identifier from the Norwegian Mapping Authority.  &lt;br&gt;FREG: AdresseIdentifikatorFraMatrikkelen.</param>
        /// <param name="closeCadastralIdentifier">Unique identifier from the Mapping Authority.  If the Cadastral information used in CadastralIdentifier  is inaccurate, CloseCadastralIdentifier will contain the  unqiue identifier for a near by house.  I.e. If the house letter is not known, the CloseCadastralIdentifier  could point to the house with letter \&quot;A\&quot;, while CadastralIdentifier  would point to all the house number, without letters (which could be multiple houses)  Used to catch changes to the Cadastral to a nearby  &lt;br&gt;Remarks:   (07.02.2020) Not in use  Freg: NaerAdresseIdentifikatorFraMatrikkelen.</param>
        /// <param name="addressConfidentiality">Describes with which confidentiality the address  should be handled  &lt;br&gt;FREG: Adressegradering.</param>
        /// <param name="moveDate">Reported as move date by person  &lt;br&gt;FREG: Flyttedato.</param>
        /// <param name="basicStatisticalUnit">Unique code by the municipality used to  divide small areas of similar nature/commercial/building structure  used as grounds for detailed regional statistic analysis.  &lt;br&gt;FREG: Grunnkrets.</param>
        /// <param name="basicStatisticalUnitName">Name corresponding to BasicStatisticalUnit code  &lt;br&gt;SSB: BasicStatisticalUnitName.</param>
        /// <param name="constituency">Unique code by the municipality used as  geographical division of the municipality set by the  electoral committee  &lt;br&gt;Remarks:   Also knows as in the voting constituency Cadastral  Freg: Stemmekrets (Valgkrets i matrikkelen).</param>
        /// <param name="schoolDistrict">Unique code by the municipality used to describe  a geographical division, used as a non-binding school  affiliation for kids in the area  &lt;br&gt;FREG: Skolekrets.</param>
        /// <param name="churchDistrict">Unique code for the parish (kirke sogn)  Parish is the basic unit of the Norwegian Church.  &lt;br&gt;Remarks:   The church district can extend over several municipalities  Freg: Kirkekrets.</param>
        /// <param name="urbanDistrictCode">Unique code for the urban district (bydel kode)  &lt;br&gt;SSB: Bydel id.</param>
        /// <param name="urbanDistrictName">The Urban district name (bydel)  &lt;br&gt;SSB: Bydel .</param>
        public ResidentialAddress(DateTime? registeredAt = default(DateTime?), bool? isValid = default(bool?), string source = default(string), string reason = default(string), DateTime? validFrom = default(DateTime?), DateTime? validTo = default(DateTime?), ResidentialAddressStreetAddress streetAddress = default(ResidentialAddressStreetAddress), ResidentialAddressCadastralAddress cadastralAddress = default(ResidentialAddressCadastralAddress), ResidentialAddressUnknownResidence unknownResidence = default(ResidentialAddressUnknownResidence), string cadastralIdentifier = default(string), string closeCadastralIdentifier = default(string), AddressConfidentiality? addressConfidentiality = default(AddressConfidentiality?), DateTime? moveDate = default(DateTime?), long? basicStatisticalUnit = default(long?), string basicStatisticalUnitName = default(string), long? constituency = default(long?), long? schoolDistrict = default(long?), long? churchDistrict = default(long?), string urbanDistrictCode = default(string), string urbanDistrictName = default(string))
        {
            this.RegisteredAt = registeredAt;
            this.IsValid = isValid;
            this.Source = source;
            this.Reason = reason;
            this.ValidFrom = validFrom;
            this.ValidTo = validTo;
            this.StreetAddress = streetAddress;
            this.CadastralAddress = cadastralAddress;
            this.UnknownResidence = unknownResidence;
            this.CadastralIdentifier = cadastralIdentifier;
            this.CloseCadastralIdentifier = closeCadastralIdentifier;
            this.AddressConfidentiality = addressConfidentiality;
            this.MoveDate = moveDate;
            this.BasicStatisticalUnit = basicStatisticalUnit;
            this.BasicStatisticalUnitName = basicStatisticalUnitName;
            this.Constituency = constituency;
            this.SchoolDistrict = schoolDistrict;
            this.ChurchDistrict = churchDistrict;
            this.UrbanDistrictCode = urbanDistrictCode;
            this.UrbanDistrictName = urbanDistrictName;
        }

        /// <summary>
        /// &lt;br&gt;FREG: Ajourholdstidspunkt
        /// </summary>
        /// <value>&lt;br&gt;FREG: Ajourholdstidspunkt</value>
        [DataMember(Name = "registeredAt", EmitDefaultValue = true)]
        public DateTime? RegisteredAt { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: ErGjeldende
        /// </summary>
        /// <value>&lt;br&gt;FREG: ErGjeldende</value>
        [DataMember(Name = "isValid", EmitDefaultValue = true)]
        public bool? IsValid { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Kilde
        /// </summary>
        /// <value>&lt;br&gt;FREG: Kilde</value>
        [DataMember(Name = "source", EmitDefaultValue = true)]
        public string Source { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Aarsak
        /// </summary>
        /// <value>&lt;br&gt;FREG: Aarsak</value>
        [DataMember(Name = "reason", EmitDefaultValue = true)]
        public string Reason { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Gyldighetstidspunkt
        /// </summary>
        /// <value>&lt;br&gt;FREG: Gyldighetstidspunkt</value>
        [DataMember(Name = "validFrom", EmitDefaultValue = true)]
        public DateTime? ValidFrom { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Opphoerstidspunkt
        /// </summary>
        /// <value>&lt;br&gt;FREG: Opphoerstidspunkt</value>
        [DataMember(Name = "validTo", EmitDefaultValue = true)]
        public DateTime? ValidTo { get; set; }

        /// <summary>
        /// Gets or Sets StreetAddress
        /// </summary>
        [DataMember(Name = "streetAddress", EmitDefaultValue = true)]
        public ResidentialAddressStreetAddress StreetAddress { get; set; }

        /// <summary>
        /// Gets or Sets CadastralAddress
        /// </summary>
        [DataMember(Name = "cadastralAddress", EmitDefaultValue = true)]
        public ResidentialAddressCadastralAddress CadastralAddress { get; set; }

        /// <summary>
        /// Gets or Sets UnknownResidence
        /// </summary>
        [DataMember(Name = "unknownResidence", EmitDefaultValue = true)]
        public ResidentialAddressUnknownResidence UnknownResidence { get; set; }

        /// <summary>
        /// Unique identifier from the Norwegian Mapping Authority.  &lt;br&gt;FREG: AdresseIdentifikatorFraMatrikkelen
        /// </summary>
        /// <value>Unique identifier from the Norwegian Mapping Authority.  &lt;br&gt;FREG: AdresseIdentifikatorFraMatrikkelen</value>
        [DataMember(Name = "cadastralIdentifier", EmitDefaultValue = true)]
        public string CadastralIdentifier { get; set; }

        /// <summary>
        /// Unique identifier from the Mapping Authority.  If the Cadastral information used in CadastralIdentifier  is inaccurate, CloseCadastralIdentifier will contain the  unqiue identifier for a near by house.  I.e. If the house letter is not known, the CloseCadastralIdentifier  could point to the house with letter \&quot;A\&quot;, while CadastralIdentifier  would point to all the house number, without letters (which could be multiple houses)  Used to catch changes to the Cadastral to a nearby  &lt;br&gt;Remarks:   (07.02.2020) Not in use  Freg: NaerAdresseIdentifikatorFraMatrikkelen
        /// </summary>
        /// <value>Unique identifier from the Mapping Authority.  If the Cadastral information used in CadastralIdentifier  is inaccurate, CloseCadastralIdentifier will contain the  unqiue identifier for a near by house.  I.e. If the house letter is not known, the CloseCadastralIdentifier  could point to the house with letter \&quot;A\&quot;, while CadastralIdentifier  would point to all the house number, without letters (which could be multiple houses)  Used to catch changes to the Cadastral to a nearby  &lt;br&gt;Remarks:   (07.02.2020) Not in use  Freg: NaerAdresseIdentifikatorFraMatrikkelen</value>
        [DataMember(Name = "closeCadastralIdentifier", EmitDefaultValue = true)]
        public string CloseCadastralIdentifier { get; set; }

        /// <summary>
        /// Reported as move date by person  &lt;br&gt;FREG: Flyttedato
        /// </summary>
        /// <value>Reported as move date by person  &lt;br&gt;FREG: Flyttedato</value>
        [DataMember(Name = "moveDate", EmitDefaultValue = true)]
        public DateTime? MoveDate { get; set; }

        /// <summary>
        /// Unique code by the municipality used to  divide small areas of similar nature/commercial/building structure  used as grounds for detailed regional statistic analysis.  &lt;br&gt;FREG: Grunnkrets
        /// </summary>
        /// <value>Unique code by the municipality used to  divide small areas of similar nature/commercial/building structure  used as grounds for detailed regional statistic analysis.  &lt;br&gt;FREG: Grunnkrets</value>
        [DataMember(Name = "basicStatisticalUnit", EmitDefaultValue = true)]
        public long? BasicStatisticalUnit { get; set; }

        /// <summary>
        /// Name corresponding to BasicStatisticalUnit code  &lt;br&gt;SSB: BasicStatisticalUnitName
        /// </summary>
        /// <value>Name corresponding to BasicStatisticalUnit code  &lt;br&gt;SSB: BasicStatisticalUnitName</value>
        [DataMember(Name = "basicStatisticalUnitName", EmitDefaultValue = true)]
        public string BasicStatisticalUnitName { get; set; }

        /// <summary>
        /// Unique code by the municipality used as  geographical division of the municipality set by the  electoral committee  &lt;br&gt;Remarks:   Also knows as in the voting constituency Cadastral  Freg: Stemmekrets (Valgkrets i matrikkelen)
        /// </summary>
        /// <value>Unique code by the municipality used as  geographical division of the municipality set by the  electoral committee  &lt;br&gt;Remarks:   Also knows as in the voting constituency Cadastral  Freg: Stemmekrets (Valgkrets i matrikkelen)</value>
        [DataMember(Name = "constituency", EmitDefaultValue = true)]
        public long? Constituency { get; set; }

        /// <summary>
        /// Unique code by the municipality used to describe  a geographical division, used as a non-binding school  affiliation for kids in the area  &lt;br&gt;FREG: Skolekrets
        /// </summary>
        /// <value>Unique code by the municipality used to describe  a geographical division, used as a non-binding school  affiliation for kids in the area  &lt;br&gt;FREG: Skolekrets</value>
        [DataMember(Name = "schoolDistrict", EmitDefaultValue = true)]
        public long? SchoolDistrict { get; set; }

        /// <summary>
        /// Unique code for the parish (kirke sogn)  Parish is the basic unit of the Norwegian Church.  &lt;br&gt;Remarks:   The church district can extend over several municipalities  Freg: Kirkekrets
        /// </summary>
        /// <value>Unique code for the parish (kirke sogn)  Parish is the basic unit of the Norwegian Church.  &lt;br&gt;Remarks:   The church district can extend over several municipalities  Freg: Kirkekrets</value>
        [DataMember(Name = "churchDistrict", EmitDefaultValue = true)]
        public long? ChurchDistrict { get; set; }

        /// <summary>
        /// Unique code for the urban district (bydel kode)  &lt;br&gt;SSB: Bydel id
        /// </summary>
        /// <value>Unique code for the urban district (bydel kode)  &lt;br&gt;SSB: Bydel id</value>
        [DataMember(Name = "urbanDistrictCode", EmitDefaultValue = true)]
        public string UrbanDistrictCode { get; set; }

        /// <summary>
        /// The Urban district name (bydel)  &lt;br&gt;SSB: Bydel 
        /// </summary>
        /// <value>The Urban district name (bydel)  &lt;br&gt;SSB: Bydel </value>
        [DataMember(Name = "urbanDistrictName", EmitDefaultValue = true)]
        public string UrbanDistrictName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResidentialAddress {\n");
            sb.Append("  RegisteredAt: ").Append(RegisteredAt).Append("\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("  ValidTo: ").Append(ValidTo).Append("\n");
            sb.Append("  StreetAddress: ").Append(StreetAddress).Append("\n");
            sb.Append("  CadastralAddress: ").Append(CadastralAddress).Append("\n");
            sb.Append("  UnknownResidence: ").Append(UnknownResidence).Append("\n");
            sb.Append("  CadastralIdentifier: ").Append(CadastralIdentifier).Append("\n");
            sb.Append("  CloseCadastralIdentifier: ").Append(CloseCadastralIdentifier).Append("\n");
            sb.Append("  AddressConfidentiality: ").Append(AddressConfidentiality).Append("\n");
            sb.Append("  MoveDate: ").Append(MoveDate).Append("\n");
            sb.Append("  BasicStatisticalUnit: ").Append(BasicStatisticalUnit).Append("\n");
            sb.Append("  BasicStatisticalUnitName: ").Append(BasicStatisticalUnitName).Append("\n");
            sb.Append("  Constituency: ").Append(Constituency).Append("\n");
            sb.Append("  SchoolDistrict: ").Append(SchoolDistrict).Append("\n");
            sb.Append("  ChurchDistrict: ").Append(ChurchDistrict).Append("\n");
            sb.Append("  UrbanDistrictCode: ").Append(UrbanDistrictCode).Append("\n");
            sb.Append("  UrbanDistrictName: ").Append(UrbanDistrictName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResidentialAddress);
        }

        /// <summary>
        /// Returns true if ResidentialAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of ResidentialAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResidentialAddress input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RegisteredAt == input.RegisteredAt ||
                    (this.RegisteredAt != null &&
                    this.RegisteredAt.Equals(input.RegisteredAt))
                ) && 
                (
                    this.IsValid == input.IsValid ||
                    (this.IsValid != null &&
                    this.IsValid.Equals(input.IsValid))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.ValidFrom == input.ValidFrom ||
                    (this.ValidFrom != null &&
                    this.ValidFrom.Equals(input.ValidFrom))
                ) && 
                (
                    this.ValidTo == input.ValidTo ||
                    (this.ValidTo != null &&
                    this.ValidTo.Equals(input.ValidTo))
                ) && 
                (
                    this.StreetAddress == input.StreetAddress ||
                    (this.StreetAddress != null &&
                    this.StreetAddress.Equals(input.StreetAddress))
                ) && 
                (
                    this.CadastralAddress == input.CadastralAddress ||
                    (this.CadastralAddress != null &&
                    this.CadastralAddress.Equals(input.CadastralAddress))
                ) && 
                (
                    this.UnknownResidence == input.UnknownResidence ||
                    (this.UnknownResidence != null &&
                    this.UnknownResidence.Equals(input.UnknownResidence))
                ) && 
                (
                    this.CadastralIdentifier == input.CadastralIdentifier ||
                    (this.CadastralIdentifier != null &&
                    this.CadastralIdentifier.Equals(input.CadastralIdentifier))
                ) && 
                (
                    this.CloseCadastralIdentifier == input.CloseCadastralIdentifier ||
                    (this.CloseCadastralIdentifier != null &&
                    this.CloseCadastralIdentifier.Equals(input.CloseCadastralIdentifier))
                ) && 
                (
                    this.AddressConfidentiality == input.AddressConfidentiality ||
                    this.AddressConfidentiality.Equals(input.AddressConfidentiality)
                ) && 
                (
                    this.MoveDate == input.MoveDate ||
                    (this.MoveDate != null &&
                    this.MoveDate.Equals(input.MoveDate))
                ) && 
                (
                    this.BasicStatisticalUnit == input.BasicStatisticalUnit ||
                    (this.BasicStatisticalUnit != null &&
                    this.BasicStatisticalUnit.Equals(input.BasicStatisticalUnit))
                ) && 
                (
                    this.BasicStatisticalUnitName == input.BasicStatisticalUnitName ||
                    (this.BasicStatisticalUnitName != null &&
                    this.BasicStatisticalUnitName.Equals(input.BasicStatisticalUnitName))
                ) && 
                (
                    this.Constituency == input.Constituency ||
                    (this.Constituency != null &&
                    this.Constituency.Equals(input.Constituency))
                ) && 
                (
                    this.SchoolDistrict == input.SchoolDistrict ||
                    (this.SchoolDistrict != null &&
                    this.SchoolDistrict.Equals(input.SchoolDistrict))
                ) && 
                (
                    this.ChurchDistrict == input.ChurchDistrict ||
                    (this.ChurchDistrict != null &&
                    this.ChurchDistrict.Equals(input.ChurchDistrict))
                ) && 
                (
                    this.UrbanDistrictCode == input.UrbanDistrictCode ||
                    (this.UrbanDistrictCode != null &&
                    this.UrbanDistrictCode.Equals(input.UrbanDistrictCode))
                ) && 
                (
                    this.UrbanDistrictName == input.UrbanDistrictName ||
                    (this.UrbanDistrictName != null &&
                    this.UrbanDistrictName.Equals(input.UrbanDistrictName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RegisteredAt != null)
                {
                    hashCode = (hashCode * 59) + this.RegisteredAt.GetHashCode();
                }
                if (this.IsValid != null)
                {
                    hashCode = (hashCode * 59) + this.IsValid.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.Reason != null)
                {
                    hashCode = (hashCode * 59) + this.Reason.GetHashCode();
                }
                if (this.ValidFrom != null)
                {
                    hashCode = (hashCode * 59) + this.ValidFrom.GetHashCode();
                }
                if (this.ValidTo != null)
                {
                    hashCode = (hashCode * 59) + this.ValidTo.GetHashCode();
                }
                if (this.StreetAddress != null)
                {
                    hashCode = (hashCode * 59) + this.StreetAddress.GetHashCode();
                }
                if (this.CadastralAddress != null)
                {
                    hashCode = (hashCode * 59) + this.CadastralAddress.GetHashCode();
                }
                if (this.UnknownResidence != null)
                {
                    hashCode = (hashCode * 59) + this.UnknownResidence.GetHashCode();
                }
                if (this.CadastralIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.CadastralIdentifier.GetHashCode();
                }
                if (this.CloseCadastralIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.CloseCadastralIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AddressConfidentiality.GetHashCode();
                if (this.MoveDate != null)
                {
                    hashCode = (hashCode * 59) + this.MoveDate.GetHashCode();
                }
                if (this.BasicStatisticalUnit != null)
                {
                    hashCode = (hashCode * 59) + this.BasicStatisticalUnit.GetHashCode();
                }
                if (this.BasicStatisticalUnitName != null)
                {
                    hashCode = (hashCode * 59) + this.BasicStatisticalUnitName.GetHashCode();
                }
                if (this.Constituency != null)
                {
                    hashCode = (hashCode * 59) + this.Constituency.GetHashCode();
                }
                if (this.SchoolDistrict != null)
                {
                    hashCode = (hashCode * 59) + this.SchoolDistrict.GetHashCode();
                }
                if (this.ChurchDistrict != null)
                {
                    hashCode = (hashCode * 59) + this.ChurchDistrict.GetHashCode();
                }
                if (this.UrbanDistrictCode != null)
                {
                    hashCode = (hashCode * 59) + this.UrbanDistrictCode.GetHashCode();
                }
                if (this.UrbanDistrictName != null)
                {
                    hashCode = (hashCode * 59) + this.UrbanDistrictName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
