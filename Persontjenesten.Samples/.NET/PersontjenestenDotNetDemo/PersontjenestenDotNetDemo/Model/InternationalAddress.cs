/*
 * Persontjenesten API - ET
 *
 * ## Introduction  The Person API is a copy of the [National Population Register (\"Folkeregisteret\")](https://www.skatteetaten.no/en/person/national-registry/about/) serving the norwegian health sector, maintained by Norsk helsenett. More detailed information on data coming from the National Population Register is also available in Norwegian here: [Information Model](https://skatteetaten.github.io/folkeregisteret-api-dokumentasjon/informasjonsmodell/)  More detailed information about the Person API service, including how to get access, is documented here: [Persontjenesten](https://www.nhn.no/samhandlingsplattform/grunndata/persontjenesten)  ## Disclaimer  The Person API is under continuous development and will be subject to changes without notice. The changes will follow semantic versioning to prevent breaking changes. Legacy versions will be available for 6 months before they are discontinued. We encourage consumers to follow our changelog in order to keep track of any changes. Send feedback and questions to [persontjenesten@nhn.no](mailto:persontjenesten@nhn.no)  ## Changelog  See [Changelog](../static/changelog/index.html)  ## Synthetic test data  Data in our test environment is using synthetic test data coming from the [Synthetic National Register](https://skatteetaten.github.io/testnorge-tenor-dokumentasjon/kilder#syntetisk-folkeregister). To browse the data available, you can log in using ID-porten at [Testnorge](https://testdata.skatteetaten.no/web/testnorge/)  ## Authentication and authorization  This API uses [HelseID](https://www.nhn.no/samhandlingsplattform/helseid) for authentication and authorization. To use the API you will need to have a valid HelseID token with a valid scope.  There are two scopes available to consume resources from the Person API: - **ReadWithLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-with-legal-basis`    This scope provides read access to information in the authorization bundle \"public with legal basis\" (aka statutory authority).    For version 0.5 name was `nhn:hgd-persontjenesten-api/read`  - **ReadNoLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-no-legal-basis`    This scope provides read access to information in the public bundle \"public with**out** legal basis\". 
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// International address  &lt;br&gt;FREG: InternasjonalAdresse
    /// </summary>
    [DataContract(Name = "InternationalAddress")]
    public partial class InternationalAddress : IEquatable<InternationalAddress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InternationalAddress" /> class.
        /// </summary>
        /// <param name="coAddressName">Description of who the recipient is in care of (C/O),  or which recipient in an organization (v/ &#x3D; with, or Att: &#x3D; \&quot;Attention\&quot;)  &lt;br&gt;FREG: CoAdressenavn.</param>
        /// <param name="addressName">Name of a street, road, path, place or area  as registered in the cadastral of a municipality  &lt;br&gt;Remarks:   Address number (housing number and lettering) may be included  Freg: Adressenavn.</param>
        /// <param name="building">Describes name and/or number of a building  &lt;br&gt;FREG: Bygning.</param>
        /// <param name="floorNumber">Described which floor the registered address is located in  &lt;br&gt;FREG: Etasjenummer.</param>
        /// <param name="housingUnit">Address property describing what kind of habitat or  business is registered, and a unique identifier within  the building / floor  &lt;br&gt;FREG: Boenhet.</param>
        /// <param name="postBox">Post box identifier  &lt;br&gt;FREG: Postboks.</param>
        /// <param name="postCode">Post code / zip code for each post area  &lt;br&gt;FREG: Postkode.</param>
        /// <param name="cityOrPlaceName">Name of place or city  &lt;br&gt;FREG: ByEllerStedsnavn.</param>
        /// <param name="districtName">District inside a country or part of a city  &lt;br&gt;FREG: Distriktsnavn.</param>
        /// <param name="region">Large geographical area part of a country  &lt;br&gt;FREG: Region.</param>
        /// <param name="countryCode">2 letter Code used to represent a country  &lt;br&gt;Remarks:   Uses ISO 3166-1 Alpha 2. XK &#x3D; Kosovo.  Freg: Landkode.</param>
        public InternationalAddress(string coAddressName = default(string), string addressName = default(string), string building = default(string), string floorNumber = default(string), string housingUnit = default(string), string postBox = default(string), string postCode = default(string), string cityOrPlaceName = default(string), string districtName = default(string), string region = default(string), string countryCode = default(string))
        {
            this.CoAddressName = coAddressName;
            this.AddressName = addressName;
            this.Building = building;
            this.FloorNumber = floorNumber;
            this.HousingUnit = housingUnit;
            this.PostBox = postBox;
            this.PostCode = postCode;
            this.CityOrPlaceName = cityOrPlaceName;
            this.DistrictName = districtName;
            this.Region = region;
            this.CountryCode = countryCode;
        }

        /// <summary>
        /// Description of who the recipient is in care of (C/O),  or which recipient in an organization (v/ &#x3D; with, or Att: &#x3D; \&quot;Attention\&quot;)  &lt;br&gt;FREG: CoAdressenavn
        /// </summary>
        /// <value>Description of who the recipient is in care of (C/O),  or which recipient in an organization (v/ &#x3D; with, or Att: &#x3D; \&quot;Attention\&quot;)  &lt;br&gt;FREG: CoAdressenavn</value>
        [DataMember(Name = "coAddressName", EmitDefaultValue = true)]
        public string CoAddressName { get; set; }

        /// <summary>
        /// Name of a street, road, path, place or area  as registered in the cadastral of a municipality  &lt;br&gt;Remarks:   Address number (housing number and lettering) may be included  Freg: Adressenavn
        /// </summary>
        /// <value>Name of a street, road, path, place or area  as registered in the cadastral of a municipality  &lt;br&gt;Remarks:   Address number (housing number and lettering) may be included  Freg: Adressenavn</value>
        [DataMember(Name = "addressName", EmitDefaultValue = true)]
        public string AddressName { get; set; }

        /// <summary>
        /// Describes name and/or number of a building  &lt;br&gt;FREG: Bygning
        /// </summary>
        /// <value>Describes name and/or number of a building  &lt;br&gt;FREG: Bygning</value>
        [DataMember(Name = "building", EmitDefaultValue = true)]
        public string Building { get; set; }

        /// <summary>
        /// Described which floor the registered address is located in  &lt;br&gt;FREG: Etasjenummer
        /// </summary>
        /// <value>Described which floor the registered address is located in  &lt;br&gt;FREG: Etasjenummer</value>
        [DataMember(Name = "floorNumber", EmitDefaultValue = true)]
        public string FloorNumber { get; set; }

        /// <summary>
        /// Address property describing what kind of habitat or  business is registered, and a unique identifier within  the building / floor  &lt;br&gt;FREG: Boenhet
        /// </summary>
        /// <value>Address property describing what kind of habitat or  business is registered, and a unique identifier within  the building / floor  &lt;br&gt;FREG: Boenhet</value>
        [DataMember(Name = "housingUnit", EmitDefaultValue = true)]
        public string HousingUnit { get; set; }

        /// <summary>
        /// Post box identifier  &lt;br&gt;FREG: Postboks
        /// </summary>
        /// <value>Post box identifier  &lt;br&gt;FREG: Postboks</value>
        [DataMember(Name = "postBox", EmitDefaultValue = true)]
        public string PostBox { get; set; }

        /// <summary>
        /// Post code / zip code for each post area  &lt;br&gt;FREG: Postkode
        /// </summary>
        /// <value>Post code / zip code for each post area  &lt;br&gt;FREG: Postkode</value>
        [DataMember(Name = "postCode", EmitDefaultValue = true)]
        public string PostCode { get; set; }

        /// <summary>
        /// Name of place or city  &lt;br&gt;FREG: ByEllerStedsnavn
        /// </summary>
        /// <value>Name of place or city  &lt;br&gt;FREG: ByEllerStedsnavn</value>
        [DataMember(Name = "cityOrPlaceName", EmitDefaultValue = true)]
        public string CityOrPlaceName { get; set; }

        /// <summary>
        /// District inside a country or part of a city  &lt;br&gt;FREG: Distriktsnavn
        /// </summary>
        /// <value>District inside a country or part of a city  &lt;br&gt;FREG: Distriktsnavn</value>
        [DataMember(Name = "districtName", EmitDefaultValue = true)]
        public string DistrictName { get; set; }

        /// <summary>
        /// Large geographical area part of a country  &lt;br&gt;FREG: Region
        /// </summary>
        /// <value>Large geographical area part of a country  &lt;br&gt;FREG: Region</value>
        [DataMember(Name = "region", EmitDefaultValue = true)]
        public string Region { get; set; }

        /// <summary>
        /// 2 letter Code used to represent a country  &lt;br&gt;Remarks:   Uses ISO 3166-1 Alpha 2. XK &#x3D; Kosovo.  Freg: Landkode
        /// </summary>
        /// <value>2 letter Code used to represent a country  &lt;br&gt;Remarks:   Uses ISO 3166-1 Alpha 2. XK &#x3D; Kosovo.  Freg: Landkode</value>
        [DataMember(Name = "countryCode", EmitDefaultValue = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InternationalAddress {\n");
            sb.Append("  CoAddressName: ").Append(CoAddressName).Append("\n");
            sb.Append("  AddressName: ").Append(AddressName).Append("\n");
            sb.Append("  Building: ").Append(Building).Append("\n");
            sb.Append("  FloorNumber: ").Append(FloorNumber).Append("\n");
            sb.Append("  HousingUnit: ").Append(HousingUnit).Append("\n");
            sb.Append("  PostBox: ").Append(PostBox).Append("\n");
            sb.Append("  PostCode: ").Append(PostCode).Append("\n");
            sb.Append("  CityOrPlaceName: ").Append(CityOrPlaceName).Append("\n");
            sb.Append("  DistrictName: ").Append(DistrictName).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InternationalAddress);
        }

        /// <summary>
        /// Returns true if InternationalAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of InternationalAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InternationalAddress input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CoAddressName == input.CoAddressName ||
                    (this.CoAddressName != null &&
                    this.CoAddressName.Equals(input.CoAddressName))
                ) && 
                (
                    this.AddressName == input.AddressName ||
                    (this.AddressName != null &&
                    this.AddressName.Equals(input.AddressName))
                ) && 
                (
                    this.Building == input.Building ||
                    (this.Building != null &&
                    this.Building.Equals(input.Building))
                ) && 
                (
                    this.FloorNumber == input.FloorNumber ||
                    (this.FloorNumber != null &&
                    this.FloorNumber.Equals(input.FloorNumber))
                ) && 
                (
                    this.HousingUnit == input.HousingUnit ||
                    (this.HousingUnit != null &&
                    this.HousingUnit.Equals(input.HousingUnit))
                ) && 
                (
                    this.PostBox == input.PostBox ||
                    (this.PostBox != null &&
                    this.PostBox.Equals(input.PostBox))
                ) && 
                (
                    this.PostCode == input.PostCode ||
                    (this.PostCode != null &&
                    this.PostCode.Equals(input.PostCode))
                ) && 
                (
                    this.CityOrPlaceName == input.CityOrPlaceName ||
                    (this.CityOrPlaceName != null &&
                    this.CityOrPlaceName.Equals(input.CityOrPlaceName))
                ) && 
                (
                    this.DistrictName == input.DistrictName ||
                    (this.DistrictName != null &&
                    this.DistrictName.Equals(input.DistrictName))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CoAddressName != null)
                {
                    hashCode = (hashCode * 59) + this.CoAddressName.GetHashCode();
                }
                if (this.AddressName != null)
                {
                    hashCode = (hashCode * 59) + this.AddressName.GetHashCode();
                }
                if (this.Building != null)
                {
                    hashCode = (hashCode * 59) + this.Building.GetHashCode();
                }
                if (this.FloorNumber != null)
                {
                    hashCode = (hashCode * 59) + this.FloorNumber.GetHashCode();
                }
                if (this.HousingUnit != null)
                {
                    hashCode = (hashCode * 59) + this.HousingUnit.GetHashCode();
                }
                if (this.PostBox != null)
                {
                    hashCode = (hashCode * 59) + this.PostBox.GetHashCode();
                }
                if (this.PostCode != null)
                {
                    hashCode = (hashCode * 59) + this.PostCode.GetHashCode();
                }
                if (this.CityOrPlaceName != null)
                {
                    hashCode = (hashCode * 59) + this.CityOrPlaceName.GetHashCode();
                }
                if (this.DistrictName != null)
                {
                    hashCode = (hashCode * 59) + this.DistrictName.GetHashCode();
                }
                if (this.Region != null)
                {
                    hashCode = (hashCode * 59) + this.Region.GetHashCode();
                }
                if (this.CountryCode != null)
                {
                    hashCode = (hashCode * 59) + this.CountryCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
