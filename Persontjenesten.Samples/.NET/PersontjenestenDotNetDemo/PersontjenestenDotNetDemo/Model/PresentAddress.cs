/*
 * Persontjenesten API - ET
 *
 * ## Introduction  The Person API is a copy of the [National Population Register (\"Folkeregisteret\")](https://www.skatteetaten.no/en/person/national-registry/about/) serving the norwegian health sector, maintained by Norsk helsenett. More detailed information on data coming from the National Population Register is also available in Norwegian here: [Information Model](https://skatteetaten.github.io/folkeregisteret-api-dokumentasjon/informasjonsmodell/)  More detailed information about the Person API service, including how to get access, is documented here: [Persontjenesten](https://www.nhn.no/samhandlingsplattform/grunndata/persontjenesten)  ## Disclaimer  The Person API is under continuous development and will be subject to changes without notice. The changes will follow semantic versioning to prevent breaking changes. Legacy versions will be available for 6 months before they are discontinued. We encourage consumers to follow our changelog in order to keep track of any changes. Send feedback and questions to [persontjenesten@nhn.no](mailto:persontjenesten@nhn.no)  ## Changelog  See [Changelog](../static/changelog/index.html)  ## Synthetic test data  Data in our test environment is using synthetic test data coming from the [Synthetic National Register](https://skatteetaten.github.io/testnorge-tenor-dokumentasjon/kilder#syntetisk-folkeregister). To browse the data available, you can log in using ID-porten at [Testnorge](https://testdata.skatteetaten.no/web/testnorge/)  ## Authentication and authorization  This API uses [HelseID](https://www.nhn.no/samhandlingsplattform/helseid) for authentication and authorization. To use the API you will need to have a valid HelseID token with a valid scope.  There are two scopes available to consume resources from the Person API: - **ReadWithLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-with-legal-basis`    This scope provides read access to information in the authorization bundle \"public with legal basis\" (aka statutory authority).    For version 0.5 name was `nhn:hgd-persontjenesten-api/read`  - **ReadNoLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-no-legal-basis`    This scope provides read access to information in the public bundle \"public with**out** legal basis\". 
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// &lt;br&gt;Freg: Oppholdsadresse
    /// </summary>
    [DataContract(Name = "PresentAddress")]
    public partial class PresentAddress : IEquatable<PresentAddress>, IValidatableObject
    {

        /// <summary>
        /// &lt;br&gt;FREG: Adressegradering
        /// </summary>
        /// <value>&lt;br&gt;FREG: Adressegradering</value>
        [DataMember(Name = "addressConfidentiality", EmitDefaultValue = false)]
        public AddressConfidentiality? AddressConfidentiality { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: OppholdAnnetSted
        /// </summary>
        /// <value>&lt;br&gt;FREG: OppholdAnnetSted</value>
        [DataMember(Name = "stayElsewhere", EmitDefaultValue = true)]
        public StayElsewhere? StayElsewhere { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PresentAddress" /> class.
        /// </summary>
        /// <param name="registeredAt">&lt;br&gt;FREG: Ajourholdstidspunkt.</param>
        /// <param name="isValid">&lt;br&gt;FREG: ErGjeldende.</param>
        /// <param name="source">&lt;br&gt;FREG: Kilde.</param>
        /// <param name="reason">&lt;br&gt;FREG: Aarsak.</param>
        /// <param name="validFrom">&lt;br&gt;FREG: Gyldighetstidspunkt.</param>
        /// <param name="validTo">&lt;br&gt;FREG: Opphoerstidspunkt.</param>
        /// <param name="foreignAddress">foreignAddress.</param>
        /// <param name="isAddressUnknown">&lt;br&gt;FREG: AdressenErUkjent.</param>
        /// <param name="streetAddress">streetAddress.</param>
        /// <param name="cadastralAddress">cadastralAddress.</param>
        /// <param name="cadastralIdentifier">Unique identifier from the Norwegian Mapping Authority.  &lt;br&gt;FREG: AdresseIdentifikatorFraMatrikkelen.</param>
        /// <param name="addressConfidentiality">&lt;br&gt;FREG: Adressegradering.</param>
        /// <param name="presentAddressDate">The date of when this living address was reported to the National Population Register (FREG).  &lt;br&gt;FREG: Oppholdsadressedato.</param>
        /// <param name="stayElsewhere">&lt;br&gt;FREG: OppholdAnnetSted.</param>
        /// <param name="urbanDistrictCode">Unique code for the urban district (bydel kode)  &lt;br&gt;SSB: Bydel id.</param>
        /// <param name="urbanDistrictName">The Urban district name (bydel)  &lt;br&gt;SSB: Bydel .</param>
        /// <param name="basicStatisticalUnit">Unique code by the municipality used to  divide small areas of similar nature/commercial/building structure  used as grounds for detailed regional statistic analysis.  &lt;br&gt;FREG: Grunnkrets.</param>
        /// <param name="basicStatisticalUnitName">Name corresponding to BasicStatisticalUnit code  &lt;br&gt;SSB: BasicStatisticalUnitName.</param>
        public PresentAddress(DateTime? registeredAt = default(DateTime?), bool? isValid = default(bool?), string source = default(string), string reason = default(string), DateTime? validFrom = default(DateTime?), DateTime? validTo = default(DateTime?), ForeignContactAddressForeignAddress foreignAddress = default(ForeignContactAddressForeignAddress), bool? isAddressUnknown = default(bool?), PresentAddressStreetAddress streetAddress = default(PresentAddressStreetAddress), PresentAddressCadastralAddress cadastralAddress = default(PresentAddressCadastralAddress), string cadastralIdentifier = default(string), AddressConfidentiality? addressConfidentiality = default(AddressConfidentiality?), DateTime? presentAddressDate = default(DateTime?), StayElsewhere? stayElsewhere = default(StayElsewhere?), string urbanDistrictCode = default(string), string urbanDistrictName = default(string), long? basicStatisticalUnit = default(long?), string basicStatisticalUnitName = default(string))
        {
            this.RegisteredAt = registeredAt;
            this.IsValid = isValid;
            this.Source = source;
            this.Reason = reason;
            this.ValidFrom = validFrom;
            this.ValidTo = validTo;
            this.ForeignAddress = foreignAddress;
            this.IsAddressUnknown = isAddressUnknown;
            this.StreetAddress = streetAddress;
            this.CadastralAddress = cadastralAddress;
            this.CadastralIdentifier = cadastralIdentifier;
            this.AddressConfidentiality = addressConfidentiality;
            this.PresentAddressDate = presentAddressDate;
            this.StayElsewhere = stayElsewhere;
            this.UrbanDistrictCode = urbanDistrictCode;
            this.UrbanDistrictName = urbanDistrictName;
            this.BasicStatisticalUnit = basicStatisticalUnit;
            this.BasicStatisticalUnitName = basicStatisticalUnitName;
        }

        /// <summary>
        /// &lt;br&gt;FREG: Ajourholdstidspunkt
        /// </summary>
        /// <value>&lt;br&gt;FREG: Ajourholdstidspunkt</value>
        [DataMember(Name = "registeredAt", EmitDefaultValue = true)]
        public DateTime? RegisteredAt { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: ErGjeldende
        /// </summary>
        /// <value>&lt;br&gt;FREG: ErGjeldende</value>
        [DataMember(Name = "isValid", EmitDefaultValue = true)]
        public bool? IsValid { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Kilde
        /// </summary>
        /// <value>&lt;br&gt;FREG: Kilde</value>
        [DataMember(Name = "source", EmitDefaultValue = true)]
        public string Source { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Aarsak
        /// </summary>
        /// <value>&lt;br&gt;FREG: Aarsak</value>
        [DataMember(Name = "reason", EmitDefaultValue = true)]
        public string Reason { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Gyldighetstidspunkt
        /// </summary>
        /// <value>&lt;br&gt;FREG: Gyldighetstidspunkt</value>
        [DataMember(Name = "validFrom", EmitDefaultValue = true)]
        public DateTime? ValidFrom { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: Opphoerstidspunkt
        /// </summary>
        /// <value>&lt;br&gt;FREG: Opphoerstidspunkt</value>
        [DataMember(Name = "validTo", EmitDefaultValue = true)]
        public DateTime? ValidTo { get; set; }

        /// <summary>
        /// Gets or Sets ForeignAddress
        /// </summary>
        [DataMember(Name = "foreignAddress", EmitDefaultValue = true)]
        public ForeignContactAddressForeignAddress ForeignAddress { get; set; }

        /// <summary>
        /// &lt;br&gt;FREG: AdressenErUkjent
        /// </summary>
        /// <value>&lt;br&gt;FREG: AdressenErUkjent</value>
        [DataMember(Name = "isAddressUnknown", EmitDefaultValue = true)]
        public bool? IsAddressUnknown { get; set; }

        /// <summary>
        /// Gets or Sets StreetAddress
        /// </summary>
        [DataMember(Name = "streetAddress", EmitDefaultValue = true)]
        public PresentAddressStreetAddress StreetAddress { get; set; }

        /// <summary>
        /// Gets or Sets CadastralAddress
        /// </summary>
        [DataMember(Name = "cadastralAddress", EmitDefaultValue = true)]
        public PresentAddressCadastralAddress CadastralAddress { get; set; }

        /// <summary>
        /// Unique identifier from the Norwegian Mapping Authority.  &lt;br&gt;FREG: AdresseIdentifikatorFraMatrikkelen
        /// </summary>
        /// <value>Unique identifier from the Norwegian Mapping Authority.  &lt;br&gt;FREG: AdresseIdentifikatorFraMatrikkelen</value>
        [DataMember(Name = "cadastralIdentifier", EmitDefaultValue = true)]
        public string CadastralIdentifier { get; set; }

        /// <summary>
        /// The date of when this living address was reported to the National Population Register (FREG).  &lt;br&gt;FREG: Oppholdsadressedato
        /// </summary>
        /// <value>The date of when this living address was reported to the National Population Register (FREG).  &lt;br&gt;FREG: Oppholdsadressedato</value>
        [DataMember(Name = "presentAddressDate", EmitDefaultValue = true)]
        public DateTime? PresentAddressDate { get; set; }

        /// <summary>
        /// Unique code for the urban district (bydel kode)  &lt;br&gt;SSB: Bydel id
        /// </summary>
        /// <value>Unique code for the urban district (bydel kode)  &lt;br&gt;SSB: Bydel id</value>
        [DataMember(Name = "urbanDistrictCode", EmitDefaultValue = true)]
        public string UrbanDistrictCode { get; set; }

        /// <summary>
        /// The Urban district name (bydel)  &lt;br&gt;SSB: Bydel 
        /// </summary>
        /// <value>The Urban district name (bydel)  &lt;br&gt;SSB: Bydel </value>
        [DataMember(Name = "urbanDistrictName", EmitDefaultValue = true)]
        public string UrbanDistrictName { get; set; }

        /// <summary>
        /// Unique code by the municipality used to  divide small areas of similar nature/commercial/building structure  used as grounds for detailed regional statistic analysis.  &lt;br&gt;FREG: Grunnkrets
        /// </summary>
        /// <value>Unique code by the municipality used to  divide small areas of similar nature/commercial/building structure  used as grounds for detailed regional statistic analysis.  &lt;br&gt;FREG: Grunnkrets</value>
        [DataMember(Name = "basicStatisticalUnit", EmitDefaultValue = true)]
        public long? BasicStatisticalUnit { get; set; }

        /// <summary>
        /// Name corresponding to BasicStatisticalUnit code  &lt;br&gt;SSB: BasicStatisticalUnitName
        /// </summary>
        /// <value>Name corresponding to BasicStatisticalUnit code  &lt;br&gt;SSB: BasicStatisticalUnitName</value>
        [DataMember(Name = "basicStatisticalUnitName", EmitDefaultValue = true)]
        public string BasicStatisticalUnitName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PresentAddress {\n");
            sb.Append("  RegisteredAt: ").Append(RegisteredAt).Append("\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("  ValidTo: ").Append(ValidTo).Append("\n");
            sb.Append("  ForeignAddress: ").Append(ForeignAddress).Append("\n");
            sb.Append("  IsAddressUnknown: ").Append(IsAddressUnknown).Append("\n");
            sb.Append("  StreetAddress: ").Append(StreetAddress).Append("\n");
            sb.Append("  CadastralAddress: ").Append(CadastralAddress).Append("\n");
            sb.Append("  CadastralIdentifier: ").Append(CadastralIdentifier).Append("\n");
            sb.Append("  AddressConfidentiality: ").Append(AddressConfidentiality).Append("\n");
            sb.Append("  PresentAddressDate: ").Append(PresentAddressDate).Append("\n");
            sb.Append("  StayElsewhere: ").Append(StayElsewhere).Append("\n");
            sb.Append("  UrbanDistrictCode: ").Append(UrbanDistrictCode).Append("\n");
            sb.Append("  UrbanDistrictName: ").Append(UrbanDistrictName).Append("\n");
            sb.Append("  BasicStatisticalUnit: ").Append(BasicStatisticalUnit).Append("\n");
            sb.Append("  BasicStatisticalUnitName: ").Append(BasicStatisticalUnitName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PresentAddress);
        }

        /// <summary>
        /// Returns true if PresentAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of PresentAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PresentAddress input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RegisteredAt == input.RegisteredAt ||
                    (this.RegisteredAt != null &&
                    this.RegisteredAt.Equals(input.RegisteredAt))
                ) && 
                (
                    this.IsValid == input.IsValid ||
                    (this.IsValid != null &&
                    this.IsValid.Equals(input.IsValid))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.ValidFrom == input.ValidFrom ||
                    (this.ValidFrom != null &&
                    this.ValidFrom.Equals(input.ValidFrom))
                ) && 
                (
                    this.ValidTo == input.ValidTo ||
                    (this.ValidTo != null &&
                    this.ValidTo.Equals(input.ValidTo))
                ) && 
                (
                    this.ForeignAddress == input.ForeignAddress ||
                    (this.ForeignAddress != null &&
                    this.ForeignAddress.Equals(input.ForeignAddress))
                ) && 
                (
                    this.IsAddressUnknown == input.IsAddressUnknown ||
                    (this.IsAddressUnknown != null &&
                    this.IsAddressUnknown.Equals(input.IsAddressUnknown))
                ) && 
                (
                    this.StreetAddress == input.StreetAddress ||
                    (this.StreetAddress != null &&
                    this.StreetAddress.Equals(input.StreetAddress))
                ) && 
                (
                    this.CadastralAddress == input.CadastralAddress ||
                    (this.CadastralAddress != null &&
                    this.CadastralAddress.Equals(input.CadastralAddress))
                ) && 
                (
                    this.CadastralIdentifier == input.CadastralIdentifier ||
                    (this.CadastralIdentifier != null &&
                    this.CadastralIdentifier.Equals(input.CadastralIdentifier))
                ) && 
                (
                    this.AddressConfidentiality == input.AddressConfidentiality ||
                    this.AddressConfidentiality.Equals(input.AddressConfidentiality)
                ) && 
                (
                    this.PresentAddressDate == input.PresentAddressDate ||
                    (this.PresentAddressDate != null &&
                    this.PresentAddressDate.Equals(input.PresentAddressDate))
                ) && 
                (
                    this.StayElsewhere == input.StayElsewhere ||
                    this.StayElsewhere.Equals(input.StayElsewhere)
                ) && 
                (
                    this.UrbanDistrictCode == input.UrbanDistrictCode ||
                    (this.UrbanDistrictCode != null &&
                    this.UrbanDistrictCode.Equals(input.UrbanDistrictCode))
                ) && 
                (
                    this.UrbanDistrictName == input.UrbanDistrictName ||
                    (this.UrbanDistrictName != null &&
                    this.UrbanDistrictName.Equals(input.UrbanDistrictName))
                ) && 
                (
                    this.BasicStatisticalUnit == input.BasicStatisticalUnit ||
                    (this.BasicStatisticalUnit != null &&
                    this.BasicStatisticalUnit.Equals(input.BasicStatisticalUnit))
                ) && 
                (
                    this.BasicStatisticalUnitName == input.BasicStatisticalUnitName ||
                    (this.BasicStatisticalUnitName != null &&
                    this.BasicStatisticalUnitName.Equals(input.BasicStatisticalUnitName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RegisteredAt != null)
                {
                    hashCode = (hashCode * 59) + this.RegisteredAt.GetHashCode();
                }
                if (this.IsValid != null)
                {
                    hashCode = (hashCode * 59) + this.IsValid.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.Reason != null)
                {
                    hashCode = (hashCode * 59) + this.Reason.GetHashCode();
                }
                if (this.ValidFrom != null)
                {
                    hashCode = (hashCode * 59) + this.ValidFrom.GetHashCode();
                }
                if (this.ValidTo != null)
                {
                    hashCode = (hashCode * 59) + this.ValidTo.GetHashCode();
                }
                if (this.ForeignAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ForeignAddress.GetHashCode();
                }
                if (this.IsAddressUnknown != null)
                {
                    hashCode = (hashCode * 59) + this.IsAddressUnknown.GetHashCode();
                }
                if (this.StreetAddress != null)
                {
                    hashCode = (hashCode * 59) + this.StreetAddress.GetHashCode();
                }
                if (this.CadastralAddress != null)
                {
                    hashCode = (hashCode * 59) + this.CadastralAddress.GetHashCode();
                }
                if (this.CadastralIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.CadastralIdentifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AddressConfidentiality.GetHashCode();
                if (this.PresentAddressDate != null)
                {
                    hashCode = (hashCode * 59) + this.PresentAddressDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StayElsewhere.GetHashCode();
                if (this.UrbanDistrictCode != null)
                {
                    hashCode = (hashCode * 59) + this.UrbanDistrictCode.GetHashCode();
                }
                if (this.UrbanDistrictName != null)
                {
                    hashCode = (hashCode * 59) + this.UrbanDistrictName.GetHashCode();
                }
                if (this.BasicStatisticalUnit != null)
                {
                    hashCode = (hashCode * 59) + this.BasicStatisticalUnit.GetHashCode();
                }
                if (this.BasicStatisticalUnitName != null)
                {
                    hashCode = (hashCode * 59) + this.BasicStatisticalUnitName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
