/*
 * Persontjenesten API - ET
 * ## Introduction  The Person API is a copy of the [National Population Register (\"Folkeregisteret\")](https://www.skatteetaten.no/en/person/national-registry/about/) serving the norwegian health sector, maintained by Norsk helsenett. More detailed information on data coming from the National Population Register is also available in Norwegian here: [Information Model](https://skatteetaten.github.io/folkeregisteret-api-dokumentasjon/informasjonsmodell/)  More detailed information about the Person API service, including how to get access, is documented here: [Persontjenesten](https://www.nhn.no/samhandlingsplattform/grunndata/persontjenesten)  ## Disclaimer  The Person API is under continuous development and will be subject to changes without notice. The changes will follow semantic versioning to prevent breaking changes. Legacy versions will be available for 6 months before they are discontinued. We encourage consumers to follow our changelog in order to keep track of any changes. Send feedback and questions to [persontjenesten@nhn.no](mailto:persontjenesten@nhn.no)  ## Changelog  See [Changelog](../static/changelog/index.html)  ## Synthetic test data  Data in our test environment is using synthetic test data coming from the [Synthetic National Register](https://skatteetaten.github.io/testnorge-tenor-dokumentasjon/kilder#syntetisk-folkeregister). To browse the data available, you can log in using ID-porten at [Testnorge](https://testdata.skatteetaten.no/web/testnorge/)  ## Authentication and authorization  This API uses [HelseID](https://www.nhn.no/samhandlingsplattform/helseid) for authentication and authorization. To use the API you will need to have a valid HelseID token with a valid scope.  There are two scopes available to consume resources from the Person API: - **ReadWithLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-with-legal-basis`    This scope provides read access to information in the authorization bundle \"public with legal basis\" (aka statutory authority).    For version 0.5 name was `nhn:hgd-persontjenesten-api/read`  - **ReadNoLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-no-legal-basis`    This scope provides read access to information in the public bundle \"public with**out** legal basis\". 
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sf.nhn.helseid.demo.persontjenesten.model;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import sf.nhn.helseid.demo.persontjenesten.JSON;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * &lt;br&gt;FREG: Foedsel
 */
@ApiModel(description = "<br>FREG: Foedsel")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-21T11:48:55.741350900+02:00[Europe/Oslo]")
public class Birth {
  public static final String SERIALIZED_NAME_REGISTERED_AT = "registeredAt";
  @SerializedName(SERIALIZED_NAME_REGISTERED_AT)
  private OffsetDateTime registeredAt;

  public static final String SERIALIZED_NAME_IS_VALID = "isValid";
  @SerializedName(SERIALIZED_NAME_IS_VALID)
  private Boolean isValid;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_VALID_FROM = "validFrom";
  @SerializedName(SERIALIZED_NAME_VALID_FROM)
  private OffsetDateTime validFrom;

  public static final String SERIALIZED_NAME_VALID_TO = "validTo";
  @SerializedName(SERIALIZED_NAME_VALID_TO)
  private OffsetDateTime validTo;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "birthDate";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private OffsetDateTime birthDate;

  public static final String SERIALIZED_NAME_BIRTH_YEAR = "birthYear";
  @SerializedName(SERIALIZED_NAME_BIRTH_YEAR)
  private String birthYear;

  public static final String SERIALIZED_NAME_BIRTH_PLACE = "birthPlace";
  @SerializedName(SERIALIZED_NAME_BIRTH_PLACE)
  private String birthPlace;

  public static final String SERIALIZED_NAME_BIRTH_MUNICIPALITY_NUMBER = "birthMunicipalityNumber";
  @SerializedName(SERIALIZED_NAME_BIRTH_MUNICIPALITY_NUMBER)
  private String birthMunicipalityNumber;

  public static final String SERIALIZED_NAME_BIRTH_COUNTRY = "birthCountry";
  @SerializedName(SERIALIZED_NAME_BIRTH_COUNTRY)
  private String birthCountry;

  public Birth() {
  }

  public Birth registeredAt(OffsetDateTime registeredAt) {
    
    this.registeredAt = registeredAt;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Ajourholdstidspunkt
   * @return registeredAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>FREG: Ajourholdstidspunkt")

  public OffsetDateTime getRegisteredAt() {
    return registeredAt;
  }


  public void setRegisteredAt(OffsetDateTime registeredAt) {
    this.registeredAt = registeredAt;
  }


  public Birth isValid(Boolean isValid) {
    
    this.isValid = isValid;
    return this;
  }

   /**
   * &lt;br&gt;FREG: ErGjeldende
   * @return isValid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>FREG: ErGjeldende")

  public Boolean getIsValid() {
    return isValid;
  }


  public void setIsValid(Boolean isValid) {
    this.isValid = isValid;
  }


  public Birth source(String source) {
    
    this.source = source;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Kilde
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>FREG: Kilde")

  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    this.source = source;
  }


  public Birth reason(String reason) {
    
    this.reason = reason;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Aarsak
   * @return reason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>FREG: Aarsak")

  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    this.reason = reason;
  }


  public Birth validFrom(OffsetDateTime validFrom) {
    
    this.validFrom = validFrom;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Gyldighetstidspunkt
   * @return validFrom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>FREG: Gyldighetstidspunkt")

  public OffsetDateTime getValidFrom() {
    return validFrom;
  }


  public void setValidFrom(OffsetDateTime validFrom) {
    this.validFrom = validFrom;
  }


  public Birth validTo(OffsetDateTime validTo) {
    
    this.validTo = validTo;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Opphoerstidspunkt
   * @return validTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>FREG: Opphoerstidspunkt")

  public OffsetDateTime getValidTo() {
    return validTo;
  }


  public void setValidTo(OffsetDateTime validTo) {
    this.validTo = validTo;
  }


  public Birth birthDate(OffsetDateTime birthDate) {
    
    this.birthDate = birthDate;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Foedselsdato
   * @return birthDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>FREG: Foedselsdato")

  public OffsetDateTime getBirthDate() {
    return birthDate;
  }


  public void setBirthDate(OffsetDateTime birthDate) {
    this.birthDate = birthDate;
  }


  public Birth birthYear(String birthYear) {
    
    this.birthYear = birthYear;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Foedselsaar
   * @return birthYear
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>FREG: Foedselsaar")

  public String getBirthYear() {
    return birthYear;
  }


  public void setBirthYear(String birthYear) {
    this.birthYear = birthYear;
  }


  public Birth birthPlace(String birthPlace) {
    
    this.birthPlace = birthPlace;
    return this;
  }

   /**
   * &lt;br&gt;FREG: Foedested
   * @return birthPlace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>FREG: Foedested")

  public String getBirthPlace() {
    return birthPlace;
  }


  public void setBirthPlace(String birthPlace) {
    this.birthPlace = birthPlace;
  }


  public Birth birthMunicipalityNumber(String birthMunicipalityNumber) {
    
    this.birthMunicipalityNumber = birthMunicipalityNumber;
    return this;
  }

   /**
   * Norwegian municipality number where the birth was registered, if the person was born in Norway.  &lt;br&gt;FREG: FoedekommuneINorge
   * @return birthMunicipalityNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Norwegian municipality number where the birth was registered, if the person was born in Norway.  <br>FREG: FoedekommuneINorge")

  public String getBirthMunicipalityNumber() {
    return birthMunicipalityNumber;
  }


  public void setBirthMunicipalityNumber(String birthMunicipalityNumber) {
    this.birthMunicipalityNumber = birthMunicipalityNumber;
  }


  public Birth birthCountry(String birthCountry) {
    
    this.birthCountry = birthCountry;
    return this;
  }

   /**
   * The country code for the country where the person was born.  Country codes is given in ISO 3166-1 alpha 3  &lt;br&gt;FREG: Foedeland
   * @return birthCountry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The country code for the country where the person was born.  Country codes is given in ISO 3166-1 alpha 3  <br>FREG: Foedeland")

  public String getBirthCountry() {
    return birthCountry;
  }


  public void setBirthCountry(String birthCountry) {
    this.birthCountry = birthCountry;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Birth birth = (Birth) o;
    return Objects.equals(this.registeredAt, birth.registeredAt) &&
        Objects.equals(this.isValid, birth.isValid) &&
        Objects.equals(this.source, birth.source) &&
        Objects.equals(this.reason, birth.reason) &&
        Objects.equals(this.validFrom, birth.validFrom) &&
        Objects.equals(this.validTo, birth.validTo) &&
        Objects.equals(this.birthDate, birth.birthDate) &&
        Objects.equals(this.birthYear, birth.birthYear) &&
        Objects.equals(this.birthPlace, birth.birthPlace) &&
        Objects.equals(this.birthMunicipalityNumber, birth.birthMunicipalityNumber) &&
        Objects.equals(this.birthCountry, birth.birthCountry);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(registeredAt, isValid, source, reason, validFrom, validTo, birthDate, birthYear, birthPlace, birthMunicipalityNumber, birthCountry);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Birth {\n");
    sb.append("    registeredAt: ").append(toIndentedString(registeredAt)).append("\n");
    sb.append("    isValid: ").append(toIndentedString(isValid)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    validFrom: ").append(toIndentedString(validFrom)).append("\n");
    sb.append("    validTo: ").append(toIndentedString(validTo)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    birthYear: ").append(toIndentedString(birthYear)).append("\n");
    sb.append("    birthPlace: ").append(toIndentedString(birthPlace)).append("\n");
    sb.append("    birthMunicipalityNumber: ").append(toIndentedString(birthMunicipalityNumber)).append("\n");
    sb.append("    birthCountry: ").append(toIndentedString(birthCountry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("registeredAt");
    openapiFields.add("isValid");
    openapiFields.add("source");
    openapiFields.add("reason");
    openapiFields.add("validFrom");
    openapiFields.add("validTo");
    openapiFields.add("birthDate");
    openapiFields.add("birthYear");
    openapiFields.add("birthPlace");
    openapiFields.add("birthMunicipalityNumber");
    openapiFields.add("birthCountry");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Birth
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Birth.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Birth is not found in the empty JSON string", Birth.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Birth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Birth` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("birthYear") != null && !jsonObj.get("birthYear").isJsonNull()) && !jsonObj.get("birthYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthYear").toString()));
      }
      if ((jsonObj.get("birthPlace") != null && !jsonObj.get("birthPlace").isJsonNull()) && !jsonObj.get("birthPlace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthPlace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthPlace").toString()));
      }
      if ((jsonObj.get("birthMunicipalityNumber") != null && !jsonObj.get("birthMunicipalityNumber").isJsonNull()) && !jsonObj.get("birthMunicipalityNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthMunicipalityNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthMunicipalityNumber").toString()));
      }
      if ((jsonObj.get("birthCountry") != null && !jsonObj.get("birthCountry").isJsonNull()) && !jsonObj.get("birthCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthCountry").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Birth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Birth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Birth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Birth.class));

       return (TypeAdapter<T>) new TypeAdapter<Birth>() {
           @Override
           public void write(JsonWriter out, Birth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Birth read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Birth given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Birth
  * @throws IOException if the JSON string is invalid with respect to Birth
  */
  public static Birth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Birth.class);
  }

 /**
  * Convert an instance of Birth to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

