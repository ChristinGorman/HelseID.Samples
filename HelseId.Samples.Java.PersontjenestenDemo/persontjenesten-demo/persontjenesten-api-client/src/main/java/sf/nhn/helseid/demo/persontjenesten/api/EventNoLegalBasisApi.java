/*
 * Persontjenesten API - ET
 * ## Introduction  The Person API is a copy of the [National Population Register (\"Folkeregisteret\")](https://www.skatteetaten.no/en/person/national-registry/about/) serving the norwegian health sector, maintained by Norsk helsenett. More detailed information on data coming from the National Population Register is also available in Norwegian here: [Information Model](https://skatteetaten.github.io/folkeregisteret-api-dokumentasjon/informasjonsmodell/)  More detailed information about the Person API service, including how to get access, is documented here: [Persontjenesten](https://www.nhn.no/samhandlingsplattform/grunndata/persontjenesten)  ## Disclaimer  The Person API is under continuous development and will be subject to changes without notice. The changes will follow semantic versioning to prevent breaking changes. Legacy versions will be available for 6 months before they are discontinued. We encourage consumers to follow our changelog in order to keep track of any changes. Send feedback and questions to [persontjenesten@nhn.no](mailto:persontjenesten@nhn.no)  ## Changelog  See [Changelog](../static/changelog/index.html)  ## Synthetic test data  Data in our test environment is using synthetic test data coming from the [Synthetic National Register](https://skatteetaten.github.io/testnorge-tenor-dokumentasjon/kilder#syntetisk-folkeregister). To browse the data available, you can log in using ID-porten at [Testnorge](https://testdata.skatteetaten.no/web/testnorge/)  ## Authentication and authorization  This API uses [HelseID](https://www.nhn.no/samhandlingsplattform/helseid) for authentication and authorization. To use the API you will need to have a valid HelseID token with a valid scope.  There are two scopes available to consume resources from the Person API: - **ReadWithLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-with-legal-basis`    This scope provides read access to information in the authorization bundle \"public with legal basis\" (aka statutory authority).    For version 0.5 name was `nhn:hgd-persontjenesten-api/read`  - **ReadNoLegalBasis** | Scope: `nhn:hgd-persontjenesten-api/read-no-legal-basis`    This scope provides read access to information in the public bundle \"public with**out** legal basis\". 
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sf.nhn.helseid.demo.persontjenesten.api;

import com.google.gson.reflect.TypeToken;
import sf.nhn.helseid.demo.persontjenesten.*;
import sf.nhn.helseid.demo.persontjenesten.model.EventDocument;
import sf.nhn.helseid.demo.persontjenesten.model.EventDocumentSearchResult;
import sf.nhn.helseid.demo.persontjenesten.model.EventType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventNoLegalBasisApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventNoLegalBasisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventNoLegalBasisApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiNoLegalBasisEventLatestGet
     * @param apiVersion The requested API version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event document returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Event document not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiNoLegalBasisEventLatestGetCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/no-legal-basis/event/latest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarHeaderParams.put("api-version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HelseID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiNoLegalBasisEventLatestGetValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling apiNoLegalBasisEventLatestGet(Async)");
        }
        

        okhttp3.Call localVarCall = apiNoLegalBasisEventLatestGetCall(apiVersion, _callback);
        return localVarCall;

    }

    /**
     * Get the latest event. Returns a search result with the latest available event document
     * &lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
     * @param apiVersion The requested API version (required)
     * @return EventDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event document returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Event document not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public EventDocument apiNoLegalBasisEventLatestGet(String apiVersion) throws ApiException {
        ApiResponse<EventDocument> localVarResp = apiNoLegalBasisEventLatestGetWithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the latest event. Returns a search result with the latest available event document
     * &lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
     * @param apiVersion The requested API version (required)
     * @return ApiResponse&lt;EventDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event document returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Event document not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventDocument> apiNoLegalBasisEventLatestGetWithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = apiNoLegalBasisEventLatestGetValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<EventDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the latest event. Returns a search result with the latest available event document (asynchronously)
     * &lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
     * @param apiVersion The requested API version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event document returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Event document not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiNoLegalBasisEventLatestGetAsync(String apiVersion, final ApiCallback<EventDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiNoLegalBasisEventLatestGetValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EventDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventNoLegalBasis
     * @param apiVersion The requested API version (required)
     * @param sequenceNumber The lowest sequence number that should be included in the result (optional)
     * @param eventTypes Which event types that should be included in the result.              All event types will be returned if no event types are specified (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event document returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Event not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventNoLegalBasisCall(String apiVersion, Long sequenceNumber, List<EventType> eventTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/no-legal-basis/event";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sequenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sequenceNumber", sequenceNumber));
        }

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "eventTypes", eventTypes));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("api-version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HelseID" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventNoLegalBasisValidateBeforeCall(String apiVersion, Long sequenceNumber, List<EventType> eventTypes, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventNoLegalBasis(Async)");
        }
        

        okhttp3.Call localVarCall = eventNoLegalBasisCall(apiVersion, sequenceNumber, eventTypes, _callback);
        return localVarCall;

    }

    /**
     * Get list of specific events by filter options. Returns a search result with max 1000 event documents  starting with the specified sequenceNumber
     * Get a list of up to 1000 events from a given sequenceNumber as a starting point. The result list may be  further filtered by specifying which event types that should be included in the result.  The result list will contain the event for the given sequenceNumber if it exists.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
     * @param apiVersion The requested API version (required)
     * @param sequenceNumber The lowest sequence number that should be included in the result (optional)
     * @param eventTypes Which event types that should be included in the result.              All event types will be returned if no event types are specified (optional)
     * @return EventDocumentSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event document returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Event not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public EventDocumentSearchResult eventNoLegalBasis(String apiVersion, Long sequenceNumber, List<EventType> eventTypes) throws ApiException {
        ApiResponse<EventDocumentSearchResult> localVarResp = eventNoLegalBasisWithHttpInfo(apiVersion, sequenceNumber, eventTypes);
        return localVarResp.getData();
    }

    /**
     * Get list of specific events by filter options. Returns a search result with max 1000 event documents  starting with the specified sequenceNumber
     * Get a list of up to 1000 events from a given sequenceNumber as a starting point. The result list may be  further filtered by specifying which event types that should be included in the result.  The result list will contain the event for the given sequenceNumber if it exists.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
     * @param apiVersion The requested API version (required)
     * @param sequenceNumber The lowest sequence number that should be included in the result (optional)
     * @param eventTypes Which event types that should be included in the result.              All event types will be returned if no event types are specified (optional)
     * @return ApiResponse&lt;EventDocumentSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event document returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Event not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventDocumentSearchResult> eventNoLegalBasisWithHttpInfo(String apiVersion, Long sequenceNumber, List<EventType> eventTypes) throws ApiException {
        okhttp3.Call localVarCall = eventNoLegalBasisValidateBeforeCall(apiVersion, sequenceNumber, eventTypes, null);
        Type localVarReturnType = new TypeToken<EventDocumentSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of specific events by filter options. Returns a search result with max 1000 event documents  starting with the specified sequenceNumber (asynchronously)
     * Get a list of up to 1000 events from a given sequenceNumber as a starting point. The result list may be  further filtered by specifying which event types that should be included in the result.  The result list will contain the event for the given sequenceNumber if it exists.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Requires HelseId scope:&lt;/b&gt; ReadNoLegalBasis
     * @param apiVersion The requested API version (required)
     * @param sequenceNumber The lowest sequence number that should be included in the result (optional)
     * @param eventTypes Which event types that should be included in the result.              All event types will be returned if no event types are specified (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event document returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Event not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, invalid scope </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventNoLegalBasisAsync(String apiVersion, Long sequenceNumber, List<EventType> eventTypes, final ApiCallback<EventDocumentSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventNoLegalBasisValidateBeforeCall(apiVersion, sequenceNumber, eventTypes, _callback);
        Type localVarReturnType = new TypeToken<EventDocumentSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
